// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/eigensdk-go/services/operatorsinfo (interfaces: OperatorsInfoService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/operatorsinfo.go -package=mocks github.com/Layr-Labs/eigensdk-go/services/operatorsinfo OperatorsInfoService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/Layr-Labs/eigensdk-go/types"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockOperatorsInfoService is a mock of OperatorsInfoService interface.
type MockOperatorsInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorsInfoServiceMockRecorder
}

// MockOperatorsInfoServiceMockRecorder is the mock recorder for MockOperatorsInfoService.
type MockOperatorsInfoServiceMockRecorder struct {
	mock *MockOperatorsInfoService
}

// NewMockOperatorsInfoService creates a new mock instance.
func NewMockOperatorsInfoService(ctrl *gomock.Controller) *MockOperatorsInfoService {
	mock := &MockOperatorsInfoService{ctrl: ctrl}
	mock.recorder = &MockOperatorsInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorsInfoService) EXPECT() *MockOperatorsInfoServiceMockRecorder {
	return m.recorder
}

// GetOperatorInfo mocks base method.
func (m *MockOperatorsInfoService) GetOperatorInfo(arg0 context.Context, arg1 common.Address) (types.OperatorInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorInfo", arg0, arg1)
	ret0, _ := ret[0].(types.OperatorInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOperatorInfo indicates an expected call of GetOperatorInfo.
func (mr *MockOperatorsInfoServiceMockRecorder) GetOperatorInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorInfo", reflect.TypeOf((*MockOperatorsInfoService)(nil).GetOperatorInfo), arg0, arg1)
}
