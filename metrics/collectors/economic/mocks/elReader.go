// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/eigensdk-go/metrics/collectors/economic (interfaces: ELReader)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/elReader.go -package=mocks github.com/Layr-Labs/eigensdk-go/metrics/collectors/economic ELReader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockELReader is a mock of ELReader interface.
type MockELReader struct {
	ctrl     *gomock.Controller
	recorder *MockELReaderMockRecorder
}

// MockELReaderMockRecorder is the mock recorder for MockELReader.
type MockELReaderMockRecorder struct {
	mock *MockELReader
}

// NewMockELReader creates a new mock instance.
func NewMockELReader(ctrl *gomock.Controller) *MockELReader {
	mock := &MockELReader{ctrl: ctrl}
	mock.recorder = &MockELReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockELReader) EXPECT() *MockELReaderMockRecorder {
	return m.recorder
}

// OperatorIsFrozen mocks base method.
func (m *MockELReader) OperatorIsFrozen(arg0 *bind.CallOpts, arg1 common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorIsFrozen", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatorIsFrozen indicates an expected call of OperatorIsFrozen.
func (mr *MockELReaderMockRecorder) OperatorIsFrozen(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorIsFrozen", reflect.TypeOf((*MockELReader)(nil).OperatorIsFrozen), arg0, arg1)
}
