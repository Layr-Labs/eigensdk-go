// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractECDSAStakeRegistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ECDSAStakeRegistryStakeUpdate is an auto generated low-level Go binding around an user-defined struct.
type ECDSAStakeRegistryStakeUpdate struct {
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
	Stake                 *big.Int
}

// ECDSAStakeRegistryStrategyParams is an auto generated low-level Go binding around an user-defined struct.
type ECDSAStakeRegistryStrategyParams struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ContractECDSAStakeRegistryMetaData contains all meta data concerning the ContractECDSAStakeRegistry contract.
var ContractECDSAStakeRegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_registryCoordinator\",\"type\":\"address\",\"internalType\":\"contractECDSARegistryCoordinator\"},{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"MAX_WEIGHING_FUNCTION_LENGTH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"WEIGHTING_DIVISOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addStrategies\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"_strategyParams\",\"type\":\"tuple[]\",\"internalType\":\"structECDSAStakeRegistry.StrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperator\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getCurrentStake\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentTotalStake\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLatestStakeUpdate\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structECDSAStakeRegistry.StakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeAtBlockNumber\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeAtBlockNumberAndIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeHistory\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structECDSAStakeRegistry.StakeUpdate[]\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeHistoryLength\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeUpdateAtIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structECDSAStakeRegistry.StakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeUpdateIndexAtBlockNumber\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeAtBlockNumberFromIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeHistoryLength\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeIndicesAtBlockNumber\",\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeUpdateAtIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structECDSAStakeRegistry.StakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initializeQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"_strategyParams\",\"type\":\"tuple[]\",\"internalType\":\"structECDSAStakeRegistry.StrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"minimumStakeForQuorum\",\"inputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"modifyStrategyParams\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"strategyIndices\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"newMultipliers\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registerOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registryCoordinator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeStrategies\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"indicesToRemove\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinimumStakeForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"strategyParams\",\"inputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyParamsByIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structECDSAStakeRegistry.StrategyParams\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyParamsLength\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"updateOperatorStake\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint192\",\"internalType\":\"uint192\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"weightOfOperatorForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"MinimumStakeForQuorumUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorStakeUpdate\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"stake\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QuorumCreated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyAddedToQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyMultiplierUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyRemovedFromQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"}],\"anonymous\":false}]",
	Bin: "0x60c06040523480156200001157600080fd5b506040516200389b3803806200389b833981016040819052620000349162000065565b6001600160a01b0391821660a05216608052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a05161379262000109600039600081816103410152818161063e01528181610a67015281816111a6015281816113fe015281816114f70152818161181101528181611ad90152611c060152600081816104d30152611e2a01526137926000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806381c0750211610104578063c8294c56116100a2578063ea595ab111610071578063ea595ab1146104f5578063f0391e5a14610515578063f4e24fe514610536578063ff694a771461054957600080fd5b8063c8294c5614610495578063cdb57ae4146104a8578063d5eccc05146104bb578063df5cf723146104ce57600080fd5b8063b6904b78116100de578063b6904b7814610433578063bc9a40c314610446578063c46778a514610459578063c601527d1461048257600080fd5b806381c07502146103a8578063837bb82e146103c8578063adc804da146103f357600080fd5b80633ca5a5f51161017c57806365f10aff1161014b57806365f10aff146103145780636d14a9871461033c5780637a64b5161461037b5780637c1723471461038e57600080fd5b80633ca5a5f5146102bc5780635e5a6775146102df5780635f1f2d77146102ee57806363efdb3e1461030157600080fd5b8063197cfc6e116101b8578063197cfc6e146102495780631f9b74e01461027457806320b6629814610287578063300ad3691461029c57600080fd5b80630491b41c146101df578063087324611461021557806312e7c5f914610236575b600080fd5b6102026101ed366004612c37565b60ff1660009081526001602052604090205490565b6040519081526020015b60405180910390f35b610228610223366004612c52565b61055c565b60405161020c929190612c7c565b610202610244366004612cb6565b6105a5565b61025c610257366004612cb6565b6105d3565b6040516001600160601b03909116815260200161020c565b61025c610282366004612ceb565b6105ec565b61029a610295366004612d66565b61063c565b005b6102af6102aa366004612cb6565b61096d565b60405161020c9190612de6565b6102026102ca366004612c37565b60ff1660009081526003602052604090205490565b610202670de0b6b3a764000081565b61029a6102fc366004612eac565b610a65565b61025c61030f366004612f68565b610db0565b610327610322366004612fb5565b610e4f565b60405163ffffffff909116815260200161020c565b6103637f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161020c565b61025c610389366004612fb5565b610e66565b610396602081565b60405160ff909116815260200161020c565b6103bb6103b636600461303b565b610ed1565b60405161020c919061308d565b6103db6103d63660046130d7565b611199565b6040516001600160c01b03909116815260200161020c565b610406610401366004612c52565b6112f3565b6040805182516001600160a01b031681526020928301516001600160601b0316928101929092520161020c565b6102af610441366004612c52565b61136d565b61029a610454366004613152565b6113fc565b61025c610467366004612c37565b6000602081905290815260409020546001600160601b031681565b61029a610490366004613216565b6114f5565b61025c6104a3366004613263565b6115e9565b6102af6104b636600461329f565b611667565b61025c6104c9366004612c37565b611708565b6103637f000000000000000000000000000000000000000000000000000000000000000081565b610508610503366004612cb6565b61175b565b60405161020c91906132de565b6105286105233660046130d7565b611803565b60405161020c92919061338e565b61029a6105443660046133b3565b611ace565b61029a6105573660046133d3565b611bfb565b6003602052816000526040600020818154811061057857600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b90046001600160601b0316905082565b6001600160a01b038216600090815260026020908152604080832060ff851684529091529020545b92915050565b6000806105e0848461096d565b60400151949350505050565b60ff821660009081526001602052604081205483906106265760405162461bcd60e51b815260040161061d90613430565b60405180910390fd5b60006106328585611d66565b5095945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190613481565b6001600160a01b0316336001600160a01b0316146106ee5760405162461bcd60e51b815260040161061d9061349e565b8461070a8160ff16600090815260016020526040902054151590565b6107265760405162461bcd60e51b815260040161061d90613430565b838061079c576040805162461bcd60e51b81526020600482015260248101919091527f5374616b6552656769737472792e6d6f6469667953747261746567795061726160448201527f6d733a206e6f20737472617465677920696e64696365732070726f7669646564606482015260840161061d565b8281146108115760405162461bcd60e51b815260206004820152603960248201527f5374616b6552656769737472792e6d6f6469667953747261746567795061726160448201527f6d733a20696e707574206c656e677468206d69736d6174636800000000000000606482015260840161061d565b60ff87166000908152600360205260408120905b828110156109625785858281811061083f5761083f61351a565b90506020020160208101906108549190613530565b828989848181106108675761086761351a565b905060200201358154811061087e5761087e61351a565b9060005260206000200160000160146101000a8154816001600160601b0302191690836001600160601b031602179055508860ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75838a8a858181106108e7576108e761351a565b90506020020135815481106108fe576108fe61351a565b6000918252602090912001546001600160a01b03168888858181106109255761092561351a565b905060200201602081019061093a9190613530565b604051610948929190612c7c565b60405180910390a28061095a81613561565b915050610825565b505050505050505050565b6040805160608082018352600080835260208084018290528385018290526001600160a01b03871682526002815284822060ff871683528152848220548551938401865282845290830182905293820152909190816109cf5791506105cd9050565b6001600160a01b038516600090815260026020908152604080832060ff881684529091529020610a0060018461357c565b81548110610a1057610a1061351a565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b909304929092169082015292506105cd915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae79190613481565b6001600160a01b0316336001600160a01b031614610b175760405162461bcd60e51b815260040161061d9061349e565b81610b338160ff16600090815260016020526040902054151590565b610b4f5760405162461bcd60e51b815260040161061d90613430565b815180610bc45760405162461bcd60e51b815260206004820152603d60248201527f5374616b6552656769737472792e72656d6f7665537472617465676965733a2060448201527f6e6f20696e646963657320746f2072656d6f76652070726f7669646564000000606482015260840161061d565b60ff84166000908152600360205260408120905b82811015610da8578560ff167f31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f783878481518110610c1857610c1861351a565b602002602001015181548110610c3057610c3061351a565b600091825260209182902001546040516001600160a01b0390911681520160405180910390a28560ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a7583878481518110610c8e57610c8e61351a565b602002602001015181548110610ca657610ca661351a565b600091825260208083209190910154604080516001600160a01b039092168252918101929092520160405180910390a281548290610ce69060019061357c565b81548110610cf657610cf661351a565b9060005260206000200182868381518110610d1357610d1361351a565b602002602001015181548110610d2b57610d2b61351a565b600091825260209091208254910180546001600160a01b0319166001600160a01b03909216918217815591546001600160601b03600160a01b9182900416021790558154829080610d7e57610d7e613593565b60008281526020812082016000199081019190915501905580610da081613561565b915050610bd8565b505050505050565b6001600160a01b038216600090815260026020908152604080832060ff881684529091528120805482919084908110610deb57610deb61351a565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b90930492909216908201529050610e428186611f1c565b6040015195945050505050565b6000610e5c8484846120a7565b90505b9392505050565b6001600160a01b038316600090815260026020908152604080832060ff861684529091528120610e978585856120a7565b63ffffffff1681548110610ead57610ead61351a565b600091825260209091200154600160401b90046001600160601b0316949350505050565b60606000826001600160401b03811115610eed57610eed612e1b565b604051908082528060200260200182016040528015610f16578160200160208202803683370190505b50905060005b83811015611190576000858583818110610f3857610f3861351a565b919091013560f81c60008181526001602052604090205490925015159050610fd75760405162461bcd60e51b815260206004820152604660248201527f5374616b6552656769737472792e676574546f74616c5374616b65496e64696360448201527f65734174426c6f636b4e756d6265723a2071756f72756d20646f6573206e6f7460648201526508195e1a5cdd60d21b608482015260a40161061d565b60ff81166000908152600160205260408120805463ffffffff8a1692906110005761100061351a565b60009182526020909120015463ffffffff1611156110ac5760405162461bcd60e51b815260206004820152605b60248201527f5374616b6552656769737472792e676574546f74616c5374616b65496e64696360448201527f65734174426c6f636b4e756d6265723a2071756f72756d20686173206e6f207360648201527f74616b6520686973746f727920617420626c6f636b4e756d6265720000000000608482015260a40161061d565b60ff8116600090815260016020526040812054905b8181101561117a5760ff8316600090815260016020819052604090912063ffffffff8b16916110f0848661357c565b6110fa919061357c565b8154811061110a5761110a61351a565b60009182526020909120015463ffffffff161161116857600161112d828461357c565b611137919061357c565b8585815181106111495761114961351a565b602002602001019063ffffffff16908163ffffffff168152505061117a565b8061117281613561565b9150506110c1565b505050808061118890613561565b915050610f1c565b50949350505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111e35760405162461bcd60e51b815260040161061d906135a9565b6000805b838110156106325760008585838181106112035761120361351a565b919091013560f81c600081815260016020526040902054909250151590506112935760405162461bcd60e51b815260206004820152603860248201527f5374616b6552656769737472792e7570646174654f70657261746f725374616b60448201527f653a2071756f72756d20646f6573206e6f742065786973740000000000000000606482015260840161061d565b6000806112a0838b611d66565b91509150806112c25760009150600160ff84161b6001600160c01b0386161794505b60006112cf8a8585612363565b90506112db8482612614565b505050505080806112eb90613561565b9150506111e7565b604080518082019091526000808252602082015260ff8316600090815260036020526040902080548390811061132b5761132b61351a565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b90046001600160601b0316918101919091529392505050565b604080516060810182526000808252602080830182905282840182905260ff8616825260019052919091208054839081106113aa576113aa61351a565b600091825260209182902060408051606081018252929091015463ffffffff8082168452600160201b82041693830193909352600160401b9092046001600160601b0316918101919091529392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e9190613481565b6001600160a01b0316336001600160a01b0316146114ae5760405162461bcd60e51b815260040161061d9061349e565b816114ca8160ff16600090815260016020526040902054151590565b6114e65760405162461bcd60e51b815260040161061d90613430565b6114f0838361278e565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115779190613481565b6001600160a01b0316336001600160a01b0316146115a75760405162461bcd60e51b815260040161061d9061349e565b816115c38160ff16600090815260016020526040902054151590565b6115df5760405162461bcd60e51b815260040161061d90613430565b6114f083836127f7565b60ff831660009081526001602052604081208054829190849081106116105761161061351a565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b909304929092169082015290506105e08185611f1c565b60408051606081018252600080825260208083018290528284018290526001600160a01b03861682526002815283822060ff881683529052919091208054839081106116b5576116b561351a565b600091825260209182902060408051606081018252929091015463ffffffff8082168452600160201b82041693830193909352600160401b9092046001600160601b031691810191909152949350505050565b60ff811660009081526001602081905260408220805490916117299161357c565b815481106117395761173961351a565b600091825260209091200154600160401b90046001600160601b031692915050565b6001600160a01b038216600090815260026020908152604080832060ff851684528252808320805482518185028101850190935280835260609492939192909184015b828210156117f7576000848152602090819020604080516060810182529185015463ffffffff8082168452600160201b82041683850152600160401b90046001600160601b03169082015282526001909201910161179e565b50505050905092915050565b606080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461184e5760405162461bcd60e51b815260040161061d906135a9565b6000836001600160401b0381111561186857611868612e1b565b604051908082528060200260200182016040528015611891578160200160208202803683370190505b5090506000846001600160401b038111156118ae576118ae612e1b565b6040519080825280602002602001820160405280156118d7578160200160208202803683370190505b50905060005b85811015611ac05760008787838181106118f9576118f961351a565b919091013560f81c600081815260016020526040902054909250151590506119815760405162461bcd60e51b815260206004820152603560248201527f5374616b6552656769737472792e72656769737465724f70657261746f723a206044820152741c5d5bdc9d5b48191bd95cc81b9bdd08195e1a5cdd605a1b606482015260840161061d565b60008061198e838d611d66565b9150915080611a2b5760405162461bcd60e51b815260206004820152605b60248201527f5374616b6552656769737472792e72656769737465724f70657261746f723a2060448201527f4f70657261746f7220646f6573206e6f74206d656574206d696e696d756d207360648201527f74616b6520726571756972656d656e7420666f722071756f72756d0000000000608482015260a40161061d565b6000611a388c8585612363565b905082878681518110611a4d57611a4d61351a565b60200260200101906001600160601b031690816001600160601b031681525050611a778482612614565b868681518110611a8957611a8961351a565b60200260200101906001600160601b031690816001600160601b031681525050505050508080611ab890613561565b9150506118dd565b509097909650945050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611b165760405162461bcd60e51b815260040161061d906135a9565b60005b81811015611bf5576000838383818110611b3557611b3561351a565b919091013560f81c60008181526001602052604090205490925015159050611bc55760405162461bcd60e51b815260206004820152603760248201527f5374616b6552656769737472792e646572656769737465724f70657261746f7260448201527f3a2071756f72756d20646f6573206e6f74206578697374000000000000000000606482015260840161061d565b6000611bd386836000612363565b9050611bdf8282612614565b5050508080611bed90613561565b915050611b19565b50505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611c435760405162461bcd60e51b815260040161061d906135a9565b60ff831660009081526001602052604090205415611cc15760405162461bcd60e51b815260206004820152603560248201527f5374616b6552656769737472792e696e697469616c697a6551756f72756d3a2060448201527471756f72756d20616c72656164792065786973747360581b606482015260840161061d565b611ccb83826127f7565b611cd5838361278e565b505060ff166000908152600160208181526040808420815160608101835263ffffffff438116825281850187815293820187815283549687018455928752939095209451949093018054915193516001600160601b0316600160401b02600160401b600160a01b0319948416600160201b0267ffffffffffffffff1990931695909316949094171791909116179055565b600080600080611d858660ff1660009081526003602052604090205490565b604080518082019091526000808252602082015290915060005b82811015611ee95760ff88166000908152600360205260409020805482908110611dcb57611dcb61351a565b6000918252602080832060408051808201825293909101546001600160a01b03808216808652600160a01b9092046001600160601b031693850193909352905163778e55f360e01b81528b8316600482015260248101919091529194507f0000000000000000000000000000000000000000000000000000000000000000169063778e55f390604401602060405180830381865afa158015611e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e95919061361b565b90508015611ed657670de0b6b3a764000083602001516001600160601b031682611ebf9190613634565b611ec99190613653565b611ed39086613675565b94505b5080611ee181613561565b915050611d9f565b50505060ff85166000908152602081905260409020549092506001600160601b03908116908316101590505b9250929050565b816000015163ffffffff168163ffffffff161015611fc85760405162461bcd60e51b815260206004820152606060248201527f5374616b6552656769737472792e5f76616c69646174654f70657261746f725360448201527f74616b654174426c6f636b4e756d6265723a206f70657261746f725374616b6560648201527f5570646174652069732066726f6d20616674657220626c6f636b4e756d626572608482015260a40161061d565b602082015163ffffffff161580611fee5750816020015163ffffffff168163ffffffff16105b6120a35760405162461bcd60e51b815260206004820152607460248201527f5374616b6552656769737472792e5f76616c69646174654f70657261746f725360448201527f74616b654174426c6f636b4e756d6265723a2074686572652069732061206e6560648201527f776572206f70657261746f725374616b6555706461746520617661696c61626c60848201527332903132b337b93290313637b1b5a73ab6b132b960611b60a482015260c40161061d565b5050565b6001600160a01b038316600090815260026020908152604080832060ff86168452909152812054815b8181101561229e576001600160a01b038616600090815260026020908152604080832060ff89168452909152902063ffffffff8516906001612112848661357c565b61211c919061357c565b8154811061212c5761212c61351a565b60009182526020909120015463ffffffff161161228c576001600160a01b038616600090815260026020908152604080832060ff8916845290915281206001612175848661357c565b61217f919061357c565b8154811061218f5761218f61351a565b600091825260209091200154600160201b900463ffffffff1690508015806121c257508463ffffffff168163ffffffff16115b61226c5760405162461bcd60e51b815260206004820152606960248201527f5374616b6552656769737472792e5f6765745374616b65557064617465496e6460448201527f6578466f724f70657261746f724174426c6f636b4e756d6265723a206f70657260648201527f61746f72496420686173206e6f207374616b652075706461746520617420626c60848201526837b1b5a73ab6b132b960b91b60a482015260c40161061d565b6001612278838561357c565b612282919061357c565b9350505050610e5f565b8061229681613561565b9150506120d0565b5060405162461bcd60e51b815260206004820152608160248201527f5374616b6552656769737472792e5f6765745374616b65557064617465496e6460448201527f6578466f724f70657261746f724174426c6f636b4e756d6265723a206e6f207360648201527f74616b652075706461746520666f756e6420666f72206f70657261746f72496460848201527f20616e642071756f72756d4e756d62657220617420626c6f636b206e756d626560a4820152603960f91b60c482015260e40161061d565b6001600160a01b038316600090815260026020908152604080832060ff8616845290915281205481908061243b576001600160a01b038616600090815260026020908152604080832060ff891684528252808320815160608101835263ffffffff43811682528185018681526001600160601b03808c16958401958652845460018101865594885295909620915191909201805495519351909416600160401b02600160401b600160a01b0319938316600160201b0267ffffffffffffffff19909616919092161793909317169190911790556125b1565b6001600160a01b038616600090815260026020908152604080832060ff89168452909152812061246c60018461357c565b8154811061247c5761247c61351a565b600091825260209091200180546001600160601b03600160401b9091048116945090915085168314156124b55760009350505050610e5f565b80544363ffffffff908116911614156124ef578054600160401b600160a01b031916600160401b6001600160601b038716021781556125af565b805467ffffffff000000001916600160201b4363ffffffff9081168281029390931784556001600160a01b038a16600090815260026020908152604080832060ff8d168452825280832081516060810183529687528683018481526001600160601b038d81169389019384528254600181018455928652939094209651960180549351915196851667ffffffffffffffff1990941693909317931690930291909117600160401b600160a01b031916600160401b93909216929092021790555b505b6040805160ff871681526001600160601b03861660208201526001600160a01b038816917f2a539b406fea8ccdda7269c7a03c71f11636b75ff181f9ce2b19734fdf48f072910160405180910390a261260a8285612bdb565b9695505050505050565b60ff821660009081526001602081905260408220805491839190612638908461357c565b815481106126485761264861351a565b90600052602060002001905083600014156126775754600160401b90046001600160601b031691506105cd9050565b805460009061269690600160401b90046001600160601b031686612bf3565b82549091504363ffffffff908116911614156126d3578154600160401b600160a01b031916600160401b6001600160601b03831602178255612785565b815463ffffffff438116600160201b81810267ffffffff000000001990941693909317855560ff8916600090815260016020818152604080842081516060810183529586528583018581526001600160601b03808b169388019384528254958601835591865292909420945194909201805491519251909316600160401b02600160401b600160a01b031992861690960267ffffffffffffffff19909116939094169290921792909217169190911790555b95945050505050565b60ff82166000818152602081815260409182902080546bffffffffffffffffffffffff19166001600160601b03861690811790915591519182527f26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf910160405180910390a25050565b600081511161285c5760405162461bcd60e51b8152602060048201526038602482015260008051602061373d83398151915260448201527f3a206e6f20737472617465676965732070726f76696465640000000000000000606482015260840161061d565b805160ff83166000908152600360209081526040909120549061287f83836136a0565b11156128ef5760405162461bcd60e51b8152602060048201526045602482015260008051602061373d83398151915260448201527f3a20657863656564204d41585f5745494748494e475f46554e4354494f4e5f4c60648201526408a9c8ea8960db1b608482015260a40161061d565b60005b82811015612bd45760005b61290782846136a0565b8110156129e8578482815181106129205761292061351a565b6020026020010151600001516001600160a01b0316600360008860ff1660ff168152602001908152602001600020828154811061295f5761295f61351a565b6000918252602090912001546001600160a01b031614156129d65760405162461bcd60e51b815260206004820152603d602482015260008051602061373d83398151915260448201527f3a2063616e6e6f74206164642073616d65207374726174656779203278000000606482015260840161061d565b806129e081613561565b9150506128fd565b5060008482815181106129fd576129fd61351a565b6020026020010151602001516001600160601b031611612a825760405162461bcd60e51b8152602060048201526046602482015260008051602061373d83398151915260448201527f3a2063616e6e6f74206164642073747261746567792077697468207a65726f206064820152651dd95a59da1d60d21b608482015260a40161061d565b60ff851660009081526003602052604090208451859083908110612aa857612aa861351a565b6020908102919091018101518254600181018455600093845292829020815191909201516001600160601b0316600160a01b026001600160a01b0390911617910155835160ff8616907f10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f540490869084908110612b2557612b2561351a565b602090810291909101810151516040516001600160a01b0390911681520160405180910390a28460ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75858381518110612b8257612b8261351a565b602002602001015160000151868481518110612ba057612ba061351a565b602002602001015160200151604051612bba929190612c7c565b60405180910390a280612bcc81613561565b9150506128f2565b5050505050565b6000610e5f6001600160601b038085169084166136b8565b600080821215612c1757612c06826136f7565b612c109084613714565b90506105cd565b612c108284613675565b803560ff81168114612c3257600080fd5b919050565b600060208284031215612c4957600080fd5b610e5f82612c21565b60008060408385031215612c6557600080fd5b612c6e83612c21565b946020939093013593505050565b6001600160a01b039290921682526001600160601b0316602082015260400190565b6001600160a01b0381168114612cb357600080fd5b50565b60008060408385031215612cc957600080fd5b8235612cd481612c9e565b9150612ce260208401612c21565b90509250929050565b60008060408385031215612cfe57600080fd5b612d0783612c21565b91506020830135612d1781612c9e565b809150509250929050565b60008083601f840112612d3457600080fd5b5081356001600160401b03811115612d4b57600080fd5b6020830191508360208260051b8501011115611f1557600080fd5b600080600080600060608688031215612d7e57600080fd5b612d8786612c21565b945060208601356001600160401b0380821115612da357600080fd5b612daf89838a01612d22565b90965094506040880135915080821115612dc857600080fd5b50612dd588828901612d22565b969995985093965092949392505050565b815163ffffffff9081168252602080840151909116908201526040808301516001600160601b031690820152606081016105cd565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612e5357612e53612e1b565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612e8157612e81612e1b565b604052919050565b60006001600160401b03821115612ea257612ea2612e1b565b5060051b60200190565b60008060408385031215612ebf57600080fd5b612ec883612c21565b91506020808401356001600160401b03811115612ee457600080fd5b8401601f81018613612ef557600080fd5b8035612f08612f0382612e89565b612e59565b81815260059190911b82018301908381019088831115612f2757600080fd5b928401925b82841015612f4557833582529284019290840190612f2c565b80955050505050509250929050565b803563ffffffff81168114612c3257600080fd5b60008060008060808587031215612f7e57600080fd5b612f8785612c21565b9350612f9560208601612f54565b92506040850135612fa581612c9e565b9396929550929360600135925050565b600080600060608486031215612fca57600080fd5b8335612fd581612c9e565b9250612fe360208501612c21565b9150612ff160408501612f54565b90509250925092565b60008083601f84011261300c57600080fd5b5081356001600160401b0381111561302357600080fd5b602083019150836020828501011115611f1557600080fd5b60008060006040848603121561305057600080fd5b61305984612f54565b925060208401356001600160401b0381111561307457600080fd5b61308086828701612ffa565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b818110156130cb57835163ffffffff16835292840192918401916001016130a9565b50909695505050505050565b600080600080606085870312156130ed57600080fd5b84356130f881612c9e565b9350602085013561310881612c9e565b925060408501356001600160401b0381111561312357600080fd5b61312f87828801612ffa565b95989497509550505050565b80356001600160601b0381168114612c3257600080fd5b6000806040838503121561316557600080fd5b61316e83612c21565b9150612ce26020840161313b565b600082601f83011261318d57600080fd5b8135602061319d612f0383612e89565b82815260069290921b840181019181810190868411156131bc57600080fd5b8286015b8481101561320b57604081890312156131d95760008081fd5b6131e1612e31565b81356131ec81612c9e565b81526131f982860161313b565b818601528352918301916040016131c0565b509695505050505050565b6000806040838503121561322957600080fd5b61323283612c21565b915060208301356001600160401b0381111561324d57600080fd5b6132598582860161317c565b9150509250929050565b60008060006060848603121561327857600080fd5b61328184612c21565b925061328f60208501612f54565b9150604084013590509250925092565b6000806000606084860312156132b457600080fd5b6132bd84612c21565b925060208401356132cd81612c9e565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b818110156130cb5761333783855163ffffffff808251168352806020830151166020840152506001600160601b0360408201511660408301525050565b92840192606092909201916001016132fa565b600081518084526020808501945080840160005b838110156133835781516001600160601b03168752958201959082019060010161335e565b509495945050505050565b6040815260006133a1604083018561334a565b8281036020840152612785818561334a565b6000806000604084860312156133c857600080fd5b833561305981612c9e565b6000806000606084860312156133e857600080fd5b6133f184612c21565b92506133ff6020850161313b565b915060408401356001600160401b0381111561341a57600080fd5b6134268682870161317c565b9150509250925092565b60208082526031908201527f5374616b6552656769737472792e71756f72756d4578697374733a2071756f726040820152701d5b48191bd95cc81b9bdd08195e1a5cdd607a1b606082015260800190565b60006020828403121561349357600080fd5b8151610e5f81612c9e565b60208082526056908201527f5374616b6552656769737472792e6f6e6c79436f6f7264696e61746f724f776e60408201527f65723a2063616c6c6572206973206e6f7420746865206f776e6572206f6620746060820152753432903932b3b4b9ba393ca1b7b7b93234b730ba37b960511b608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561354257600080fd5b610e5f8261313b565b634e487b7160e01b600052601160045260246000fd5b60006000198214156135755761357561354b565b5060010190565b60008282101561358e5761358e61354b565b500390565b634e487b7160e01b600052603160045260246000fd5b6020808252604c908201527f5374616b6552656769737472792e6f6e6c795265676973747279436f6f72646960408201527f6e61746f723a2063616c6c6572206973206e6f7420746865205265676973747260608201526b3ca1b7b7b93234b730ba37b960a11b608082015260a00190565b60006020828403121561362d57600080fd5b5051919050565b600081600019048311821515161561364e5761364e61354b565b500290565b60008261367057634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160601b038083168185168083038211156136975761369761354b565b01949350505050565b600082198211156136b3576136b361354b565b500190565b60008083128015600160ff1b8501841216156136d6576136d661354b565b6001600160ff1b03840183138116156136f1576136f161354b565b50500390565b6000600160ff1b82141561370d5761370d61354b565b5060000390565b60006001600160601b03838116908316818110156137345761373461354b565b03939250505056fe5374616b6552656769737472792e5f6164645374726174656779506172616d73a26469706673582212206efaea4245f01e6817252510eb4f12ff24a9221631bdda112728c55af6432d4464736f6c634300080c0033",
}

// ContractECDSAStakeRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractECDSAStakeRegistryMetaData.ABI instead.
var ContractECDSAStakeRegistryABI = ContractECDSAStakeRegistryMetaData.ABI

// ContractECDSAStakeRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractECDSAStakeRegistryMetaData.Bin instead.
var ContractECDSAStakeRegistryBin = ContractECDSAStakeRegistryMetaData.Bin

// DeployContractECDSAStakeRegistry deploys a new Ethereum contract, binding an instance of ContractECDSAStakeRegistry to it.
func DeployContractECDSAStakeRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, _registryCoordinator common.Address, _delegationManager common.Address) (common.Address, *types.Transaction, *ContractECDSAStakeRegistry, error) {
	parsed, err := ContractECDSAStakeRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractECDSAStakeRegistryBin), backend, _registryCoordinator, _delegationManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractECDSAStakeRegistry{ContractECDSAStakeRegistryCaller: ContractECDSAStakeRegistryCaller{contract: contract}, ContractECDSAStakeRegistryTransactor: ContractECDSAStakeRegistryTransactor{contract: contract}, ContractECDSAStakeRegistryFilterer: ContractECDSAStakeRegistryFilterer{contract: contract}}, nil
}

// ContractECDSAStakeRegistryMethods is an auto generated interface around an Ethereum contract.
type ContractECDSAStakeRegistryMethods interface {
	ContractECDSAStakeRegistryCalls
	ContractECDSAStakeRegistryTransacts
	ContractECDSAStakeRegistryFilters
}

// ContractECDSAStakeRegistryCalls is an auto generated interface that defines the call methods available for an Ethereum contract.
type ContractECDSAStakeRegistryCalls interface {
	MAXWEIGHINGFUNCTIONLENGTH(opts *bind.CallOpts) (uint8, error)

	WEIGHTINGDIVISOR(opts *bind.CallOpts) (*big.Int, error)

	Delegation(opts *bind.CallOpts) (common.Address, error)

	GetCurrentStake(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8) (*big.Int, error)

	GetCurrentTotalStake(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error)

	GetLatestStakeUpdate(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8) (ECDSAStakeRegistryStakeUpdate, error)

	GetStakeAtBlockNumber(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8, blockNumber uint32) (*big.Int, error)

	GetStakeAtBlockNumberAndIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, operatorId common.Address, index *big.Int) (*big.Int, error)

	GetStakeHistory(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8) ([]ECDSAStakeRegistryStakeUpdate, error)

	GetStakeHistoryLength(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8) (*big.Int, error)

	GetStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, operatorId common.Address, index *big.Int) (ECDSAStakeRegistryStakeUpdate, error)

	GetStakeUpdateIndexAtBlockNumber(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8, blockNumber uint32) (uint32, error)

	GetTotalStakeAtBlockNumberFromIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error)

	GetTotalStakeHistoryLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error)

	GetTotalStakeIndicesAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, quorumNumbers []byte) ([]uint32, error)

	GetTotalStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (ECDSAStakeRegistryStakeUpdate, error)

	MinimumStakeForQuorum(opts *bind.CallOpts, arg0 uint8) (*big.Int, error)

	RegistryCoordinator(opts *bind.CallOpts) (common.Address, error)

	StrategyParams(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (struct {
		Strategy   common.Address
		Multiplier *big.Int
	}, error)

	StrategyParamsByIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (ECDSAStakeRegistryStrategyParams, error)

	StrategyParamsLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error)

	WeightOfOperatorForQuorum(opts *bind.CallOpts, quorumNumber uint8, operator common.Address) (*big.Int, error)
}

// ContractECDSAStakeRegistryTransacts is an auto generated interface that defines the transact methods available for an Ethereum contract.
type ContractECDSAStakeRegistryTransacts interface {
	AddStrategies(opts *bind.TransactOpts, quorumNumber uint8, _strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error)

	DeregisterOperator(opts *bind.TransactOpts, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error)

	InitializeQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int, _strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error)

	ModifyStrategyParams(opts *bind.TransactOpts, quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error)

	RegisterOperator(opts *bind.TransactOpts, operator common.Address, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error)

	RemoveStrategies(opts *bind.TransactOpts, quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error)

	SetMinimumStakeForQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error)

	UpdateOperatorStake(opts *bind.TransactOpts, operator common.Address, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error)
}

// ContractECDSAStakeRegistryFilterer is an auto generated interface that defines the log filtering methods available for an Ethereum contract.
type ContractECDSAStakeRegistryFilters interface {
	FilterMinimumStakeForQuorumUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryMinimumStakeForQuorumUpdatedIterator, error)
	WatchMinimumStakeForQuorumUpdated(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated, quorumNumber []uint8) (event.Subscription, error)
	ParseMinimumStakeForQuorumUpdated(log types.Log) (*ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated, error)

	FilterOperatorStakeUpdate(opts *bind.FilterOpts, operatorId []common.Address) (*ContractECDSAStakeRegistryOperatorStakeUpdateIterator, error)
	WatchOperatorStakeUpdate(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryOperatorStakeUpdate, operatorId []common.Address) (event.Subscription, error)
	ParseOperatorStakeUpdate(log types.Log) (*ContractECDSAStakeRegistryOperatorStakeUpdate, error)

	FilterQuorumCreated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryQuorumCreatedIterator, error)
	WatchQuorumCreated(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryQuorumCreated, quorumNumber []uint8) (event.Subscription, error)
	ParseQuorumCreated(log types.Log) (*ContractECDSAStakeRegistryQuorumCreated, error)

	FilterStrategyAddedToQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryStrategyAddedToQuorumIterator, error)
	WatchStrategyAddedToQuorum(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryStrategyAddedToQuorum, quorumNumber []uint8) (event.Subscription, error)
	ParseStrategyAddedToQuorum(log types.Log) (*ContractECDSAStakeRegistryStrategyAddedToQuorum, error)

	FilterStrategyMultiplierUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryStrategyMultiplierUpdatedIterator, error)
	WatchStrategyMultiplierUpdated(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryStrategyMultiplierUpdated, quorumNumber []uint8) (event.Subscription, error)
	ParseStrategyMultiplierUpdated(log types.Log) (*ContractECDSAStakeRegistryStrategyMultiplierUpdated, error)

	FilterStrategyRemovedFromQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryStrategyRemovedFromQuorumIterator, error)
	WatchStrategyRemovedFromQuorum(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryStrategyRemovedFromQuorum, quorumNumber []uint8) (event.Subscription, error)
	ParseStrategyRemovedFromQuorum(log types.Log) (*ContractECDSAStakeRegistryStrategyRemovedFromQuorum, error)
}

// ContractECDSAStakeRegistry is an auto generated Go binding around an Ethereum contract.
type ContractECDSAStakeRegistry struct {
	ContractECDSAStakeRegistryCaller     // Read-only binding to the contract
	ContractECDSAStakeRegistryTransactor // Write-only binding to the contract
	ContractECDSAStakeRegistryFilterer   // Log filterer for contract events
}

// ContractECDSAStakeRegistry implements the ContractECDSAStakeRegistryMethods interface.
var _ ContractECDSAStakeRegistryMethods = (*ContractECDSAStakeRegistry)(nil)

// ContractECDSAStakeRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractECDSAStakeRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractECDSAStakeRegistryCaller implements the ContractECDSAStakeRegistryCalls interface.
var _ ContractECDSAStakeRegistryCalls = (*ContractECDSAStakeRegistryCaller)(nil)

// ContractECDSAStakeRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractECDSAStakeRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractECDSAStakeRegistryTransactor implements the ContractECDSAStakeRegistryTransacts interface.
var _ ContractECDSAStakeRegistryTransacts = (*ContractECDSAStakeRegistryTransactor)(nil)

// ContractECDSAStakeRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractECDSAStakeRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractECDSAStakeRegistryFilterer implements the ContractECDSAStakeRegistryFilters interface.
var _ ContractECDSAStakeRegistryFilters = (*ContractECDSAStakeRegistryFilterer)(nil)

// ContractECDSAStakeRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractECDSAStakeRegistrySession struct {
	Contract     *ContractECDSAStakeRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ContractECDSAStakeRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractECDSAStakeRegistryCallerSession struct {
	Contract *ContractECDSAStakeRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// ContractECDSAStakeRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractECDSAStakeRegistryTransactorSession struct {
	Contract     *ContractECDSAStakeRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// ContractECDSAStakeRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractECDSAStakeRegistryRaw struct {
	Contract *ContractECDSAStakeRegistry // Generic contract binding to access the raw methods on
}

// ContractECDSAStakeRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractECDSAStakeRegistryCallerRaw struct {
	Contract *ContractECDSAStakeRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// ContractECDSAStakeRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractECDSAStakeRegistryTransactorRaw struct {
	Contract *ContractECDSAStakeRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractECDSAStakeRegistry creates a new instance of ContractECDSAStakeRegistry, bound to a specific deployed contract.
func NewContractECDSAStakeRegistry(address common.Address, backend bind.ContractBackend) (*ContractECDSAStakeRegistry, error) {
	contract, err := bindContractECDSAStakeRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistry{ContractECDSAStakeRegistryCaller: ContractECDSAStakeRegistryCaller{contract: contract}, ContractECDSAStakeRegistryTransactor: ContractECDSAStakeRegistryTransactor{contract: contract}, ContractECDSAStakeRegistryFilterer: ContractECDSAStakeRegistryFilterer{contract: contract}}, nil
}

// NewContractECDSAStakeRegistryCaller creates a new read-only instance of ContractECDSAStakeRegistry, bound to a specific deployed contract.
func NewContractECDSAStakeRegistryCaller(address common.Address, caller bind.ContractCaller) (*ContractECDSAStakeRegistryCaller, error) {
	contract, err := bindContractECDSAStakeRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistryCaller{contract: contract}, nil
}

// NewContractECDSAStakeRegistryTransactor creates a new write-only instance of ContractECDSAStakeRegistry, bound to a specific deployed contract.
func NewContractECDSAStakeRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractECDSAStakeRegistryTransactor, error) {
	contract, err := bindContractECDSAStakeRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistryTransactor{contract: contract}, nil
}

// NewContractECDSAStakeRegistryFilterer creates a new log filterer instance of ContractECDSAStakeRegistry, bound to a specific deployed contract.
func NewContractECDSAStakeRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractECDSAStakeRegistryFilterer, error) {
	contract, err := bindContractECDSAStakeRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistryFilterer{contract: contract}, nil
}

// bindContractECDSAStakeRegistry binds a generic wrapper to an already deployed contract.
func bindContractECDSAStakeRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractECDSAStakeRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractECDSAStakeRegistry.Contract.ContractECDSAStakeRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.ContractECDSAStakeRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.ContractECDSAStakeRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractECDSAStakeRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.contract.Transact(opts, method, params...)
}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) MAXWEIGHINGFUNCTIONLENGTH(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "MAX_WEIGHING_FUNCTION_LENGTH")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) MAXWEIGHINGFUNCTIONLENGTH() (uint8, error) {
	return _ContractECDSAStakeRegistry.Contract.MAXWEIGHINGFUNCTIONLENGTH(&_ContractECDSAStakeRegistry.CallOpts)
}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) MAXWEIGHINGFUNCTIONLENGTH() (uint8, error) {
	return _ContractECDSAStakeRegistry.Contract.MAXWEIGHINGFUNCTIONLENGTH(&_ContractECDSAStakeRegistry.CallOpts)
}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) WEIGHTINGDIVISOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "WEIGHTING_DIVISOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) WEIGHTINGDIVISOR() (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.WEIGHTINGDIVISOR(&_ContractECDSAStakeRegistry.CallOpts)
}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) WEIGHTINGDIVISOR() (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.WEIGHTINGDIVISOR(&_ContractECDSAStakeRegistry.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) Delegation() (common.Address, error) {
	return _ContractECDSAStakeRegistry.Contract.Delegation(&_ContractECDSAStakeRegistry.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) Delegation() (common.Address, error) {
	return _ContractECDSAStakeRegistry.Contract.Delegation(&_ContractECDSAStakeRegistry.CallOpts)
}

// GetCurrentStake is a free data retrieval call binding the contract method 0x197cfc6e.
//
// Solidity: function getCurrentStake(address operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetCurrentStake(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getCurrentStake", operatorId, quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentStake is a free data retrieval call binding the contract method 0x197cfc6e.
//
// Solidity: function getCurrentStake(address operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetCurrentStake(operatorId common.Address, quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetCurrentStake(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetCurrentStake is a free data retrieval call binding the contract method 0x197cfc6e.
//
// Solidity: function getCurrentStake(address operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetCurrentStake(operatorId common.Address, quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetCurrentStake(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetCurrentTotalStake is a free data retrieval call binding the contract method 0xd5eccc05.
//
// Solidity: function getCurrentTotalStake(uint8 quorumNumber) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetCurrentTotalStake(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getCurrentTotalStake", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentTotalStake is a free data retrieval call binding the contract method 0xd5eccc05.
//
// Solidity: function getCurrentTotalStake(uint8 quorumNumber) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetCurrentTotalStake(quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetCurrentTotalStake(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber)
}

// GetCurrentTotalStake is a free data retrieval call binding the contract method 0xd5eccc05.
//
// Solidity: function getCurrentTotalStake(uint8 quorumNumber) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetCurrentTotalStake(quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetCurrentTotalStake(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber)
}

// GetLatestStakeUpdate is a free data retrieval call binding the contract method 0x300ad369.
//
// Solidity: function getLatestStakeUpdate(address operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetLatestStakeUpdate(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8) (ECDSAStakeRegistryStakeUpdate, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getLatestStakeUpdate", operatorId, quorumNumber)

	if err != nil {
		return *new(ECDSAStakeRegistryStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(ECDSAStakeRegistryStakeUpdate)).(*ECDSAStakeRegistryStakeUpdate)

	return out0, err

}

// GetLatestStakeUpdate is a free data retrieval call binding the contract method 0x300ad369.
//
// Solidity: function getLatestStakeUpdate(address operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetLatestStakeUpdate(operatorId common.Address, quorumNumber uint8) (ECDSAStakeRegistryStakeUpdate, error) {
	return _ContractECDSAStakeRegistry.Contract.GetLatestStakeUpdate(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetLatestStakeUpdate is a free data retrieval call binding the contract method 0x300ad369.
//
// Solidity: function getLatestStakeUpdate(address operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetLatestStakeUpdate(operatorId common.Address, quorumNumber uint8) (ECDSAStakeRegistryStakeUpdate, error) {
	return _ContractECDSAStakeRegistry.Contract.GetLatestStakeUpdate(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeAtBlockNumber is a free data retrieval call binding the contract method 0x7a64b516.
//
// Solidity: function getStakeAtBlockNumber(address operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetStakeAtBlockNumber(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getStakeAtBlockNumber", operatorId, quorumNumber, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeAtBlockNumber is a free data retrieval call binding the contract method 0x7a64b516.
//
// Solidity: function getStakeAtBlockNumber(address operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetStakeAtBlockNumber(operatorId common.Address, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeAtBlockNumber(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeAtBlockNumber is a free data retrieval call binding the contract method 0x7a64b516.
//
// Solidity: function getStakeAtBlockNumber(address operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetStakeAtBlockNumber(operatorId common.Address, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeAtBlockNumber(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeAtBlockNumberAndIndex is a free data retrieval call binding the contract method 0x63efdb3e.
//
// Solidity: function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, address operatorId, uint256 index) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetStakeAtBlockNumberAndIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, operatorId common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getStakeAtBlockNumberAndIndex", quorumNumber, blockNumber, operatorId, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeAtBlockNumberAndIndex is a free data retrieval call binding the contract method 0x63efdb3e.
//
// Solidity: function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, address operatorId, uint256 index) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetStakeAtBlockNumberAndIndex(quorumNumber uint8, blockNumber uint32, operatorId common.Address, index *big.Int) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeAtBlockNumberAndIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, blockNumber, operatorId, index)
}

// GetStakeAtBlockNumberAndIndex is a free data retrieval call binding the contract method 0x63efdb3e.
//
// Solidity: function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, address operatorId, uint256 index) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetStakeAtBlockNumberAndIndex(quorumNumber uint8, blockNumber uint32, operatorId common.Address, index *big.Int) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeAtBlockNumberAndIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, blockNumber, operatorId, index)
}

// GetStakeHistory is a free data retrieval call binding the contract method 0xea595ab1.
//
// Solidity: function getStakeHistory(address operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetStakeHistory(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8) ([]ECDSAStakeRegistryStakeUpdate, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getStakeHistory", operatorId, quorumNumber)

	if err != nil {
		return *new([]ECDSAStakeRegistryStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new([]ECDSAStakeRegistryStakeUpdate)).(*[]ECDSAStakeRegistryStakeUpdate)

	return out0, err

}

// GetStakeHistory is a free data retrieval call binding the contract method 0xea595ab1.
//
// Solidity: function getStakeHistory(address operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetStakeHistory(operatorId common.Address, quorumNumber uint8) ([]ECDSAStakeRegistryStakeUpdate, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeHistory(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeHistory is a free data retrieval call binding the contract method 0xea595ab1.
//
// Solidity: function getStakeHistory(address operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetStakeHistory(operatorId common.Address, quorumNumber uint8) ([]ECDSAStakeRegistryStakeUpdate, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeHistory(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeHistoryLength is a free data retrieval call binding the contract method 0x12e7c5f9.
//
// Solidity: function getStakeHistoryLength(address operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetStakeHistoryLength(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getStakeHistoryLength", operatorId, quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeHistoryLength is a free data retrieval call binding the contract method 0x12e7c5f9.
//
// Solidity: function getStakeHistoryLength(address operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetStakeHistoryLength(operatorId common.Address, quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeHistoryLength(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeHistoryLength is a free data retrieval call binding the contract method 0x12e7c5f9.
//
// Solidity: function getStakeHistoryLength(address operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetStakeHistoryLength(operatorId common.Address, quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeHistoryLength(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xcdb57ae4.
//
// Solidity: function getStakeUpdateAtIndex(uint8 quorumNumber, address operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, operatorId common.Address, index *big.Int) (ECDSAStakeRegistryStakeUpdate, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getStakeUpdateAtIndex", quorumNumber, operatorId, index)

	if err != nil {
		return *new(ECDSAStakeRegistryStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(ECDSAStakeRegistryStakeUpdate)).(*ECDSAStakeRegistryStakeUpdate)

	return out0, err

}

// GetStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xcdb57ae4.
//
// Solidity: function getStakeUpdateAtIndex(uint8 quorumNumber, address operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetStakeUpdateAtIndex(quorumNumber uint8, operatorId common.Address, index *big.Int) (ECDSAStakeRegistryStakeUpdate, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeUpdateAtIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, operatorId, index)
}

// GetStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xcdb57ae4.
//
// Solidity: function getStakeUpdateAtIndex(uint8 quorumNumber, address operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetStakeUpdateAtIndex(quorumNumber uint8, operatorId common.Address, index *big.Int) (ECDSAStakeRegistryStakeUpdate, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeUpdateAtIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, operatorId, index)
}

// GetStakeUpdateIndexAtBlockNumber is a free data retrieval call binding the contract method 0x65f10aff.
//
// Solidity: function getStakeUpdateIndexAtBlockNumber(address operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetStakeUpdateIndexAtBlockNumber(opts *bind.CallOpts, operatorId common.Address, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getStakeUpdateIndexAtBlockNumber", operatorId, quorumNumber, blockNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetStakeUpdateIndexAtBlockNumber is a free data retrieval call binding the contract method 0x65f10aff.
//
// Solidity: function getStakeUpdateIndexAtBlockNumber(address operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetStakeUpdateIndexAtBlockNumber(operatorId common.Address, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeUpdateIndexAtBlockNumber(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeUpdateIndexAtBlockNumber is a free data retrieval call binding the contract method 0x65f10aff.
//
// Solidity: function getStakeUpdateIndexAtBlockNumber(address operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetStakeUpdateIndexAtBlockNumber(operatorId common.Address, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	return _ContractECDSAStakeRegistry.Contract.GetStakeUpdateIndexAtBlockNumber(&_ContractECDSAStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetTotalStakeAtBlockNumberFromIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getTotalStakeAtBlockNumberFromIndex", quorumNumber, blockNumber, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetTotalStakeAtBlockNumberFromIndex(quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetTotalStakeAtBlockNumberFromIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, blockNumber, index)
}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetTotalStakeAtBlockNumberFromIndex(quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetTotalStakeAtBlockNumberFromIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, blockNumber, index)
}

// GetTotalStakeHistoryLength is a free data retrieval call binding the contract method 0x0491b41c.
//
// Solidity: function getTotalStakeHistoryLength(uint8 quorumNumber) view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetTotalStakeHistoryLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getTotalStakeHistoryLength", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakeHistoryLength is a free data retrieval call binding the contract method 0x0491b41c.
//
// Solidity: function getTotalStakeHistoryLength(uint8 quorumNumber) view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetTotalStakeHistoryLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetTotalStakeHistoryLength(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber)
}

// GetTotalStakeHistoryLength is a free data retrieval call binding the contract method 0x0491b41c.
//
// Solidity: function getTotalStakeHistoryLength(uint8 quorumNumber) view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetTotalStakeHistoryLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.GetTotalStakeHistoryLength(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber)
}

// GetTotalStakeIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x81c07502.
//
// Solidity: function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetTotalStakeIndicesAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getTotalStakeIndicesAtBlockNumber", blockNumber, quorumNumbers)

	if err != nil {
		return *new([]uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint32)).(*[]uint32)

	return out0, err

}

// GetTotalStakeIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x81c07502.
//
// Solidity: function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetTotalStakeIndicesAtBlockNumber(blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	return _ContractECDSAStakeRegistry.Contract.GetTotalStakeIndicesAtBlockNumber(&_ContractECDSAStakeRegistry.CallOpts, blockNumber, quorumNumbers)
}

// GetTotalStakeIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x81c07502.
//
// Solidity: function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetTotalStakeIndicesAtBlockNumber(blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	return _ContractECDSAStakeRegistry.Contract.GetTotalStakeIndicesAtBlockNumber(&_ContractECDSAStakeRegistry.CallOpts, blockNumber, quorumNumbers)
}

// GetTotalStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xb6904b78.
//
// Solidity: function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) GetTotalStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (ECDSAStakeRegistryStakeUpdate, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "getTotalStakeUpdateAtIndex", quorumNumber, index)

	if err != nil {
		return *new(ECDSAStakeRegistryStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(ECDSAStakeRegistryStakeUpdate)).(*ECDSAStakeRegistryStakeUpdate)

	return out0, err

}

// GetTotalStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xb6904b78.
//
// Solidity: function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) GetTotalStakeUpdateAtIndex(quorumNumber uint8, index *big.Int) (ECDSAStakeRegistryStakeUpdate, error) {
	return _ContractECDSAStakeRegistry.Contract.GetTotalStakeUpdateAtIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, index)
}

// GetTotalStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xb6904b78.
//
// Solidity: function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) GetTotalStakeUpdateAtIndex(quorumNumber uint8, index *big.Int) (ECDSAStakeRegistryStakeUpdate, error) {
	return _ContractECDSAStakeRegistry.Contract.GetTotalStakeUpdateAtIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, index)
}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0xc46778a5.
//
// Solidity: function minimumStakeForQuorum(uint8 ) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) MinimumStakeForQuorum(opts *bind.CallOpts, arg0 uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "minimumStakeForQuorum", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0xc46778a5.
//
// Solidity: function minimumStakeForQuorum(uint8 ) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) MinimumStakeForQuorum(arg0 uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.MinimumStakeForQuorum(&_ContractECDSAStakeRegistry.CallOpts, arg0)
}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0xc46778a5.
//
// Solidity: function minimumStakeForQuorum(uint8 ) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) MinimumStakeForQuorum(arg0 uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.MinimumStakeForQuorum(&_ContractECDSAStakeRegistry.CallOpts, arg0)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) RegistryCoordinator() (common.Address, error) {
	return _ContractECDSAStakeRegistry.Contract.RegistryCoordinator(&_ContractECDSAStakeRegistry.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractECDSAStakeRegistry.Contract.RegistryCoordinator(&_ContractECDSAStakeRegistry.CallOpts)
}

// StrategyParams is a free data retrieval call binding the contract method 0x08732461.
//
// Solidity: function strategyParams(uint8 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) StrategyParams(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "strategyParams", arg0, arg1)

	outstruct := new(struct {
		Strategy   common.Address
		Multiplier *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Strategy = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Multiplier = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// StrategyParams is a free data retrieval call binding the contract method 0x08732461.
//
// Solidity: function strategyParams(uint8 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) StrategyParams(arg0 uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _ContractECDSAStakeRegistry.Contract.StrategyParams(&_ContractECDSAStakeRegistry.CallOpts, arg0, arg1)
}

// StrategyParams is a free data retrieval call binding the contract method 0x08732461.
//
// Solidity: function strategyParams(uint8 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) StrategyParams(arg0 uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _ContractECDSAStakeRegistry.Contract.StrategyParams(&_ContractECDSAStakeRegistry.CallOpts, arg0, arg1)
}

// StrategyParamsByIndex is a free data retrieval call binding the contract method 0xadc804da.
//
// Solidity: function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) StrategyParamsByIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (ECDSAStakeRegistryStrategyParams, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "strategyParamsByIndex", quorumNumber, index)

	if err != nil {
		return *new(ECDSAStakeRegistryStrategyParams), err
	}

	out0 := *abi.ConvertType(out[0], new(ECDSAStakeRegistryStrategyParams)).(*ECDSAStakeRegistryStrategyParams)

	return out0, err

}

// StrategyParamsByIndex is a free data retrieval call binding the contract method 0xadc804da.
//
// Solidity: function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) StrategyParamsByIndex(quorumNumber uint8, index *big.Int) (ECDSAStakeRegistryStrategyParams, error) {
	return _ContractECDSAStakeRegistry.Contract.StrategyParamsByIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, index)
}

// StrategyParamsByIndex is a free data retrieval call binding the contract method 0xadc804da.
//
// Solidity: function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) StrategyParamsByIndex(quorumNumber uint8, index *big.Int) (ECDSAStakeRegistryStrategyParams, error) {
	return _ContractECDSAStakeRegistry.Contract.StrategyParamsByIndex(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, index)
}

// StrategyParamsLength is a free data retrieval call binding the contract method 0x3ca5a5f5.
//
// Solidity: function strategyParamsLength(uint8 quorumNumber) view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) StrategyParamsLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "strategyParamsLength", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StrategyParamsLength is a free data retrieval call binding the contract method 0x3ca5a5f5.
//
// Solidity: function strategyParamsLength(uint8 quorumNumber) view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) StrategyParamsLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.StrategyParamsLength(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber)
}

// StrategyParamsLength is a free data retrieval call binding the contract method 0x3ca5a5f5.
//
// Solidity: function strategyParamsLength(uint8 quorumNumber) view returns(uint256)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) StrategyParamsLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.StrategyParamsLength(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber)
}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCaller) WeightOfOperatorForQuorum(opts *bind.CallOpts, quorumNumber uint8, operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSAStakeRegistry.contract.Call(opts, &out, "weightOfOperatorForQuorum", quorumNumber, operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) WeightOfOperatorForQuorum(quorumNumber uint8, operator common.Address) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.WeightOfOperatorForQuorum(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, operator)
}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryCallerSession) WeightOfOperatorForQuorum(quorumNumber uint8, operator common.Address) (*big.Int, error) {
	return _ContractECDSAStakeRegistry.Contract.WeightOfOperatorForQuorum(&_ContractECDSAStakeRegistry.CallOpts, quorumNumber, operator)
}

// AddStrategies is a paid mutator transaction binding the contract method 0xc601527d.
//
// Solidity: function addStrategies(uint8 quorumNumber, (address,uint96)[] _strategyParams) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactor) AddStrategies(opts *bind.TransactOpts, quorumNumber uint8, _strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.contract.Transact(opts, "addStrategies", quorumNumber, _strategyParams)
}

// AddStrategies is a paid mutator transaction binding the contract method 0xc601527d.
//
// Solidity: function addStrategies(uint8 quorumNumber, (address,uint96)[] _strategyParams) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) AddStrategies(quorumNumber uint8, _strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.AddStrategies(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, _strategyParams)
}

// AddStrategies is a paid mutator transaction binding the contract method 0xc601527d.
//
// Solidity: function addStrategies(uint8 quorumNumber, (address,uint96)[] _strategyParams) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorSession) AddStrategies(quorumNumber uint8, _strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.AddStrategies(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, _strategyParams)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xf4e24fe5.
//
// Solidity: function deregisterOperator(address operatorId, bytes quorumNumbers) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactor) DeregisterOperator(opts *bind.TransactOpts, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.contract.Transact(opts, "deregisterOperator", operatorId, quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xf4e24fe5.
//
// Solidity: function deregisterOperator(address operatorId, bytes quorumNumbers) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) DeregisterOperator(operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.DeregisterOperator(&_ContractECDSAStakeRegistry.TransactOpts, operatorId, quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xf4e24fe5.
//
// Solidity: function deregisterOperator(address operatorId, bytes quorumNumbers) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorSession) DeregisterOperator(operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.DeregisterOperator(&_ContractECDSAStakeRegistry.TransactOpts, operatorId, quorumNumbers)
}

// InitializeQuorum is a paid mutator transaction binding the contract method 0xff694a77.
//
// Solidity: function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, (address,uint96)[] _strategyParams) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactor) InitializeQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int, _strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.contract.Transact(opts, "initializeQuorum", quorumNumber, minimumStake, _strategyParams)
}

// InitializeQuorum is a paid mutator transaction binding the contract method 0xff694a77.
//
// Solidity: function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, (address,uint96)[] _strategyParams) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) InitializeQuorum(quorumNumber uint8, minimumStake *big.Int, _strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.InitializeQuorum(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, minimumStake, _strategyParams)
}

// InitializeQuorum is a paid mutator transaction binding the contract method 0xff694a77.
//
// Solidity: function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, (address,uint96)[] _strategyParams) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorSession) InitializeQuorum(quorumNumber uint8, minimumStake *big.Int, _strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.InitializeQuorum(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, minimumStake, _strategyParams)
}

// ModifyStrategyParams is a paid mutator transaction binding the contract method 0x20b66298.
//
// Solidity: function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactor) ModifyStrategyParams(opts *bind.TransactOpts, quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.contract.Transact(opts, "modifyStrategyParams", quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyParams is a paid mutator transaction binding the contract method 0x20b66298.
//
// Solidity: function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) ModifyStrategyParams(quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.ModifyStrategyParams(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyParams is a paid mutator transaction binding the contract method 0x20b66298.
//
// Solidity: function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorSession) ModifyStrategyParams(quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.ModifyStrategyParams(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0xf0391e5a.
//
// Solidity: function registerOperator(address operator, address operatorId, bytes quorumNumbers) returns(uint96[], uint96[])
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactor) RegisterOperator(opts *bind.TransactOpts, operator common.Address, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.contract.Transact(opts, "registerOperator", operator, operatorId, quorumNumbers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0xf0391e5a.
//
// Solidity: function registerOperator(address operator, address operatorId, bytes quorumNumbers) returns(uint96[], uint96[])
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) RegisterOperator(operator common.Address, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.RegisterOperator(&_ContractECDSAStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0xf0391e5a.
//
// Solidity: function registerOperator(address operator, address operatorId, bytes quorumNumbers) returns(uint96[], uint96[])
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorSession) RegisterOperator(operator common.Address, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.RegisterOperator(&_ContractECDSAStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// RemoveStrategies is a paid mutator transaction binding the contract method 0x5f1f2d77.
//
// Solidity: function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactor) RemoveStrategies(opts *bind.TransactOpts, quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.contract.Transact(opts, "removeStrategies", quorumNumber, indicesToRemove)
}

// RemoveStrategies is a paid mutator transaction binding the contract method 0x5f1f2d77.
//
// Solidity: function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) RemoveStrategies(quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.RemoveStrategies(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, indicesToRemove)
}

// RemoveStrategies is a paid mutator transaction binding the contract method 0x5f1f2d77.
//
// Solidity: function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorSession) RemoveStrategies(quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.RemoveStrategies(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, indicesToRemove)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactor) SetMinimumStakeForQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.contract.Transact(opts, "setMinimumStakeForQuorum", quorumNumber, minimumStake)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) SetMinimumStakeForQuorum(quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.SetMinimumStakeForQuorum(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, minimumStake)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorSession) SetMinimumStakeForQuorum(quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.SetMinimumStakeForQuorum(&_ContractECDSAStakeRegistry.TransactOpts, quorumNumber, minimumStake)
}

// UpdateOperatorStake is a paid mutator transaction binding the contract method 0x837bb82e.
//
// Solidity: function updateOperatorStake(address operator, address operatorId, bytes quorumNumbers) returns(uint192)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactor) UpdateOperatorStake(opts *bind.TransactOpts, operator common.Address, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.contract.Transact(opts, "updateOperatorStake", operator, operatorId, quorumNumbers)
}

// UpdateOperatorStake is a paid mutator transaction binding the contract method 0x837bb82e.
//
// Solidity: function updateOperatorStake(address operator, address operatorId, bytes quorumNumbers) returns(uint192)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistrySession) UpdateOperatorStake(operator common.Address, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.UpdateOperatorStake(&_ContractECDSAStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// UpdateOperatorStake is a paid mutator transaction binding the contract method 0x837bb82e.
//
// Solidity: function updateOperatorStake(address operator, address operatorId, bytes quorumNumbers) returns(uint192)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryTransactorSession) UpdateOperatorStake(operator common.Address, operatorId common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSAStakeRegistry.Contract.UpdateOperatorStake(&_ContractECDSAStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// ContractECDSAStakeRegistryMinimumStakeForQuorumUpdatedIterator is returned from FilterMinimumStakeForQuorumUpdated and is used to iterate over the raw logs and unpacked data for MinimumStakeForQuorumUpdated events raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryMinimumStakeForQuorumUpdatedIterator struct {
	Event *ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSAStakeRegistryMinimumStakeForQuorumUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSAStakeRegistryMinimumStakeForQuorumUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSAStakeRegistryMinimumStakeForQuorumUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated represents a MinimumStakeForQuorumUpdated event raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated struct {
	QuorumNumber uint8
	MinimumStake *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMinimumStakeForQuorumUpdated is a free log retrieval operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) FilterMinimumStakeForQuorumUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryMinimumStakeForQuorumUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.FilterLogs(opts, "MinimumStakeForQuorumUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistryMinimumStakeForQuorumUpdatedIterator{contract: _ContractECDSAStakeRegistry.contract, event: "MinimumStakeForQuorumUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumStakeForQuorumUpdated is a free log subscription operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) WatchMinimumStakeForQuorumUpdated(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.WatchLogs(opts, "MinimumStakeForQuorumUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated)
				if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "MinimumStakeForQuorumUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumStakeForQuorumUpdated is a log parse operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) ParseMinimumStakeForQuorumUpdated(log types.Log) (*ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated, error) {
	event := new(ContractECDSAStakeRegistryMinimumStakeForQuorumUpdated)
	if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "MinimumStakeForQuorumUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSAStakeRegistryOperatorStakeUpdateIterator is returned from FilterOperatorStakeUpdate and is used to iterate over the raw logs and unpacked data for OperatorStakeUpdate events raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryOperatorStakeUpdateIterator struct {
	Event *ContractECDSAStakeRegistryOperatorStakeUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSAStakeRegistryOperatorStakeUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSAStakeRegistryOperatorStakeUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSAStakeRegistryOperatorStakeUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSAStakeRegistryOperatorStakeUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSAStakeRegistryOperatorStakeUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSAStakeRegistryOperatorStakeUpdate represents a OperatorStakeUpdate event raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryOperatorStakeUpdate struct {
	OperatorId   common.Address
	QuorumNumber uint8
	Stake        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterOperatorStakeUpdate is a free log retrieval operation binding the contract event 0x2a539b406fea8ccdda7269c7a03c71f11636b75ff181f9ce2b19734fdf48f072.
//
// Solidity: event OperatorStakeUpdate(address indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) FilterOperatorStakeUpdate(opts *bind.FilterOpts, operatorId []common.Address) (*ContractECDSAStakeRegistryOperatorStakeUpdateIterator, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.FilterLogs(opts, "OperatorStakeUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistryOperatorStakeUpdateIterator{contract: _ContractECDSAStakeRegistry.contract, event: "OperatorStakeUpdate", logs: logs, sub: sub}, nil
}

// WatchOperatorStakeUpdate is a free log subscription operation binding the contract event 0x2a539b406fea8ccdda7269c7a03c71f11636b75ff181f9ce2b19734fdf48f072.
//
// Solidity: event OperatorStakeUpdate(address indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) WatchOperatorStakeUpdate(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryOperatorStakeUpdate, operatorId []common.Address) (event.Subscription, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.WatchLogs(opts, "OperatorStakeUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSAStakeRegistryOperatorStakeUpdate)
				if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "OperatorStakeUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorStakeUpdate is a log parse operation binding the contract event 0x2a539b406fea8ccdda7269c7a03c71f11636b75ff181f9ce2b19734fdf48f072.
//
// Solidity: event OperatorStakeUpdate(address indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) ParseOperatorStakeUpdate(log types.Log) (*ContractECDSAStakeRegistryOperatorStakeUpdate, error) {
	event := new(ContractECDSAStakeRegistryOperatorStakeUpdate)
	if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "OperatorStakeUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSAStakeRegistryQuorumCreatedIterator is returned from FilterQuorumCreated and is used to iterate over the raw logs and unpacked data for QuorumCreated events raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryQuorumCreatedIterator struct {
	Event *ContractECDSAStakeRegistryQuorumCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSAStakeRegistryQuorumCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSAStakeRegistryQuorumCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSAStakeRegistryQuorumCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSAStakeRegistryQuorumCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSAStakeRegistryQuorumCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSAStakeRegistryQuorumCreated represents a QuorumCreated event raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryQuorumCreated struct {
	QuorumNumber uint8
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterQuorumCreated is a free log retrieval operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) FilterQuorumCreated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryQuorumCreatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.FilterLogs(opts, "QuorumCreated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistryQuorumCreatedIterator{contract: _ContractECDSAStakeRegistry.contract, event: "QuorumCreated", logs: logs, sub: sub}, nil
}

// WatchQuorumCreated is a free log subscription operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) WatchQuorumCreated(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryQuorumCreated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.WatchLogs(opts, "QuorumCreated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSAStakeRegistryQuorumCreated)
				if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "QuorumCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuorumCreated is a log parse operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) ParseQuorumCreated(log types.Log) (*ContractECDSAStakeRegistryQuorumCreated, error) {
	event := new(ContractECDSAStakeRegistryQuorumCreated)
	if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "QuorumCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSAStakeRegistryStrategyAddedToQuorumIterator is returned from FilterStrategyAddedToQuorum and is used to iterate over the raw logs and unpacked data for StrategyAddedToQuorum events raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryStrategyAddedToQuorumIterator struct {
	Event *ContractECDSAStakeRegistryStrategyAddedToQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSAStakeRegistryStrategyAddedToQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSAStakeRegistryStrategyAddedToQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSAStakeRegistryStrategyAddedToQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSAStakeRegistryStrategyAddedToQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSAStakeRegistryStrategyAddedToQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSAStakeRegistryStrategyAddedToQuorum represents a StrategyAddedToQuorum event raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryStrategyAddedToQuorum struct {
	QuorumNumber uint8
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyAddedToQuorum is a free log retrieval operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) FilterStrategyAddedToQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryStrategyAddedToQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.FilterLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistryStrategyAddedToQuorumIterator{contract: _ContractECDSAStakeRegistry.contract, event: "StrategyAddedToQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyAddedToQuorum is a free log subscription operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) WatchStrategyAddedToQuorum(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryStrategyAddedToQuorum, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.WatchLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSAStakeRegistryStrategyAddedToQuorum)
				if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyAddedToQuorum is a log parse operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) ParseStrategyAddedToQuorum(log types.Log) (*ContractECDSAStakeRegistryStrategyAddedToQuorum, error) {
	event := new(ContractECDSAStakeRegistryStrategyAddedToQuorum)
	if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSAStakeRegistryStrategyMultiplierUpdatedIterator is returned from FilterStrategyMultiplierUpdated and is used to iterate over the raw logs and unpacked data for StrategyMultiplierUpdated events raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryStrategyMultiplierUpdatedIterator struct {
	Event *ContractECDSAStakeRegistryStrategyMultiplierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSAStakeRegistryStrategyMultiplierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSAStakeRegistryStrategyMultiplierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSAStakeRegistryStrategyMultiplierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSAStakeRegistryStrategyMultiplierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSAStakeRegistryStrategyMultiplierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSAStakeRegistryStrategyMultiplierUpdated represents a StrategyMultiplierUpdated event raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryStrategyMultiplierUpdated struct {
	QuorumNumber uint8
	Strategy     common.Address
	Multiplier   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyMultiplierUpdated is a free log retrieval operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) FilterStrategyMultiplierUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryStrategyMultiplierUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.FilterLogs(opts, "StrategyMultiplierUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistryStrategyMultiplierUpdatedIterator{contract: _ContractECDSAStakeRegistry.contract, event: "StrategyMultiplierUpdated", logs: logs, sub: sub}, nil
}

// WatchStrategyMultiplierUpdated is a free log subscription operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) WatchStrategyMultiplierUpdated(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryStrategyMultiplierUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.WatchLogs(opts, "StrategyMultiplierUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSAStakeRegistryStrategyMultiplierUpdated)
				if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "StrategyMultiplierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyMultiplierUpdated is a log parse operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) ParseStrategyMultiplierUpdated(log types.Log) (*ContractECDSAStakeRegistryStrategyMultiplierUpdated, error) {
	event := new(ContractECDSAStakeRegistryStrategyMultiplierUpdated)
	if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "StrategyMultiplierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSAStakeRegistryStrategyRemovedFromQuorumIterator is returned from FilterStrategyRemovedFromQuorum and is used to iterate over the raw logs and unpacked data for StrategyRemovedFromQuorum events raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryStrategyRemovedFromQuorumIterator struct {
	Event *ContractECDSAStakeRegistryStrategyRemovedFromQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSAStakeRegistryStrategyRemovedFromQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSAStakeRegistryStrategyRemovedFromQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSAStakeRegistryStrategyRemovedFromQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSAStakeRegistryStrategyRemovedFromQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSAStakeRegistryStrategyRemovedFromQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSAStakeRegistryStrategyRemovedFromQuorum represents a StrategyRemovedFromQuorum event raised by the ContractECDSAStakeRegistry contract.
type ContractECDSAStakeRegistryStrategyRemovedFromQuorum struct {
	QuorumNumber uint8
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyRemovedFromQuorum is a free log retrieval operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) FilterStrategyRemovedFromQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSAStakeRegistryStrategyRemovedFromQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.FilterLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSAStakeRegistryStrategyRemovedFromQuorumIterator{contract: _ContractECDSAStakeRegistry.contract, event: "StrategyRemovedFromQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyRemovedFromQuorum is a free log subscription operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) WatchStrategyRemovedFromQuorum(opts *bind.WatchOpts, sink chan<- *ContractECDSAStakeRegistryStrategyRemovedFromQuorum, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSAStakeRegistry.contract.WatchLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSAStakeRegistryStrategyRemovedFromQuorum)
				if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyRemovedFromQuorum is a log parse operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractECDSAStakeRegistry *ContractECDSAStakeRegistryFilterer) ParseStrategyRemovedFromQuorum(log types.Log) (*ContractECDSAStakeRegistryStrategyRemovedFromQuorum, error) {
	event := new(ContractECDSAStakeRegistryStrategyRemovedFromQuorum)
	if err := _ContractECDSAStakeRegistry.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
