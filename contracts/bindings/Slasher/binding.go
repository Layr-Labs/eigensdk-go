// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractSlasher

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ISlasherMiddlewareDetails is an auto generated low-level Go binding around an user-defined struct.
type ISlasherMiddlewareDetails struct {
	RegistrationMayBeginAtBlock        uint32
	ContractCanSlashOperatorUntilBlock uint32
	LatestUpdateBlock                  uint32
}

// ISlasherMiddlewareTimes is an auto generated low-level Go binding around an user-defined struct.
type ISlasherMiddlewareTimes struct {
	StalestUpdateBlock    uint32
	LatestServeUntilBlock uint32
}

// ContractSlasherMetaData contains all meta data concerning the ContractSlasher contract.
var ContractSlasherMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIStrategyManager\",\"name\":\"_strategyManager\",\"type\":\"address\"},{\"internalType\":\"contractIDelegationManager\",\"name\":\"_delegation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previouslySlashedAddress\",\"type\":\"address\"}],\"name\":\"FrozenStatusReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stalestUpdateBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"latestServeUntilBlock\",\"type\":\"uint32\"}],\"name\":\"MiddlewareTimesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"slashedOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"slashingContract\",\"type\":\"address\"}],\"name\":\"OperatorFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"OptedIntoSlashing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIPauserRegistry\",\"name\":\"pauserRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"PauserRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"contractCanSlashOperatorUntilBlock\",\"type\":\"uint32\"}],\"name\":\"SlashingAbilityRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBeSlashed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slashingContract\",\"type\":\"address\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"withdrawalStartBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"middlewareTimesIndex\",\"type\":\"uint256\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"serviceContract\",\"type\":\"address\"}],\"name\":\"contractCanSlashOperatorUntilBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contractIDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBeFrozen\",\"type\":\"address\"}],\"name\":\"freezeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"updateBlock\",\"type\":\"uint32\"}],\"name\":\"getCorrectValueForInsertAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getMiddlewareTimesIndexServeUntilBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getMiddlewareTimesIndexStalestUpdateBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"node\",\"type\":\"uint256\"}],\"name\":\"getPreviousWhitelistedContractByUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contractIPauserRegistry\",\"name\":\"_pauserRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPausedStatus\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"serviceContract\",\"type\":\"address\"}],\"name\":\"latestUpdateBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"middlewareTimesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"operatorToMiddlewareTimes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"stalestUpdateBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"latestServeUntilBlock\",\"type\":\"uint32\"}],\"internalType\":\"structISlasher.MiddlewareTimes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"operatorWhitelistedContractsLinkedListEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"operatorWhitelistedContractsLinkedListSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"optIntoSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"serveUntilBlock\",\"type\":\"uint32\"}],\"name\":\"recordFirstStakeUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"serveUntilBlock\",\"type\":\"uint32\"}],\"name\":\"recordLastStakeUpdateAndRevokeSlashingAbility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"updateBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"serveUntilBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"insertAfter\",\"type\":\"uint256\"}],\"name\":\"recordStakeUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"frozenAddresses\",\"type\":\"address[]\"}],\"name\":\"resetFrozenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"setPauserRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"contractIStrategyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"serviceContract\",\"type\":\"address\"}],\"name\":\"whitelistedContractDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"registrationMayBeginAtBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"contractCanSlashOperatorUntilBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"latestUpdateBlock\",\"type\":\"uint32\"}],\"internalType\":\"structISlasher.MiddlewareDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002cd738038062002cd7833981016040819052620000349162000134565b6001600160a01b03808316608052811660a0526200005162000059565b505062000173565b600054610100900460ff1615620000c65760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000119576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200013157600080fd5b50565b600080604083850312156200014857600080fd5b825162000155816200011b565b602084015190925062000168816200011b565b809150509250929050565b60805160a051612b29620001ae600039600081816105c8015281816114990152818161152b015261167b015260006103070152612b296000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80637259a45c1161011a578063d7b7fa13116100ad578063e58398361161007c578063e5839836146105ea578063e921d4fa146105fd578063f2fde38b14610626578063f73b751914610639578063fabc1cbc1461064c57600080fd5b8063d7b7fa13146104b8578063d98128c01461056a578063da16e29b1461057d578063df5cf723146105c357600080fd5b8063886f1195116100e9578063886f1195146104585780638da5cb5b1461046b578063a49db7321461047c578063c747075b146104a557600080fd5b80637259a45c146103ef5780637cf72bba146104025780638105e04314610415578063855fcc4a1461042857600080fd5b806338c8ee64116101925780635c975abb116101615780635c975abb1461037c5780636f0c2f741461038e578063715018a6146103d4578063723e59c7146103dc57600080fd5b806338c8ee64146102ef57806339b70e3814610302578063595c6a67146103415780635ac86ab71461034957600080fd5b80631794bb3c116101ce5780631794bb3c1461024e5780631874e5ae14610261578063282670fc1461028e57806335571676146102c557600080fd5b80630ffabbce1461020057806310d67a2f14610215578063136439dd14610228578063175d32051461023b575b600080fd5b61021361020e3660046126e6565b61065f565b005b61021361022336600461271b565b61078f565b610213610236366004612738565b610842565b6102136102493660046126e6565b610981565b61021361025c366004612751565b610aab565b61027461026f3660046126e6565b610bc9565b60405163ffffffff90911681526020015b60405180910390f35b6102a161029c366004612792565b610c14565b60408051825163ffffffff9081168252602093840151169281019290925201610285565b6102d86102d3366004612792565b610c8b565b604080519215158352602083019190915201610285565b6102136102fd36600461271b565b610cba565b6103297f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610285565b610213610d88565b61036c6103573660046127be565b606654600160ff9092169190911b9081161490565b6040519015158152602001610285565b6066545b604051908152602001610285565b61027461039c3660046127e1565b6001600160a01b039182166000908152609760209081526040808320939094168252919091522054600160201b900463ffffffff1690565b610213610e4f565b6103806103ea3660046126e6565b610e63565b6102746103fd3660046126e6565b610f73565b61021361041036600461281a565b610fc3565b61036c61042336600461288f565b61100d565b61043b6104363660046127e1565b61116f565b604080519315158452602084019290925290820152606001610285565b606554610329906001600160a01b031681565b6033546001600160a01b0316610329565b61038061048a36600461271b565b6001600160a01b03166000908152609a602052604090205490565b6102136104b33660046128cd565b6111b2565b61053b6104c63660046127e1565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0395861681526097835283812094909516855292815292819020815192830182525463ffffffff8082168452600160201b8204811694840194909452600160401b90049092169181019190915290565b60408051825163ffffffff90811682526020808501518216908301529282015190921690820152606001610285565b61036c6105783660046127e1565b611405565b61027461058b3660046127e1565b6001600160a01b039182166000908152609760209081526040808320939094168252919091522054600160401b900463ffffffff1690565b6103297f000000000000000000000000000000000000000000000000000000000000000081565b61036c6105f836600461271b565b611451565b61038061060b36600461271b565b6001600160a01b031660009081526099602052604090205490565b61021361063436600461271b565b6115c7565b61021361064736600461271b565b61163d565b61021361065a366004612738565b61176c565b6001600160a01b03821660009081526097602090815260408083203384529091529020548290600160201b900463ffffffff908116146106ba5760405162461bcd60e51b81526004016106b19061291a565b60405180910390fd5b6106c58343846118c8565b6106e7336001600160a01b038516600090815260996020526040902090611c5e565b61077f5760405162461bcd60e51b815260206004820152605760248201527f536c61736865722e7265636f72644c6173745374616b65557064617465416e6460448201527f5265766f6b65536c617368696e674162696c6974793a2052656d6f76696e672060648201527f6d6964646c657761726520756e7375636365737366756c000000000000000000608482015260a4016106b1565b61078a833384611cf8565b505050565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190612990565b6001600160a01b0316336001600160a01b0316146108365760405162461bcd60e51b81526004016106b1906129ad565b61083f81611e03565b50565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa15801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae91906129f7565b6108ca5760405162461bcd60e51b81526004016106b190612a19565b606654818116146109435760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c697479000000000000000060648201526084016106b1565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b606654600190600290811614156109aa5760405162461bcd60e51b81526004016106b190612a61565b6001600160a01b03831660009081526097602090815260408083203384529091529020548390600160201b900463ffffffff908116146109fc5760405162461bcd60e51b81526004016106b19061291a565b610a078443856118c8565b610a29336001600160a01b038616600090815260996020526040902090611efa565b610aa55760405162461bcd60e51b815260206004820152604160248201527f536c61736865722e7265636f726446697273745374616b655570646174653a2060448201527f417070656e64696e67206d6964646c657761726520756e7375636365737366756064820152601b60fa1b608482015260a4016106b1565b50505050565b600054610100900460ff1615808015610acb5750600054600160ff909116105b80610ae55750303b158015610ae5575060005460ff166001145b610b485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b1565b6000805460ff191660011790558015610b6b576000805461ff0019166101001790555b610b758383611f08565b610b7e84611fee565b8015610aa5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6001600160a01b0382166000908152609a60205260408120805463ffffffff8416908110610bf957610bf9612a98565b60009182526020909120015463ffffffff1690505b92915050565b60408051808201909152600080825260208201526001600160a01b0383166000908152609a60205260409020805483908110610c5257610c52612a98565b60009182526020918290206040805180820190915291015463ffffffff8082168352600160201b90910416918101919091529392505050565b6001600160a01b03821660009081526099602052604081208190610caf9084612040565b915091509250929050565b60665460029060049081161415610ce35760405162461bcd60e51b81526004016106b190612a61565b610ced8233611405565b610d7a5760405162461bcd60e51b815260206004820152605260248201527f536c61736865722e667265657a654f70657261746f723a206d73672e73656e6460448201527f657220646f6573206e6f742068617665207065726d697373696f6e20746f20736064820152713630b9b4103a3434b99037b832b930ba37b960711b608482015260a4016106b1565b610d84823361204f565b5050565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df491906129f7565b610e105760405162461bcd60e51b81526004016106b190612a19565b600019606681905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b610e576120c1565b610e616000611fee565b565b6001600160a01b038281166000818152609960209081526040808320838052600190810183528184209084528252808320549383526097825280832094841683529390529182205463ffffffff848116600160401b909204161115610ecc576000915050610c0e565b6001600160a01b0384166000908152609960205260408120610eee908361211b565b9150505b8015801590610f3657506001600160a01b0385811660009081526097602090815260408083209386168352929052205463ffffffff858116600160401b9092041611155b15610f6b576001600160a01b03851660009081526099602052604090209091508190610f62908261211b565b9150610ef29050565b509392505050565b6001600160a01b0382166000908152609a60205260408120805463ffffffff8416908110610fa357610fa3612a98565b600091825260209091200154600160201b900463ffffffff169392505050565b610fcb6120c1565b60005b8181101561078a57611005838383818110610feb57610feb612a98565b9050602002016020810190611000919061271b565b61212a565b600101610fce565b6001600160a01b0383166000908152609a602052604081205461103257506001611168565b6001600160a01b0384166000908152609a6020526040812080548490811061105c5761105c612a98565b60009182526020918290206040805180820190915291015463ffffffff808216808452600160201b909204811693830193909352909250908516108015906110ba57506001600160a01b038516600090815260996020526040902054155b15611136576001600160a01b0385166000908152609a6020526040902080546110e590600190612ac4565b815481106110f5576110f5612a98565b60009182526020918290206040805180820190915291015463ffffffff8082168352600160201b909104811691909201819052439091161191506111689050565b806000015163ffffffff168463ffffffff161080156111645750806020015163ffffffff164363ffffffff16115b9150505b9392505050565b6001600160a01b0382166000908152609960205260408120819081906111a49061119f866001600160a01b031690565b612194565b9250925092505b9250925092565b6001600160a01b03841660009081526097602090815260408083203384529091529020548490600160201b900463ffffffff908116146112045760405162461bcd60e51b81526004016106b19061291a565b438463ffffffff16111561128a5760405162461bcd60e51b815260206004820152604160248201527f536c61736865722e7265636f72645374616b655570646174653a2063616e6e6f60448201527f742070726f766964652075706461746520666f722066757475726520626c6f636064820152606b60f81b608482015260a4016106b1565b6112958585856118c8565b6001600160a01b038516600090815260996020526040902054600114611359576112d7336001600160a01b038716600090815260996020526040902090611c5e565b6113495760405162461bcd60e51b815260206004820152603b60248201527f536c61736865722e7265636f72645374616b655570646174653a2052656d6f7660448201527f696e67206d6964646c657761726520756e7375636365737366756c000000000060648201526084016106b1565b6113548585846121e4565b6113fe565b336001600160a01b038616600090815260996020908152604080832083805260019081018352818420908452909152902054146113fe5760405162461bcd60e51b815260206004820152603960248201527f536c61736865722e7265636f72645374616b655570646174653a2043616c6c6560448201527f72206973206e6f7420746865206c69737420656e7472616e740000000000000060648201526084016106b1565b5050505050565b6001600160a01b038281166000908152609760209081526040808320938516835292905290812054600160201b900463ffffffff1643101561144957506001610c0e565b506000610c0e565b6001600160a01b03811660009081526098602052604081205460ff161561147a57506001919050565b604051633e28391d60e01b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633e28391d90602401602060405180830381865afa1580156114e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150491906129f7565b156115ba57604051631976849960e21b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906365da126490602401602060405180830381865afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190612990565b6001600160a01b031660009081526098602052604090205460ff169392505050565b506000919050565b919050565b6115cf6120c1565b6001600160a01b0381166116345760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b1565b61083f81611fee565b606654600090600190811614156116665760405162461bcd60e51b81526004016106b190612a61565b6040516336b87bd760e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636d70f7ae90602401602060405180830381865afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee91906129f7565b611762576040805162461bcd60e51b81526020600482015260248101919091527f536c61736865722e6f7074496e746f536c617368696e673a206d73672e73656e60448201527f646572206973206e6f7420612072656769737465726564206f70657261746f7260648201526084016106b1565b610d84338361249b565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e39190612990565b6001600160a01b0316336001600160a01b0316146118135760405162461bcd60e51b81526004016106b1906129ad565b6066541981196066541916146118915760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c697479000000000000000060648201526084016106b1565b606681905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610976565b6001600160a01b038316600090815260976020908152604080832033845290915290205463ffffffff808416600160401b9092041611156119845760405162461bcd60e51b815260206004820152604a60248201527f536c61736865722e5f7265636f7264557064617465416e64416464546f4d696460448201527f646c657761726554696d65733a2063616e2774207075736820612070726576696064820152696f75732075706461746560b01b608482015260a4016106b1565b6001600160a01b0383166000818152609760209081526040808320338452825280832080546bffffffff00000000000000001916600160401b63ffffffff89160217905580518082018252838152808301849052938352609a9091529020548015611a51576001600160a01b0385166000908152609a60205260409020611a0c600183612ac4565b81548110611a1c57611a1c612a98565b60009182526020918290206040805180820190915291015463ffffffff8082168352600160201b909104169181019190915291505b60008290506000836020015163ffffffff168563ffffffff161115611a80575063ffffffff8416602082015260015b6001600160a01b038716600090815260996020526040902054611aae575063ffffffff851681526001611b83565b336001600160a01b0388166000908152609960209081526040808320838052600190810183528184209084529091529020541415611b8357600080611b0b336001600160a01b038b1660009081526099602052604090209061211b565b915091508115611b72576001600160a01b03898116600090815260976020908152604080832093851683529290522054600160401b900463ffffffff908116908916811015611b625763ffffffff81168552611b6c565b63ffffffff891685525b50611b7c565b63ffffffff881684525b6001925050505b8015611c55576001600160a01b0387166000818152609a6020908152604082208054600181810183558285528385208851920180549489015163ffffffff908116600160201b0267ffffffffffffffff199096169316929092179390931790559290915290547f1b62ba64c72d01e41a2b8c46e6aeeff728ef3a4438cf1cac3d92ee12189d5649918991611c179190612ac4565b8451602080870151604080516001600160a01b0390961686529185019390935263ffffffff9182169084015216606082015260800160405180910390a15b50505050505050565b6000811580611c745750611c728383612506565b155b15611c8157506000610c0e565b600082815260018481016020908152604080842084805290915280832054828452922054611cb3928692909190612582565b60008281526001848101602090815260408084208480529091528083208390558183528220829055845490918591611cec908490612ac4565b90915550919392505050565b63ffffffff8181161415611d825760405162461bcd60e51b8152602060048201526044602482018190527f536c61736865722e5f7265766f6b65536c617368696e674162696c6974793a20908201527f7365727665556e74696c426c6f636b2074696d65206d757374206265206c696d6064820152631a5d195960e21b608482015260a4016106b1565b6001600160a01b03838116600081815260976020908152604080832094871680845294825291829020805467ffffffff000000001916600160201b63ffffffff88169081029190911790915591519182527f9aa1b1391f35c672ed1f3b7ece632f4513e618366bef7a2f67b7c6bc1f2d2b14910160405180910390a3505050565b6001600160a01b038116611e915760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a4016106b1565b606554604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b6000611168838360006125b7565b6065546001600160a01b0316158015611f2957506001600160a01b03821615155b611fab5760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a4016106b1565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2610d8482611e03565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080610caf848460006125ce565b6001600160a01b03821660009081526098602052604090205460ff16610d84576001600160a01b03808316600081815260986020526040808220805460ff1916600117905551928416927f444a84f512816ae7be8ed8a66aa88e362eb54d0988e83acc9d81746622b3ba519190a35050565b6033546001600160a01b03163314610e615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b1565b600080610caf848460016125ce565b6001600160a01b03811660009081526098602052604090205460ff161561083f576001600160a01b038116600081815260986020526040808220805460ff19169055517fd4cef0af27800d466fcacd85779857378b85cb61569005ff1464fa6e5ced69d89190a250565b60008060006121a38585612506565b6121b5575060009150819050806111ab565b5050506000818152600183810160209081526040808420848052909152808320548284529220549091906111ab565b6000811561238e576001600160a01b038416600090815260996020526040902061220e9083612506565b612216575060015b8015801561225857506001600160a01b0384811660009081526097602090815260408083209386168352929052205463ffffffff848116600160401b90920416115b15612261575060015b806122d8576001600160a01b0384166000908152609960205260408120819061228a908561211b565b9150915081156122d5576001600160a01b0386811660009081526097602090815260408083209385168352929052205463ffffffff868116600160401b90920416116122d557600192505b50505b80612377576001600160a01b0384166000908152609960205260409020612300908333612617565b6123725760405162461bcd60e51b815260206004820152603c60248201527f536c61736865722e7265636f72645374616b655570646174653a20496e73657260448201527f74696e67206d6964646c657761726520756e7375636365737366756c0000000060648201526084016106b1565b610aa5565b6123818484610e63565b91506123728484846121e4565b6001600160a01b03848116600090815260976020908152604080832060998352818420848052600190810184528285209085528352818420549094168352929052205463ffffffff848116600160401b90920416116123eb575060015b8061248457612412336001600160a01b038616600090815260996020526040902090612626565b6123725760405162461bcd60e51b815260206004820152603e60248201527f536c61736865722e7265636f72645374616b655570646174653a20507265707060448201527f656e64696e67206d6964646c657761726520756e7375636365737366756c000060648201526084016106b1565b61248e8484610e63565b9150610aa58484846121e4565b6001600160a01b03808316600081815260976020908152604080832094861680845294909152808220805467ffffffff00000000191667ffffffff00000000179055517fefa9fb38e813d53c15edf501e03852843a3fed691960523391d71a092b3627d89190a35050565b6000818152600183016020908152604080832083805290915281205415801561254957506000828152600180850160209081526040808420928452919052902054155b1561257a57600080805260018085016020908152604080842092845291905290205482141561144957506001610c0e565b506001610c0e565b600082815260019094016020818152604080872093158088529382528087208690559486529081528385209115855252912055565b60006125c68460008585612634565b949350505050565b6000806125db8585612506565b6125ea5750600090508061260f565b5050600082815260018401602090815260408083208415158452909152902054801515905b935093915050565b60006125c68484846001612634565b6000611168838360016125b7565b60006126408584612506565b15801561265257506126528585612506565b156126b25760008481526001860160209081526040808320851515845290915290205461268186868686612582565b61268d86858386612582565b60018660000160008282546126a29190612adb565b90915550600192506125c6915050565b506000949350505050565b6001600160a01b038116811461083f57600080fd5b803563ffffffff811681146115c257600080fd5b600080604083850312156126f957600080fd5b8235612704816126bd565b9150612712602084016126d2565b90509250929050565b60006020828403121561272d57600080fd5b8135611168816126bd565b60006020828403121561274a57600080fd5b5035919050565b60008060006060848603121561276657600080fd5b8335612771816126bd565b92506020840135612781816126bd565b929592945050506040919091013590565b600080604083850312156127a557600080fd5b82356127b0816126bd565b946020939093013593505050565b6000602082840312156127d057600080fd5b813560ff8116811461116857600080fd5b600080604083850312156127f457600080fd5b82356127ff816126bd565b9150602083013561280f816126bd565b809150509250929050565b6000806020838503121561282d57600080fd5b823567ffffffffffffffff8082111561284557600080fd5b818501915085601f83011261285957600080fd5b81358181111561286857600080fd5b8660208260051b850101111561287d57600080fd5b60209290920196919550909350505050565b6000806000606084860312156128a457600080fd5b83356128af816126bd565b92506128bd602085016126d2565b9150604084013590509250925092565b600080600080608085870312156128e357600080fd5b84356128ee816126bd565b93506128fc602086016126d2565b925061290a604086016126d2565b9396929550929360600135925050565b60208082526050908201527f536c61736865722e6f6e6c7952656769737465726564466f725365727669636560408201527f3a204f70657261746f7220686173206e6f74206f7074656420696e746f20736c60608201526f30b9b434b73390313c9031b0b63632b960811b608082015260a00190565b6000602082840312156129a257600080fd5b8151611168816126bd565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b600060208284031215612a0957600080fd5b8151801515811461116857600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b60208082526019908201527f5061757361626c653a20696e6465782069732070617573656400000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015612ad657612ad6612aae565b500390565b60008219821115612aee57612aee612aae565b50019056fea2646970667358221220c5efe534d543130a022495783fbd61cd409c461e0ed63e2b662dd8ec88c5716764736f6c634300080c0033",
}

// ContractSlasherABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractSlasherMetaData.ABI instead.
var ContractSlasherABI = ContractSlasherMetaData.ABI

// ContractSlasherBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractSlasherMetaData.Bin instead.
var ContractSlasherBin = ContractSlasherMetaData.Bin

// DeployContractSlasher deploys a new Ethereum contract, binding an instance of ContractSlasher to it.
func DeployContractSlasher(auth *bind.TransactOpts, backend bind.ContractBackend, _strategyManager common.Address, _delegation common.Address) (common.Address, *types.Transaction, *ContractSlasher, error) {
	parsed, err := ContractSlasherMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractSlasherBin), backend, _strategyManager, _delegation)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractSlasher{ContractSlasherCaller: ContractSlasherCaller{contract: contract}, ContractSlasherTransactor: ContractSlasherTransactor{contract: contract}, ContractSlasherFilterer: ContractSlasherFilterer{contract: contract}}, nil
}

// ContractSlasher is an auto generated Go binding around an Ethereum contract.
type ContractSlasher struct {
	ContractSlasherCaller     // Read-only binding to the contract
	ContractSlasherTransactor // Write-only binding to the contract
	ContractSlasherFilterer   // Log filterer for contract events
}

// ContractSlasherCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractSlasherCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSlasherTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractSlasherTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSlasherFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractSlasherFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSlasherSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSlasherSession struct {
	Contract     *ContractSlasher  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractSlasherCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractSlasherCallerSession struct {
	Contract *ContractSlasherCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ContractSlasherTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractSlasherTransactorSession struct {
	Contract     *ContractSlasherTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ContractSlasherRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractSlasherRaw struct {
	Contract *ContractSlasher // Generic contract binding to access the raw methods on
}

// ContractSlasherCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractSlasherCallerRaw struct {
	Contract *ContractSlasherCaller // Generic read-only contract binding to access the raw methods on
}

// ContractSlasherTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractSlasherTransactorRaw struct {
	Contract *ContractSlasherTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractSlasher creates a new instance of ContractSlasher, bound to a specific deployed contract.
func NewContractSlasher(address common.Address, backend bind.ContractBackend) (*ContractSlasher, error) {
	contract, err := bindContractSlasher(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractSlasher{ContractSlasherCaller: ContractSlasherCaller{contract: contract}, ContractSlasherTransactor: ContractSlasherTransactor{contract: contract}, ContractSlasherFilterer: ContractSlasherFilterer{contract: contract}}, nil
}

// NewContractSlasherCaller creates a new read-only instance of ContractSlasher, bound to a specific deployed contract.
func NewContractSlasherCaller(address common.Address, caller bind.ContractCaller) (*ContractSlasherCaller, error) {
	contract, err := bindContractSlasher(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherCaller{contract: contract}, nil
}

// NewContractSlasherTransactor creates a new write-only instance of ContractSlasher, bound to a specific deployed contract.
func NewContractSlasherTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractSlasherTransactor, error) {
	contract, err := bindContractSlasher(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherTransactor{contract: contract}, nil
}

// NewContractSlasherFilterer creates a new log filterer instance of ContractSlasher, bound to a specific deployed contract.
func NewContractSlasherFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractSlasherFilterer, error) {
	contract, err := bindContractSlasher(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherFilterer{contract: contract}, nil
}

// bindContractSlasher binds a generic wrapper to an already deployed contract.
func bindContractSlasher(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractSlasherMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractSlasher *ContractSlasherRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractSlasher.Contract.ContractSlasherCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractSlasher *ContractSlasherRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractSlasher.Contract.ContractSlasherTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractSlasher *ContractSlasherRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractSlasher.Contract.ContractSlasherTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractSlasher *ContractSlasherCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractSlasher.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractSlasher *ContractSlasherTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractSlasher.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractSlasher *ContractSlasherTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractSlasher.Contract.contract.Transact(opts, method, params...)
}

// CanSlash is a free data retrieval call binding the contract method 0xd98128c0.
//
// Solidity: function canSlash(address toBeSlashed, address slashingContract) view returns(bool)
func (_ContractSlasher *ContractSlasherCaller) CanSlash(opts *bind.CallOpts, toBeSlashed common.Address, slashingContract common.Address) (bool, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "canSlash", toBeSlashed, slashingContract)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanSlash is a free data retrieval call binding the contract method 0xd98128c0.
//
// Solidity: function canSlash(address toBeSlashed, address slashingContract) view returns(bool)
func (_ContractSlasher *ContractSlasherSession) CanSlash(toBeSlashed common.Address, slashingContract common.Address) (bool, error) {
	return _ContractSlasher.Contract.CanSlash(&_ContractSlasher.CallOpts, toBeSlashed, slashingContract)
}

// CanSlash is a free data retrieval call binding the contract method 0xd98128c0.
//
// Solidity: function canSlash(address toBeSlashed, address slashingContract) view returns(bool)
func (_ContractSlasher *ContractSlasherCallerSession) CanSlash(toBeSlashed common.Address, slashingContract common.Address) (bool, error) {
	return _ContractSlasher.Contract.CanSlash(&_ContractSlasher.CallOpts, toBeSlashed, slashingContract)
}

// CanWithdraw is a free data retrieval call binding the contract method 0x8105e043.
//
// Solidity: function canWithdraw(address operator, uint32 withdrawalStartBlock, uint256 middlewareTimesIndex) view returns(bool)
func (_ContractSlasher *ContractSlasherCaller) CanWithdraw(opts *bind.CallOpts, operator common.Address, withdrawalStartBlock uint32, middlewareTimesIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "canWithdraw", operator, withdrawalStartBlock, middlewareTimesIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanWithdraw is a free data retrieval call binding the contract method 0x8105e043.
//
// Solidity: function canWithdraw(address operator, uint32 withdrawalStartBlock, uint256 middlewareTimesIndex) view returns(bool)
func (_ContractSlasher *ContractSlasherSession) CanWithdraw(operator common.Address, withdrawalStartBlock uint32, middlewareTimesIndex *big.Int) (bool, error) {
	return _ContractSlasher.Contract.CanWithdraw(&_ContractSlasher.CallOpts, operator, withdrawalStartBlock, middlewareTimesIndex)
}

// CanWithdraw is a free data retrieval call binding the contract method 0x8105e043.
//
// Solidity: function canWithdraw(address operator, uint32 withdrawalStartBlock, uint256 middlewareTimesIndex) view returns(bool)
func (_ContractSlasher *ContractSlasherCallerSession) CanWithdraw(operator common.Address, withdrawalStartBlock uint32, middlewareTimesIndex *big.Int) (bool, error) {
	return _ContractSlasher.Contract.CanWithdraw(&_ContractSlasher.CallOpts, operator, withdrawalStartBlock, middlewareTimesIndex)
}

// ContractCanSlashOperatorUntilBlock is a free data retrieval call binding the contract method 0x6f0c2f74.
//
// Solidity: function contractCanSlashOperatorUntilBlock(address operator, address serviceContract) view returns(uint32)
func (_ContractSlasher *ContractSlasherCaller) ContractCanSlashOperatorUntilBlock(opts *bind.CallOpts, operator common.Address, serviceContract common.Address) (uint32, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "contractCanSlashOperatorUntilBlock", operator, serviceContract)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ContractCanSlashOperatorUntilBlock is a free data retrieval call binding the contract method 0x6f0c2f74.
//
// Solidity: function contractCanSlashOperatorUntilBlock(address operator, address serviceContract) view returns(uint32)
func (_ContractSlasher *ContractSlasherSession) ContractCanSlashOperatorUntilBlock(operator common.Address, serviceContract common.Address) (uint32, error) {
	return _ContractSlasher.Contract.ContractCanSlashOperatorUntilBlock(&_ContractSlasher.CallOpts, operator, serviceContract)
}

// ContractCanSlashOperatorUntilBlock is a free data retrieval call binding the contract method 0x6f0c2f74.
//
// Solidity: function contractCanSlashOperatorUntilBlock(address operator, address serviceContract) view returns(uint32)
func (_ContractSlasher *ContractSlasherCallerSession) ContractCanSlashOperatorUntilBlock(operator common.Address, serviceContract common.Address) (uint32, error) {
	return _ContractSlasher.Contract.ContractCanSlashOperatorUntilBlock(&_ContractSlasher.CallOpts, operator, serviceContract)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractSlasher *ContractSlasherCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractSlasher *ContractSlasherSession) Delegation() (common.Address, error) {
	return _ContractSlasher.Contract.Delegation(&_ContractSlasher.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractSlasher *ContractSlasherCallerSession) Delegation() (common.Address, error) {
	return _ContractSlasher.Contract.Delegation(&_ContractSlasher.CallOpts)
}

// GetCorrectValueForInsertAfter is a free data retrieval call binding the contract method 0x723e59c7.
//
// Solidity: function getCorrectValueForInsertAfter(address operator, uint32 updateBlock) view returns(uint256)
func (_ContractSlasher *ContractSlasherCaller) GetCorrectValueForInsertAfter(opts *bind.CallOpts, operator common.Address, updateBlock uint32) (*big.Int, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "getCorrectValueForInsertAfter", operator, updateBlock)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCorrectValueForInsertAfter is a free data retrieval call binding the contract method 0x723e59c7.
//
// Solidity: function getCorrectValueForInsertAfter(address operator, uint32 updateBlock) view returns(uint256)
func (_ContractSlasher *ContractSlasherSession) GetCorrectValueForInsertAfter(operator common.Address, updateBlock uint32) (*big.Int, error) {
	return _ContractSlasher.Contract.GetCorrectValueForInsertAfter(&_ContractSlasher.CallOpts, operator, updateBlock)
}

// GetCorrectValueForInsertAfter is a free data retrieval call binding the contract method 0x723e59c7.
//
// Solidity: function getCorrectValueForInsertAfter(address operator, uint32 updateBlock) view returns(uint256)
func (_ContractSlasher *ContractSlasherCallerSession) GetCorrectValueForInsertAfter(operator common.Address, updateBlock uint32) (*big.Int, error) {
	return _ContractSlasher.Contract.GetCorrectValueForInsertAfter(&_ContractSlasher.CallOpts, operator, updateBlock)
}

// GetMiddlewareTimesIndexServeUntilBlock is a free data retrieval call binding the contract method 0x7259a45c.
//
// Solidity: function getMiddlewareTimesIndexServeUntilBlock(address operator, uint32 index) view returns(uint32)
func (_ContractSlasher *ContractSlasherCaller) GetMiddlewareTimesIndexServeUntilBlock(opts *bind.CallOpts, operator common.Address, index uint32) (uint32, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "getMiddlewareTimesIndexServeUntilBlock", operator, index)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMiddlewareTimesIndexServeUntilBlock is a free data retrieval call binding the contract method 0x7259a45c.
//
// Solidity: function getMiddlewareTimesIndexServeUntilBlock(address operator, uint32 index) view returns(uint32)
func (_ContractSlasher *ContractSlasherSession) GetMiddlewareTimesIndexServeUntilBlock(operator common.Address, index uint32) (uint32, error) {
	return _ContractSlasher.Contract.GetMiddlewareTimesIndexServeUntilBlock(&_ContractSlasher.CallOpts, operator, index)
}

// GetMiddlewareTimesIndexServeUntilBlock is a free data retrieval call binding the contract method 0x7259a45c.
//
// Solidity: function getMiddlewareTimesIndexServeUntilBlock(address operator, uint32 index) view returns(uint32)
func (_ContractSlasher *ContractSlasherCallerSession) GetMiddlewareTimesIndexServeUntilBlock(operator common.Address, index uint32) (uint32, error) {
	return _ContractSlasher.Contract.GetMiddlewareTimesIndexServeUntilBlock(&_ContractSlasher.CallOpts, operator, index)
}

// GetMiddlewareTimesIndexStalestUpdateBlock is a free data retrieval call binding the contract method 0x1874e5ae.
//
// Solidity: function getMiddlewareTimesIndexStalestUpdateBlock(address operator, uint32 index) view returns(uint32)
func (_ContractSlasher *ContractSlasherCaller) GetMiddlewareTimesIndexStalestUpdateBlock(opts *bind.CallOpts, operator common.Address, index uint32) (uint32, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "getMiddlewareTimesIndexStalestUpdateBlock", operator, index)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMiddlewareTimesIndexStalestUpdateBlock is a free data retrieval call binding the contract method 0x1874e5ae.
//
// Solidity: function getMiddlewareTimesIndexStalestUpdateBlock(address operator, uint32 index) view returns(uint32)
func (_ContractSlasher *ContractSlasherSession) GetMiddlewareTimesIndexStalestUpdateBlock(operator common.Address, index uint32) (uint32, error) {
	return _ContractSlasher.Contract.GetMiddlewareTimesIndexStalestUpdateBlock(&_ContractSlasher.CallOpts, operator, index)
}

// GetMiddlewareTimesIndexStalestUpdateBlock is a free data retrieval call binding the contract method 0x1874e5ae.
//
// Solidity: function getMiddlewareTimesIndexStalestUpdateBlock(address operator, uint32 index) view returns(uint32)
func (_ContractSlasher *ContractSlasherCallerSession) GetMiddlewareTimesIndexStalestUpdateBlock(operator common.Address, index uint32) (uint32, error) {
	return _ContractSlasher.Contract.GetMiddlewareTimesIndexStalestUpdateBlock(&_ContractSlasher.CallOpts, operator, index)
}

// GetPreviousWhitelistedContractByUpdate is a free data retrieval call binding the contract method 0x35571676.
//
// Solidity: function getPreviousWhitelistedContractByUpdate(address operator, uint256 node) view returns(bool, uint256)
func (_ContractSlasher *ContractSlasherCaller) GetPreviousWhitelistedContractByUpdate(opts *bind.CallOpts, operator common.Address, node *big.Int) (bool, *big.Int, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "getPreviousWhitelistedContractByUpdate", operator, node)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetPreviousWhitelistedContractByUpdate is a free data retrieval call binding the contract method 0x35571676.
//
// Solidity: function getPreviousWhitelistedContractByUpdate(address operator, uint256 node) view returns(bool, uint256)
func (_ContractSlasher *ContractSlasherSession) GetPreviousWhitelistedContractByUpdate(operator common.Address, node *big.Int) (bool, *big.Int, error) {
	return _ContractSlasher.Contract.GetPreviousWhitelistedContractByUpdate(&_ContractSlasher.CallOpts, operator, node)
}

// GetPreviousWhitelistedContractByUpdate is a free data retrieval call binding the contract method 0x35571676.
//
// Solidity: function getPreviousWhitelistedContractByUpdate(address operator, uint256 node) view returns(bool, uint256)
func (_ContractSlasher *ContractSlasherCallerSession) GetPreviousWhitelistedContractByUpdate(operator common.Address, node *big.Int) (bool, *big.Int, error) {
	return _ContractSlasher.Contract.GetPreviousWhitelistedContractByUpdate(&_ContractSlasher.CallOpts, operator, node)
}

// IsFrozen is a free data retrieval call binding the contract method 0xe5839836.
//
// Solidity: function isFrozen(address staker) view returns(bool)
func (_ContractSlasher *ContractSlasherCaller) IsFrozen(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "isFrozen", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFrozen is a free data retrieval call binding the contract method 0xe5839836.
//
// Solidity: function isFrozen(address staker) view returns(bool)
func (_ContractSlasher *ContractSlasherSession) IsFrozen(staker common.Address) (bool, error) {
	return _ContractSlasher.Contract.IsFrozen(&_ContractSlasher.CallOpts, staker)
}

// IsFrozen is a free data retrieval call binding the contract method 0xe5839836.
//
// Solidity: function isFrozen(address staker) view returns(bool)
func (_ContractSlasher *ContractSlasherCallerSession) IsFrozen(staker common.Address) (bool, error) {
	return _ContractSlasher.Contract.IsFrozen(&_ContractSlasher.CallOpts, staker)
}

// LatestUpdateBlock is a free data retrieval call binding the contract method 0xda16e29b.
//
// Solidity: function latestUpdateBlock(address operator, address serviceContract) view returns(uint32)
func (_ContractSlasher *ContractSlasherCaller) LatestUpdateBlock(opts *bind.CallOpts, operator common.Address, serviceContract common.Address) (uint32, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "latestUpdateBlock", operator, serviceContract)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// LatestUpdateBlock is a free data retrieval call binding the contract method 0xda16e29b.
//
// Solidity: function latestUpdateBlock(address operator, address serviceContract) view returns(uint32)
func (_ContractSlasher *ContractSlasherSession) LatestUpdateBlock(operator common.Address, serviceContract common.Address) (uint32, error) {
	return _ContractSlasher.Contract.LatestUpdateBlock(&_ContractSlasher.CallOpts, operator, serviceContract)
}

// LatestUpdateBlock is a free data retrieval call binding the contract method 0xda16e29b.
//
// Solidity: function latestUpdateBlock(address operator, address serviceContract) view returns(uint32)
func (_ContractSlasher *ContractSlasherCallerSession) LatestUpdateBlock(operator common.Address, serviceContract common.Address) (uint32, error) {
	return _ContractSlasher.Contract.LatestUpdateBlock(&_ContractSlasher.CallOpts, operator, serviceContract)
}

// MiddlewareTimesLength is a free data retrieval call binding the contract method 0xa49db732.
//
// Solidity: function middlewareTimesLength(address operator) view returns(uint256)
func (_ContractSlasher *ContractSlasherCaller) MiddlewareTimesLength(opts *bind.CallOpts, operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "middlewareTimesLength", operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MiddlewareTimesLength is a free data retrieval call binding the contract method 0xa49db732.
//
// Solidity: function middlewareTimesLength(address operator) view returns(uint256)
func (_ContractSlasher *ContractSlasherSession) MiddlewareTimesLength(operator common.Address) (*big.Int, error) {
	return _ContractSlasher.Contract.MiddlewareTimesLength(&_ContractSlasher.CallOpts, operator)
}

// MiddlewareTimesLength is a free data retrieval call binding the contract method 0xa49db732.
//
// Solidity: function middlewareTimesLength(address operator) view returns(uint256)
func (_ContractSlasher *ContractSlasherCallerSession) MiddlewareTimesLength(operator common.Address) (*big.Int, error) {
	return _ContractSlasher.Contract.MiddlewareTimesLength(&_ContractSlasher.CallOpts, operator)
}

// OperatorToMiddlewareTimes is a free data retrieval call binding the contract method 0x282670fc.
//
// Solidity: function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) view returns((uint32,uint32))
func (_ContractSlasher *ContractSlasherCaller) OperatorToMiddlewareTimes(opts *bind.CallOpts, operator common.Address, arrayIndex *big.Int) (ISlasherMiddlewareTimes, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "operatorToMiddlewareTimes", operator, arrayIndex)

	if err != nil {
		return *new(ISlasherMiddlewareTimes), err
	}

	out0 := *abi.ConvertType(out[0], new(ISlasherMiddlewareTimes)).(*ISlasherMiddlewareTimes)

	return out0, err

}

// OperatorToMiddlewareTimes is a free data retrieval call binding the contract method 0x282670fc.
//
// Solidity: function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) view returns((uint32,uint32))
func (_ContractSlasher *ContractSlasherSession) OperatorToMiddlewareTimes(operator common.Address, arrayIndex *big.Int) (ISlasherMiddlewareTimes, error) {
	return _ContractSlasher.Contract.OperatorToMiddlewareTimes(&_ContractSlasher.CallOpts, operator, arrayIndex)
}

// OperatorToMiddlewareTimes is a free data retrieval call binding the contract method 0x282670fc.
//
// Solidity: function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) view returns((uint32,uint32))
func (_ContractSlasher *ContractSlasherCallerSession) OperatorToMiddlewareTimes(operator common.Address, arrayIndex *big.Int) (ISlasherMiddlewareTimes, error) {
	return _ContractSlasher.Contract.OperatorToMiddlewareTimes(&_ContractSlasher.CallOpts, operator, arrayIndex)
}

// OperatorWhitelistedContractsLinkedListEntry is a free data retrieval call binding the contract method 0x855fcc4a.
//
// Solidity: function operatorWhitelistedContractsLinkedListEntry(address operator, address node) view returns(bool, uint256, uint256)
func (_ContractSlasher *ContractSlasherCaller) OperatorWhitelistedContractsLinkedListEntry(opts *bind.CallOpts, operator common.Address, node common.Address) (bool, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "operatorWhitelistedContractsLinkedListEntry", operator, node)

	if err != nil {
		return *new(bool), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// OperatorWhitelistedContractsLinkedListEntry is a free data retrieval call binding the contract method 0x855fcc4a.
//
// Solidity: function operatorWhitelistedContractsLinkedListEntry(address operator, address node) view returns(bool, uint256, uint256)
func (_ContractSlasher *ContractSlasherSession) OperatorWhitelistedContractsLinkedListEntry(operator common.Address, node common.Address) (bool, *big.Int, *big.Int, error) {
	return _ContractSlasher.Contract.OperatorWhitelistedContractsLinkedListEntry(&_ContractSlasher.CallOpts, operator, node)
}

// OperatorWhitelistedContractsLinkedListEntry is a free data retrieval call binding the contract method 0x855fcc4a.
//
// Solidity: function operatorWhitelistedContractsLinkedListEntry(address operator, address node) view returns(bool, uint256, uint256)
func (_ContractSlasher *ContractSlasherCallerSession) OperatorWhitelistedContractsLinkedListEntry(operator common.Address, node common.Address) (bool, *big.Int, *big.Int, error) {
	return _ContractSlasher.Contract.OperatorWhitelistedContractsLinkedListEntry(&_ContractSlasher.CallOpts, operator, node)
}

// OperatorWhitelistedContractsLinkedListSize is a free data retrieval call binding the contract method 0xe921d4fa.
//
// Solidity: function operatorWhitelistedContractsLinkedListSize(address operator) view returns(uint256)
func (_ContractSlasher *ContractSlasherCaller) OperatorWhitelistedContractsLinkedListSize(opts *bind.CallOpts, operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "operatorWhitelistedContractsLinkedListSize", operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OperatorWhitelistedContractsLinkedListSize is a free data retrieval call binding the contract method 0xe921d4fa.
//
// Solidity: function operatorWhitelistedContractsLinkedListSize(address operator) view returns(uint256)
func (_ContractSlasher *ContractSlasherSession) OperatorWhitelistedContractsLinkedListSize(operator common.Address) (*big.Int, error) {
	return _ContractSlasher.Contract.OperatorWhitelistedContractsLinkedListSize(&_ContractSlasher.CallOpts, operator)
}

// OperatorWhitelistedContractsLinkedListSize is a free data retrieval call binding the contract method 0xe921d4fa.
//
// Solidity: function operatorWhitelistedContractsLinkedListSize(address operator) view returns(uint256)
func (_ContractSlasher *ContractSlasherCallerSession) OperatorWhitelistedContractsLinkedListSize(operator common.Address) (*big.Int, error) {
	return _ContractSlasher.Contract.OperatorWhitelistedContractsLinkedListSize(&_ContractSlasher.CallOpts, operator)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractSlasher *ContractSlasherCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractSlasher *ContractSlasherSession) Owner() (common.Address, error) {
	return _ContractSlasher.Contract.Owner(&_ContractSlasher.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractSlasher *ContractSlasherCallerSession) Owner() (common.Address, error) {
	return _ContractSlasher.Contract.Owner(&_ContractSlasher.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractSlasher *ContractSlasherCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractSlasher *ContractSlasherSession) Paused(index uint8) (bool, error) {
	return _ContractSlasher.Contract.Paused(&_ContractSlasher.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractSlasher *ContractSlasherCallerSession) Paused(index uint8) (bool, error) {
	return _ContractSlasher.Contract.Paused(&_ContractSlasher.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractSlasher *ContractSlasherCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractSlasher *ContractSlasherSession) Paused0() (*big.Int, error) {
	return _ContractSlasher.Contract.Paused0(&_ContractSlasher.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractSlasher *ContractSlasherCallerSession) Paused0() (*big.Int, error) {
	return _ContractSlasher.Contract.Paused0(&_ContractSlasher.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractSlasher *ContractSlasherCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractSlasher *ContractSlasherSession) PauserRegistry() (common.Address, error) {
	return _ContractSlasher.Contract.PauserRegistry(&_ContractSlasher.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractSlasher *ContractSlasherCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractSlasher.Contract.PauserRegistry(&_ContractSlasher.CallOpts)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_ContractSlasher *ContractSlasherCaller) StrategyManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "strategyManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_ContractSlasher *ContractSlasherSession) StrategyManager() (common.Address, error) {
	return _ContractSlasher.Contract.StrategyManager(&_ContractSlasher.CallOpts)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_ContractSlasher *ContractSlasherCallerSession) StrategyManager() (common.Address, error) {
	return _ContractSlasher.Contract.StrategyManager(&_ContractSlasher.CallOpts)
}

// WhitelistedContractDetails is a free data retrieval call binding the contract method 0xd7b7fa13.
//
// Solidity: function whitelistedContractDetails(address operator, address serviceContract) view returns((uint32,uint32,uint32))
func (_ContractSlasher *ContractSlasherCaller) WhitelistedContractDetails(opts *bind.CallOpts, operator common.Address, serviceContract common.Address) (ISlasherMiddlewareDetails, error) {
	var out []interface{}
	err := _ContractSlasher.contract.Call(opts, &out, "whitelistedContractDetails", operator, serviceContract)

	if err != nil {
		return *new(ISlasherMiddlewareDetails), err
	}

	out0 := *abi.ConvertType(out[0], new(ISlasherMiddlewareDetails)).(*ISlasherMiddlewareDetails)

	return out0, err

}

// WhitelistedContractDetails is a free data retrieval call binding the contract method 0xd7b7fa13.
//
// Solidity: function whitelistedContractDetails(address operator, address serviceContract) view returns((uint32,uint32,uint32))
func (_ContractSlasher *ContractSlasherSession) WhitelistedContractDetails(operator common.Address, serviceContract common.Address) (ISlasherMiddlewareDetails, error) {
	return _ContractSlasher.Contract.WhitelistedContractDetails(&_ContractSlasher.CallOpts, operator, serviceContract)
}

// WhitelistedContractDetails is a free data retrieval call binding the contract method 0xd7b7fa13.
//
// Solidity: function whitelistedContractDetails(address operator, address serviceContract) view returns((uint32,uint32,uint32))
func (_ContractSlasher *ContractSlasherCallerSession) WhitelistedContractDetails(operator common.Address, serviceContract common.Address) (ISlasherMiddlewareDetails, error) {
	return _ContractSlasher.Contract.WhitelistedContractDetails(&_ContractSlasher.CallOpts, operator, serviceContract)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address toBeFrozen) returns()
func (_ContractSlasher *ContractSlasherTransactor) FreezeOperator(opts *bind.TransactOpts, toBeFrozen common.Address) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "freezeOperator", toBeFrozen)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address toBeFrozen) returns()
func (_ContractSlasher *ContractSlasherSession) FreezeOperator(toBeFrozen common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.FreezeOperator(&_ContractSlasher.TransactOpts, toBeFrozen)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address toBeFrozen) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) FreezeOperator(toBeFrozen common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.FreezeOperator(&_ContractSlasher.TransactOpts, toBeFrozen)
}

// Initialize is a paid mutator transaction binding the contract method 0x1794bb3c.
//
// Solidity: function initialize(address initialOwner, address _pauserRegistry, uint256 initialPausedStatus) returns()
func (_ContractSlasher *ContractSlasherTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address, _pauserRegistry common.Address, initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "initialize", initialOwner, _pauserRegistry, initialPausedStatus)
}

// Initialize is a paid mutator transaction binding the contract method 0x1794bb3c.
//
// Solidity: function initialize(address initialOwner, address _pauserRegistry, uint256 initialPausedStatus) returns()
func (_ContractSlasher *ContractSlasherSession) Initialize(initialOwner common.Address, _pauserRegistry common.Address, initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.Contract.Initialize(&_ContractSlasher.TransactOpts, initialOwner, _pauserRegistry, initialPausedStatus)
}

// Initialize is a paid mutator transaction binding the contract method 0x1794bb3c.
//
// Solidity: function initialize(address initialOwner, address _pauserRegistry, uint256 initialPausedStatus) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) Initialize(initialOwner common.Address, _pauserRegistry common.Address, initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.Contract.Initialize(&_ContractSlasher.TransactOpts, initialOwner, _pauserRegistry, initialPausedStatus)
}

// OptIntoSlashing is a paid mutator transaction binding the contract method 0xf73b7519.
//
// Solidity: function optIntoSlashing(address contractAddress) returns()
func (_ContractSlasher *ContractSlasherTransactor) OptIntoSlashing(opts *bind.TransactOpts, contractAddress common.Address) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "optIntoSlashing", contractAddress)
}

// OptIntoSlashing is a paid mutator transaction binding the contract method 0xf73b7519.
//
// Solidity: function optIntoSlashing(address contractAddress) returns()
func (_ContractSlasher *ContractSlasherSession) OptIntoSlashing(contractAddress common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.OptIntoSlashing(&_ContractSlasher.TransactOpts, contractAddress)
}

// OptIntoSlashing is a paid mutator transaction binding the contract method 0xf73b7519.
//
// Solidity: function optIntoSlashing(address contractAddress) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) OptIntoSlashing(contractAddress common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.OptIntoSlashing(&_ContractSlasher.TransactOpts, contractAddress)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractSlasher *ContractSlasherTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractSlasher *ContractSlasherSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.Contract.Pause(&_ContractSlasher.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.Contract.Pause(&_ContractSlasher.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractSlasher *ContractSlasherTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractSlasher *ContractSlasherSession) PauseAll() (*types.Transaction, error) {
	return _ContractSlasher.Contract.PauseAll(&_ContractSlasher.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractSlasher *ContractSlasherTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractSlasher.Contract.PauseAll(&_ContractSlasher.TransactOpts)
}

// RecordFirstStakeUpdate is a paid mutator transaction binding the contract method 0x175d3205.
//
// Solidity: function recordFirstStakeUpdate(address operator, uint32 serveUntilBlock) returns()
func (_ContractSlasher *ContractSlasherTransactor) RecordFirstStakeUpdate(opts *bind.TransactOpts, operator common.Address, serveUntilBlock uint32) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "recordFirstStakeUpdate", operator, serveUntilBlock)
}

// RecordFirstStakeUpdate is a paid mutator transaction binding the contract method 0x175d3205.
//
// Solidity: function recordFirstStakeUpdate(address operator, uint32 serveUntilBlock) returns()
func (_ContractSlasher *ContractSlasherSession) RecordFirstStakeUpdate(operator common.Address, serveUntilBlock uint32) (*types.Transaction, error) {
	return _ContractSlasher.Contract.RecordFirstStakeUpdate(&_ContractSlasher.TransactOpts, operator, serveUntilBlock)
}

// RecordFirstStakeUpdate is a paid mutator transaction binding the contract method 0x175d3205.
//
// Solidity: function recordFirstStakeUpdate(address operator, uint32 serveUntilBlock) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) RecordFirstStakeUpdate(operator common.Address, serveUntilBlock uint32) (*types.Transaction, error) {
	return _ContractSlasher.Contract.RecordFirstStakeUpdate(&_ContractSlasher.TransactOpts, operator, serveUntilBlock)
}

// RecordLastStakeUpdateAndRevokeSlashingAbility is a paid mutator transaction binding the contract method 0x0ffabbce.
//
// Solidity: function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilBlock) returns()
func (_ContractSlasher *ContractSlasherTransactor) RecordLastStakeUpdateAndRevokeSlashingAbility(opts *bind.TransactOpts, operator common.Address, serveUntilBlock uint32) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "recordLastStakeUpdateAndRevokeSlashingAbility", operator, serveUntilBlock)
}

// RecordLastStakeUpdateAndRevokeSlashingAbility is a paid mutator transaction binding the contract method 0x0ffabbce.
//
// Solidity: function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilBlock) returns()
func (_ContractSlasher *ContractSlasherSession) RecordLastStakeUpdateAndRevokeSlashingAbility(operator common.Address, serveUntilBlock uint32) (*types.Transaction, error) {
	return _ContractSlasher.Contract.RecordLastStakeUpdateAndRevokeSlashingAbility(&_ContractSlasher.TransactOpts, operator, serveUntilBlock)
}

// RecordLastStakeUpdateAndRevokeSlashingAbility is a paid mutator transaction binding the contract method 0x0ffabbce.
//
// Solidity: function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilBlock) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) RecordLastStakeUpdateAndRevokeSlashingAbility(operator common.Address, serveUntilBlock uint32) (*types.Transaction, error) {
	return _ContractSlasher.Contract.RecordLastStakeUpdateAndRevokeSlashingAbility(&_ContractSlasher.TransactOpts, operator, serveUntilBlock)
}

// RecordStakeUpdate is a paid mutator transaction binding the contract method 0xc747075b.
//
// Solidity: function recordStakeUpdate(address operator, uint32 updateBlock, uint32 serveUntilBlock, uint256 insertAfter) returns()
func (_ContractSlasher *ContractSlasherTransactor) RecordStakeUpdate(opts *bind.TransactOpts, operator common.Address, updateBlock uint32, serveUntilBlock uint32, insertAfter *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "recordStakeUpdate", operator, updateBlock, serveUntilBlock, insertAfter)
}

// RecordStakeUpdate is a paid mutator transaction binding the contract method 0xc747075b.
//
// Solidity: function recordStakeUpdate(address operator, uint32 updateBlock, uint32 serveUntilBlock, uint256 insertAfter) returns()
func (_ContractSlasher *ContractSlasherSession) RecordStakeUpdate(operator common.Address, updateBlock uint32, serveUntilBlock uint32, insertAfter *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.Contract.RecordStakeUpdate(&_ContractSlasher.TransactOpts, operator, updateBlock, serveUntilBlock, insertAfter)
}

// RecordStakeUpdate is a paid mutator transaction binding the contract method 0xc747075b.
//
// Solidity: function recordStakeUpdate(address operator, uint32 updateBlock, uint32 serveUntilBlock, uint256 insertAfter) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) RecordStakeUpdate(operator common.Address, updateBlock uint32, serveUntilBlock uint32, insertAfter *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.Contract.RecordStakeUpdate(&_ContractSlasher.TransactOpts, operator, updateBlock, serveUntilBlock, insertAfter)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractSlasher *ContractSlasherTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractSlasher *ContractSlasherSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractSlasher.Contract.RenounceOwnership(&_ContractSlasher.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractSlasher *ContractSlasherTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractSlasher.Contract.RenounceOwnership(&_ContractSlasher.TransactOpts)
}

// ResetFrozenStatus is a paid mutator transaction binding the contract method 0x7cf72bba.
//
// Solidity: function resetFrozenStatus(address[] frozenAddresses) returns()
func (_ContractSlasher *ContractSlasherTransactor) ResetFrozenStatus(opts *bind.TransactOpts, frozenAddresses []common.Address) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "resetFrozenStatus", frozenAddresses)
}

// ResetFrozenStatus is a paid mutator transaction binding the contract method 0x7cf72bba.
//
// Solidity: function resetFrozenStatus(address[] frozenAddresses) returns()
func (_ContractSlasher *ContractSlasherSession) ResetFrozenStatus(frozenAddresses []common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.ResetFrozenStatus(&_ContractSlasher.TransactOpts, frozenAddresses)
}

// ResetFrozenStatus is a paid mutator transaction binding the contract method 0x7cf72bba.
//
// Solidity: function resetFrozenStatus(address[] frozenAddresses) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) ResetFrozenStatus(frozenAddresses []common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.ResetFrozenStatus(&_ContractSlasher.TransactOpts, frozenAddresses)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractSlasher *ContractSlasherTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractSlasher *ContractSlasherSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.SetPauserRegistry(&_ContractSlasher.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.SetPauserRegistry(&_ContractSlasher.TransactOpts, newPauserRegistry)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractSlasher *ContractSlasherTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractSlasher *ContractSlasherSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.TransferOwnership(&_ContractSlasher.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractSlasher.Contract.TransferOwnership(&_ContractSlasher.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractSlasher *ContractSlasherTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractSlasher *ContractSlasherSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.Contract.Unpause(&_ContractSlasher.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractSlasher *ContractSlasherTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractSlasher.Contract.Unpause(&_ContractSlasher.TransactOpts, newPausedStatus)
}

// ContractSlasherFrozenStatusResetIterator is returned from FilterFrozenStatusReset and is used to iterate over the raw logs and unpacked data for FrozenStatusReset events raised by the ContractSlasher contract.
type ContractSlasherFrozenStatusResetIterator struct {
	Event *ContractSlasherFrozenStatusReset // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherFrozenStatusResetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherFrozenStatusReset)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherFrozenStatusReset)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherFrozenStatusResetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherFrozenStatusResetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherFrozenStatusReset represents a FrozenStatusReset event raised by the ContractSlasher contract.
type ContractSlasherFrozenStatusReset struct {
	PreviouslySlashedAddress common.Address
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterFrozenStatusReset is a free log retrieval operation binding the contract event 0xd4cef0af27800d466fcacd85779857378b85cb61569005ff1464fa6e5ced69d8.
//
// Solidity: event FrozenStatusReset(address indexed previouslySlashedAddress)
func (_ContractSlasher *ContractSlasherFilterer) FilterFrozenStatusReset(opts *bind.FilterOpts, previouslySlashedAddress []common.Address) (*ContractSlasherFrozenStatusResetIterator, error) {

	var previouslySlashedAddressRule []interface{}
	for _, previouslySlashedAddressItem := range previouslySlashedAddress {
		previouslySlashedAddressRule = append(previouslySlashedAddressRule, previouslySlashedAddressItem)
	}

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "FrozenStatusReset", previouslySlashedAddressRule)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherFrozenStatusResetIterator{contract: _ContractSlasher.contract, event: "FrozenStatusReset", logs: logs, sub: sub}, nil
}

// WatchFrozenStatusReset is a free log subscription operation binding the contract event 0xd4cef0af27800d466fcacd85779857378b85cb61569005ff1464fa6e5ced69d8.
//
// Solidity: event FrozenStatusReset(address indexed previouslySlashedAddress)
func (_ContractSlasher *ContractSlasherFilterer) WatchFrozenStatusReset(opts *bind.WatchOpts, sink chan<- *ContractSlasherFrozenStatusReset, previouslySlashedAddress []common.Address) (event.Subscription, error) {

	var previouslySlashedAddressRule []interface{}
	for _, previouslySlashedAddressItem := range previouslySlashedAddress {
		previouslySlashedAddressRule = append(previouslySlashedAddressRule, previouslySlashedAddressItem)
	}

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "FrozenStatusReset", previouslySlashedAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherFrozenStatusReset)
				if err := _ContractSlasher.contract.UnpackLog(event, "FrozenStatusReset", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFrozenStatusReset is a log parse operation binding the contract event 0xd4cef0af27800d466fcacd85779857378b85cb61569005ff1464fa6e5ced69d8.
//
// Solidity: event FrozenStatusReset(address indexed previouslySlashedAddress)
func (_ContractSlasher *ContractSlasherFilterer) ParseFrozenStatusReset(log types.Log) (*ContractSlasherFrozenStatusReset, error) {
	event := new(ContractSlasherFrozenStatusReset)
	if err := _ContractSlasher.contract.UnpackLog(event, "FrozenStatusReset", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSlasherInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractSlasher contract.
type ContractSlasherInitializedIterator struct {
	Event *ContractSlasherInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherInitialized represents a Initialized event raised by the ContractSlasher contract.
type ContractSlasherInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractSlasher *ContractSlasherFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractSlasherInitializedIterator, error) {

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractSlasherInitializedIterator{contract: _ContractSlasher.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractSlasher *ContractSlasherFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractSlasherInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherInitialized)
				if err := _ContractSlasher.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractSlasher *ContractSlasherFilterer) ParseInitialized(log types.Log) (*ContractSlasherInitialized, error) {
	event := new(ContractSlasherInitialized)
	if err := _ContractSlasher.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSlasherMiddlewareTimesAddedIterator is returned from FilterMiddlewareTimesAdded and is used to iterate over the raw logs and unpacked data for MiddlewareTimesAdded events raised by the ContractSlasher contract.
type ContractSlasherMiddlewareTimesAddedIterator struct {
	Event *ContractSlasherMiddlewareTimesAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherMiddlewareTimesAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherMiddlewareTimesAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherMiddlewareTimesAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherMiddlewareTimesAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherMiddlewareTimesAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherMiddlewareTimesAdded represents a MiddlewareTimesAdded event raised by the ContractSlasher contract.
type ContractSlasherMiddlewareTimesAdded struct {
	Operator              common.Address
	Index                 *big.Int
	StalestUpdateBlock    uint32
	LatestServeUntilBlock uint32
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterMiddlewareTimesAdded is a free log retrieval operation binding the contract event 0x1b62ba64c72d01e41a2b8c46e6aeeff728ef3a4438cf1cac3d92ee12189d5649.
//
// Solidity: event MiddlewareTimesAdded(address operator, uint256 index, uint32 stalestUpdateBlock, uint32 latestServeUntilBlock)
func (_ContractSlasher *ContractSlasherFilterer) FilterMiddlewareTimesAdded(opts *bind.FilterOpts) (*ContractSlasherMiddlewareTimesAddedIterator, error) {

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "MiddlewareTimesAdded")
	if err != nil {
		return nil, err
	}
	return &ContractSlasherMiddlewareTimesAddedIterator{contract: _ContractSlasher.contract, event: "MiddlewareTimesAdded", logs: logs, sub: sub}, nil
}

// WatchMiddlewareTimesAdded is a free log subscription operation binding the contract event 0x1b62ba64c72d01e41a2b8c46e6aeeff728ef3a4438cf1cac3d92ee12189d5649.
//
// Solidity: event MiddlewareTimesAdded(address operator, uint256 index, uint32 stalestUpdateBlock, uint32 latestServeUntilBlock)
func (_ContractSlasher *ContractSlasherFilterer) WatchMiddlewareTimesAdded(opts *bind.WatchOpts, sink chan<- *ContractSlasherMiddlewareTimesAdded) (event.Subscription, error) {

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "MiddlewareTimesAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherMiddlewareTimesAdded)
				if err := _ContractSlasher.contract.UnpackLog(event, "MiddlewareTimesAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMiddlewareTimesAdded is a log parse operation binding the contract event 0x1b62ba64c72d01e41a2b8c46e6aeeff728ef3a4438cf1cac3d92ee12189d5649.
//
// Solidity: event MiddlewareTimesAdded(address operator, uint256 index, uint32 stalestUpdateBlock, uint32 latestServeUntilBlock)
func (_ContractSlasher *ContractSlasherFilterer) ParseMiddlewareTimesAdded(log types.Log) (*ContractSlasherMiddlewareTimesAdded, error) {
	event := new(ContractSlasherMiddlewareTimesAdded)
	if err := _ContractSlasher.contract.UnpackLog(event, "MiddlewareTimesAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSlasherOperatorFrozenIterator is returned from FilterOperatorFrozen and is used to iterate over the raw logs and unpacked data for OperatorFrozen events raised by the ContractSlasher contract.
type ContractSlasherOperatorFrozenIterator struct {
	Event *ContractSlasherOperatorFrozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherOperatorFrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherOperatorFrozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherOperatorFrozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherOperatorFrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherOperatorFrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherOperatorFrozen represents a OperatorFrozen event raised by the ContractSlasher contract.
type ContractSlasherOperatorFrozen struct {
	SlashedOperator  common.Address
	SlashingContract common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterOperatorFrozen is a free log retrieval operation binding the contract event 0x444a84f512816ae7be8ed8a66aa88e362eb54d0988e83acc9d81746622b3ba51.
//
// Solidity: event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract)
func (_ContractSlasher *ContractSlasherFilterer) FilterOperatorFrozen(opts *bind.FilterOpts, slashedOperator []common.Address, slashingContract []common.Address) (*ContractSlasherOperatorFrozenIterator, error) {

	var slashedOperatorRule []interface{}
	for _, slashedOperatorItem := range slashedOperator {
		slashedOperatorRule = append(slashedOperatorRule, slashedOperatorItem)
	}
	var slashingContractRule []interface{}
	for _, slashingContractItem := range slashingContract {
		slashingContractRule = append(slashingContractRule, slashingContractItem)
	}

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "OperatorFrozen", slashedOperatorRule, slashingContractRule)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherOperatorFrozenIterator{contract: _ContractSlasher.contract, event: "OperatorFrozen", logs: logs, sub: sub}, nil
}

// WatchOperatorFrozen is a free log subscription operation binding the contract event 0x444a84f512816ae7be8ed8a66aa88e362eb54d0988e83acc9d81746622b3ba51.
//
// Solidity: event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract)
func (_ContractSlasher *ContractSlasherFilterer) WatchOperatorFrozen(opts *bind.WatchOpts, sink chan<- *ContractSlasherOperatorFrozen, slashedOperator []common.Address, slashingContract []common.Address) (event.Subscription, error) {

	var slashedOperatorRule []interface{}
	for _, slashedOperatorItem := range slashedOperator {
		slashedOperatorRule = append(slashedOperatorRule, slashedOperatorItem)
	}
	var slashingContractRule []interface{}
	for _, slashingContractItem := range slashingContract {
		slashingContractRule = append(slashingContractRule, slashingContractItem)
	}

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "OperatorFrozen", slashedOperatorRule, slashingContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherOperatorFrozen)
				if err := _ContractSlasher.contract.UnpackLog(event, "OperatorFrozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorFrozen is a log parse operation binding the contract event 0x444a84f512816ae7be8ed8a66aa88e362eb54d0988e83acc9d81746622b3ba51.
//
// Solidity: event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract)
func (_ContractSlasher *ContractSlasherFilterer) ParseOperatorFrozen(log types.Log) (*ContractSlasherOperatorFrozen, error) {
	event := new(ContractSlasherOperatorFrozen)
	if err := _ContractSlasher.contract.UnpackLog(event, "OperatorFrozen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSlasherOptedIntoSlashingIterator is returned from FilterOptedIntoSlashing and is used to iterate over the raw logs and unpacked data for OptedIntoSlashing events raised by the ContractSlasher contract.
type ContractSlasherOptedIntoSlashingIterator struct {
	Event *ContractSlasherOptedIntoSlashing // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherOptedIntoSlashingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherOptedIntoSlashing)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherOptedIntoSlashing)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherOptedIntoSlashingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherOptedIntoSlashingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherOptedIntoSlashing represents a OptedIntoSlashing event raised by the ContractSlasher contract.
type ContractSlasherOptedIntoSlashing struct {
	Operator        common.Address
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOptedIntoSlashing is a free log retrieval operation binding the contract event 0xefa9fb38e813d53c15edf501e03852843a3fed691960523391d71a092b3627d8.
//
// Solidity: event OptedIntoSlashing(address indexed operator, address indexed contractAddress)
func (_ContractSlasher *ContractSlasherFilterer) FilterOptedIntoSlashing(opts *bind.FilterOpts, operator []common.Address, contractAddress []common.Address) (*ContractSlasherOptedIntoSlashingIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "OptedIntoSlashing", operatorRule, contractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherOptedIntoSlashingIterator{contract: _ContractSlasher.contract, event: "OptedIntoSlashing", logs: logs, sub: sub}, nil
}

// WatchOptedIntoSlashing is a free log subscription operation binding the contract event 0xefa9fb38e813d53c15edf501e03852843a3fed691960523391d71a092b3627d8.
//
// Solidity: event OptedIntoSlashing(address indexed operator, address indexed contractAddress)
func (_ContractSlasher *ContractSlasherFilterer) WatchOptedIntoSlashing(opts *bind.WatchOpts, sink chan<- *ContractSlasherOptedIntoSlashing, operator []common.Address, contractAddress []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "OptedIntoSlashing", operatorRule, contractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherOptedIntoSlashing)
				if err := _ContractSlasher.contract.UnpackLog(event, "OptedIntoSlashing", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOptedIntoSlashing is a log parse operation binding the contract event 0xefa9fb38e813d53c15edf501e03852843a3fed691960523391d71a092b3627d8.
//
// Solidity: event OptedIntoSlashing(address indexed operator, address indexed contractAddress)
func (_ContractSlasher *ContractSlasherFilterer) ParseOptedIntoSlashing(log types.Log) (*ContractSlasherOptedIntoSlashing, error) {
	event := new(ContractSlasherOptedIntoSlashing)
	if err := _ContractSlasher.contract.UnpackLog(event, "OptedIntoSlashing", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSlasherOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractSlasher contract.
type ContractSlasherOwnershipTransferredIterator struct {
	Event *ContractSlasherOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherOwnershipTransferred represents a OwnershipTransferred event raised by the ContractSlasher contract.
type ContractSlasherOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractSlasher *ContractSlasherFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractSlasherOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherOwnershipTransferredIterator{contract: _ContractSlasher.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractSlasher *ContractSlasherFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractSlasherOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherOwnershipTransferred)
				if err := _ContractSlasher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractSlasher *ContractSlasherFilterer) ParseOwnershipTransferred(log types.Log) (*ContractSlasherOwnershipTransferred, error) {
	event := new(ContractSlasherOwnershipTransferred)
	if err := _ContractSlasher.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSlasherPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractSlasher contract.
type ContractSlasherPausedIterator struct {
	Event *ContractSlasherPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherPaused represents a Paused event raised by the ContractSlasher contract.
type ContractSlasherPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractSlasher *ContractSlasherFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractSlasherPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherPausedIterator{contract: _ContractSlasher.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractSlasher *ContractSlasherFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractSlasherPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherPaused)
				if err := _ContractSlasher.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractSlasher *ContractSlasherFilterer) ParsePaused(log types.Log) (*ContractSlasherPaused, error) {
	event := new(ContractSlasherPaused)
	if err := _ContractSlasher.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSlasherPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractSlasher contract.
type ContractSlasherPauserRegistrySetIterator struct {
	Event *ContractSlasherPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherPauserRegistrySet represents a PauserRegistrySet event raised by the ContractSlasher contract.
type ContractSlasherPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractSlasher *ContractSlasherFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractSlasherPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractSlasherPauserRegistrySetIterator{contract: _ContractSlasher.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractSlasher *ContractSlasherFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractSlasherPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherPauserRegistrySet)
				if err := _ContractSlasher.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractSlasher *ContractSlasherFilterer) ParsePauserRegistrySet(log types.Log) (*ContractSlasherPauserRegistrySet, error) {
	event := new(ContractSlasherPauserRegistrySet)
	if err := _ContractSlasher.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSlasherSlashingAbilityRevokedIterator is returned from FilterSlashingAbilityRevoked and is used to iterate over the raw logs and unpacked data for SlashingAbilityRevoked events raised by the ContractSlasher contract.
type ContractSlasherSlashingAbilityRevokedIterator struct {
	Event *ContractSlasherSlashingAbilityRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherSlashingAbilityRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherSlashingAbilityRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherSlashingAbilityRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherSlashingAbilityRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherSlashingAbilityRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherSlashingAbilityRevoked represents a SlashingAbilityRevoked event raised by the ContractSlasher contract.
type ContractSlasherSlashingAbilityRevoked struct {
	Operator                           common.Address
	ContractAddress                    common.Address
	ContractCanSlashOperatorUntilBlock uint32
	Raw                                types.Log // Blockchain specific contextual infos
}

// FilterSlashingAbilityRevoked is a free log retrieval operation binding the contract event 0x9aa1b1391f35c672ed1f3b7ece632f4513e618366bef7a2f67b7c6bc1f2d2b14.
//
// Solidity: event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilBlock)
func (_ContractSlasher *ContractSlasherFilterer) FilterSlashingAbilityRevoked(opts *bind.FilterOpts, operator []common.Address, contractAddress []common.Address) (*ContractSlasherSlashingAbilityRevokedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "SlashingAbilityRevoked", operatorRule, contractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherSlashingAbilityRevokedIterator{contract: _ContractSlasher.contract, event: "SlashingAbilityRevoked", logs: logs, sub: sub}, nil
}

// WatchSlashingAbilityRevoked is a free log subscription operation binding the contract event 0x9aa1b1391f35c672ed1f3b7ece632f4513e618366bef7a2f67b7c6bc1f2d2b14.
//
// Solidity: event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilBlock)
func (_ContractSlasher *ContractSlasherFilterer) WatchSlashingAbilityRevoked(opts *bind.WatchOpts, sink chan<- *ContractSlasherSlashingAbilityRevoked, operator []common.Address, contractAddress []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "SlashingAbilityRevoked", operatorRule, contractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherSlashingAbilityRevoked)
				if err := _ContractSlasher.contract.UnpackLog(event, "SlashingAbilityRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashingAbilityRevoked is a log parse operation binding the contract event 0x9aa1b1391f35c672ed1f3b7ece632f4513e618366bef7a2f67b7c6bc1f2d2b14.
//
// Solidity: event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilBlock)
func (_ContractSlasher *ContractSlasherFilterer) ParseSlashingAbilityRevoked(log types.Log) (*ContractSlasherSlashingAbilityRevoked, error) {
	event := new(ContractSlasherSlashingAbilityRevoked)
	if err := _ContractSlasher.contract.UnpackLog(event, "SlashingAbilityRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSlasherUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractSlasher contract.
type ContractSlasherUnpausedIterator struct {
	Event *ContractSlasherUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSlasherUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSlasherUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSlasherUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSlasherUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSlasherUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSlasherUnpaused represents a Unpaused event raised by the ContractSlasher contract.
type ContractSlasherUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractSlasher *ContractSlasherFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractSlasherUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractSlasher.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractSlasherUnpausedIterator{contract: _ContractSlasher.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractSlasher *ContractSlasherFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractSlasherUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractSlasher.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSlasherUnpaused)
				if err := _ContractSlasher.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractSlasher *ContractSlasherFilterer) ParseUnpaused(log types.Log) (*ContractSlasherUnpaused, error) {
	event := new(ContractSlasherUnpaused)
	if err := _ContractSlasher.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
