// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractECDSARegistryCoordinator

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ECDSARegistryCoordinatorECDSAPubkeyRegistrationParams is an auto generated low-level Go binding around an user-defined struct.
type ECDSARegistryCoordinatorECDSAPubkeyRegistrationParams struct {
	SigningAddress     common.Address
	SignatureAndExpiry ISignatureUtilsSignatureWithSaltAndExpiry
}

// ECDSARegistryCoordinatorOperatorInfo is an auto generated low-level Go binding around an user-defined struct.
type ECDSARegistryCoordinatorOperatorInfo struct {
	OperatorId common.Address
	Status     uint8
}

// ECDSARegistryCoordinatorQuorumBitmapUpdate is an auto generated low-level Go binding around an user-defined struct.
type ECDSARegistryCoordinatorQuorumBitmapUpdate struct {
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
	QuorumBitmap          *big.Int
}

// ECDSAStakeRegistryStrategyParams is an auto generated low-level Go binding around an user-defined struct.
type ECDSAStakeRegistryStrategyParams struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// ContractECDSARegistryCoordinatorMetaData contains all meta data concerning the ContractECDSARegistryCoordinator contract.
var ContractECDSARegistryCoordinatorMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_serviceManager\",\"type\":\"address\",\"internalType\":\"contractIServiceManager\"},{\"name\":\"_stakeRegistry\",\"type\":\"address\",\"internalType\":\"contractECDSAStakeRegistry\"},{\"name\":\"_indexRegistry\",\"type\":\"address\",\"internalType\":\"contractECDSAIndexRegistry\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"PUBKEY_REGISTRATION_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"createQuorum\",\"inputs\":[{\"name\":\"minimumStake\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"strategyParams\",\"type\":\"tuple[]\",\"internalType\":\"structECDSAStakeRegistry.StrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deregisterOperator\",\"inputs\":[{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ejectOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ejector\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentQuorumBitmap\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint192\",\"internalType\":\"uint192\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structECDSARegistryCoordinator.OperatorInfo\",\"components\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enumECDSARegistryCoordinator.OperatorStatus\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorFromId\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorId\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorStatus\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumECDSARegistryCoordinator.OperatorStatus\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getQuorumBitmapAtBlockNumberByIndex\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint192\",\"internalType\":\"uint192\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getQuorumBitmapHistoryLength\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getQuorumBitmapIndicesAtBlockNumber\",\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"operatorIds\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getQuorumBitmapUpdateByIndex\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structECDSARegistryCoordinator.QuorumBitmapUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumBitmap\",\"type\":\"uint192\",\"internalType\":\"uint192\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"indexRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractECDSAIndexRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_initialOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_ejector\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_pauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"_initialPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_minimumStakes\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"_strategyParams\",\"type\":\"tuple[][]\",\"internalType\":\"structECDSAStakeRegistry.StrategyParams[][]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pubkeyRegistrationMessageHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"quorumCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"quorumUpdateBlockNumber\",\"inputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperator\",\"inputs\":[{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structECDSARegistryCoordinator.ECDSAPubkeyRegistrationParams\",\"components\":[{\"name\":\"signingAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"signatureAndExpiry\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]},{\"name\":\"operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"serviceManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIServiceManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setEjector\",\"inputs\":[{\"name\":\"_ejector\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stakeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractECDSAStakeRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateOperators\",\"inputs\":[{\"name\":\"operators\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateOperatorsForQuorum\",\"inputs\":[{\"name\":\"operatorsPerQuorum\",\"type\":\"address[][]\",\"internalType\":\"address[][]\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"EjectorUpdated\",\"inputs\":[{\"name\":\"prevEjector\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newEjector\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorDeregistered\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRegistered\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QuorumBlockNumberUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"blocknumber\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false}]",
	Bin: "0x6101a06040523480156200001257600080fd5b5060405162004b4938038062004b49833981016040819052620000359162000246565b604080518082018252601681527f4156535265676973747279436f6f7264696e61746f720000000000000000000060208083019182528351808501909452600684526576302e302e3160d01b908401528151902060e08190527f6bda7e3f385e48841048390444cced5cc795af87758af67622e5f4f0882c4a996101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6200012d8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c05261012052505050506001600160a01b038381166101405282811661016052811661018052620001626200016b565b5050506200029a565b600054610100900460ff1615620001d85760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156200022b576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200024357600080fd5b50565b6000806000606084860312156200025c57600080fd5b835162000269816200022d565b60208501519093506200027c816200022d565b60408501519092506200028f816200022d565b809150509250925092565b60805160a05160c05160e05161010051610120516101405161016051610180516147f8620003516000396000818161052c01528181610dca01528181611e16015281816123930152612a5a01526000818161042e01528181611adc01528181611d8d015281816122eb01526129dc0152600081816103180152818161223101526129300152600061312f0152600061317e01526000613159015260006130b2015260006130dc0152600061310601526147f86000f3fe608060405234801561001057600080fd5b50600436106102105760003560e01c80635c975abb116101255780638da5cb5b116100ad578063ca4f2d971161007c578063ca4f2d9714610575578063e4b312c014610588578063f2fde38b146105b1578063fabc1cbc146105c4578063fd39105a146105d757600080fd5b80638da5cb5b146105005780639aa1653d146105085780639e9923c2146105275780639feab8591461054e57600080fd5b80636e3b17db116100f45780636e3b17db14610499578063715018a6146104ac57806380080441146104b4578063828538cd146104d4578063886f1195146104e757600080fd5b80635c975abb146103f657806367c49936146103fe57806368304835146104295780636b389a0f1461045057600080fd5b80633596b242116101a85780635140a548116101775780635140a548146103605780635865c60c14610373578063595c6a67146103935780635ac86ab71461039b5780635c0ae784146103ca57600080fd5b80633596b242146103005780633998fdd3146103135780633c2a7f4c1461033a57806348d1da851461034d57600080fd5b8063231a5abb116101e4578063231a5abb14610299578063249a0c42146102ac57806328f61b31146102da5780632cdd1e86146102ed57600080fd5b8062cf2ab51461021557806310d67a2f1461022a57806313542a4e1461023d578063136439dd14610286575b600080fd5b6102286102233660046138c4565b610617565b005b61022861023836600461391a565b610733565b61026961024b36600461391a565b6001600160a01b039081166000908152609860205260409020541690565b6040516001600160a01b0390911681526020015b60405180910390f35b610228610294366004613937565b6107e6565b6102286102a7366004613abe565b61092a565b6102cc6102ba366004613b0d565b60996020526000908152604090205481565b60405190815260200161027d565b609b54610269906001600160a01b031681565b6102286102fb36600461391a565b610940565b61022861030e366004613c23565b610951565b6102697f000000000000000000000000000000000000000000000000000000000000000081565b6102cc61034836600461391a565b6109a0565b61022861035b366004613d70565b610a0b565b61022861036e366004613e73565b610c00565b61038661038136600461391a565b611188565b60405161027d9190613f16565b610228611203565b6103ba6103a9366004613b0d565b6001805460ff9092161b9081161490565b604051901515815260200161027d565b6102696103d836600461391a565b6001600160a01b039081166000908152609a60205260409020541690565b6001546102cc565b61041161040c36600461391a565b6112cf565b6040516001600160c01b03909116815260200161027d565b6102697f000000000000000000000000000000000000000000000000000000000000000081565b61046361045e366004613f41565b6112da565b60408051825163ffffffff908116825260208085015190911690820152918101516001600160c01b03169082015260600161027d565b6102286104a7366004613f6d565b611370565b610228611435565b6104c76104c2366004613fd3565b611449565b60405161027d9190614081565b6104116104e23660046140cb565b611502565b600054610269906201000090046001600160a01b031681565b610269611703565b6096546105159060ff1681565b60405160ff909116815260200161027d565b6102697f000000000000000000000000000000000000000000000000000000000000000081565b6102cc7f95815655292205725291827ed02ac675e9ede8811f9f15aa6699759297eb39ed81565b61022861058336600461410c565b61171c565b6102cc61059636600461391a565b6001600160a01b031660009081526097602052604090205490565b6102286105bf36600461391a565b611783565b6102286105d2366004613937565b6117f9565b61060a6105e536600461391a565b6001600160a01b0316600090815260986020526040902054600160a01b900460ff1690565b60405161027d9190614141565b600154600290600490811614156106495760405162461bcd60e51b81526004016106409061414f565b60405180910390fd5b60005b8281101561072d57600084848381811061066857610668614186565b905060200201602081019061067d919061391a565b6001600160a01b0381811660009081526098602090815260408083208151808301909252805494851682529495509193919290830190600160a01b900460ff1660028111156106ce576106ce613ede565b60028111156106df576106df613ede565b905250805190915060006106f282611955565b90506000610708826001600160c01b03166119d2565b9050610715858583611a9e565b50505050508080610725906141b2565b91505061064c565b50505050565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa91906141cd565b6001600160a01b0316336001600160a01b0316146107da5760405162461bcd60e51b8152600401610640906141ea565b6107e381611b82565b50565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa158015610833573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108579190614234565b6108735760405162461bcd60e51b815260040161064090614256565b600154818116146108ec5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c69747900000000000000006064820152608401610640565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b610932611c87565b61093c8282611ce6565b5050565b610948611c87565b6107e381611e78565b6001805460009190811614156109795760405162461bcd60e51b81526004016106409061414f565b60006109853385611ee1565b905060006109963383898988611f1b565b5050505050505050565b6000610a057f95815655292205725291827ed02ac675e9ede8811f9f15aa6699759297eb39ed836040516020016109ea9291909182526001600160a01b0316602082015260400190565b60405160208183030381529060405280519060200120612421565b92915050565b600054610100900460ff1615808015610a2b5750600054600160ff909116105b80610a455750303b158015610a45575060005460ff166001145b610aa85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610640565b6000805460ff191660011790558015610acb576000805461ff0019166101001790555b8151835114610b3a5760405162461bcd60e51b815260206004820152603560248201527f5265676973747279436f6f7264696e61746f722e696e697469616c697a653a206044820152740d2dce0eae840d8cadccee8d040dad2e6dac2e8c6d605b1b6064820152608401610640565b610b438761246f565b610b4d85856124c1565b610b5686611e78565b60005b8351811015610bb057610b9e848281518110610b7757610b77614186565b6020026020010151848381518110610b9157610b91614186565b6020026020010151611ce6565b80610ba8816141b2565b915050610b59565b508015610bf7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60015460029060049081161415610c295760405162461bcd60e51b81526004016106409061414f565b6000610c7184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060965460ff1691506125ad9050565b9050610c7c8161265f565b610cec5760405162461bcd60e51b8152602060048201526047602482015260008051602061476383398151915260448201527f6f7273466f7251756f72756d3a20736f6d652071756f72756d7320646f206e6f6064820152661d08195e1a5cdd60ca1b608482015260a401610640565b848314610d5b5760405162461bcd60e51b8152602060048201526043602482015260008051602061476383398151915260448201527f6f7273466f7251756f72756d3a20696e707574206c656e677468206d69736d616064820152620e8c6d60eb1b608482015260a401610640565b60005b83811015610bf7576000858583818110610d7a57610d7a614186565b919091013560f81c91503690506000898985818110610d9b57610d9b614186565b9050602002810190610dad919061429e565b6040516379a0849160e11b815260ff8616600482015291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f341092290602401602060405180830381865afa158015610e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3d91906142e7565b63ffffffff168114610ed95760405162461bcd60e51b8152602060048201526065602482015260008051602061476383398151915260448201527f6f7273466f7251756f72756d3a206e756d626572206f6620757064617465642060648201527f6f70657261746f727320646f6573206e6f74206d617463682071756f72756d206084820152641d1bdd185b60da1b60a482015260c401610640565b6000805b82811015611127576000848483818110610ef957610ef9614186565b9050602002016020810190610f0e919061391a565b6001600160a01b0381811660009081526098602090815260408083208151808301909252805494851682529495509193919290830190600160a01b900460ff166002811115610f5f57610f5f613ede565b6002811115610f7057610f70613ede565b90525080519091506000610f8382611955565b6001600160c01b03169050600160ff8a1682901c8116146110085760405162461bcd60e51b815260206004820152604460248201819052600080516020614763833981519152908201527f6f7273466f7251756f72756d3a206f70657261746f72206e6f7420696e2071756064820152636f72756d60e01b608482015260a401610640565b856001600160a01b0316846001600160a01b0316116110b35760405162461bcd60e51b8152602060048201526067602482015260008051602061476383398151915260448201527f6f7273466f7251756f72756d3a206f70657261746f7273206172726179206d7560648201527f737420626520736f7274656420696e20617363656e64696e6720616464726573608482015266399037b93232b960c91b60a482015260c401610640565b5061111183838f8f8d908e60016110ca9190614304565b926110d79392919061431c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a9e92505050565b509092506111209050816141b2565b9050610edd565b5060ff8416600081815260996020908152604091829020439081905591519182527f46077d55330763f16269fd75e5761663f4192d2791747c0189b16ad31db07db4910160405180910390a25050505080611181906141b2565b9050610d5e565b60408051808201909152600080825260208201526001600160a01b03828116600090815260986020908152604091829020825180840190935280549384168352919290830190600160a01b900460ff1660028111156111e9576111e9613ede565b60028111156111fa576111fa613ede565b90525092915050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112749190614234565b6112905760405162461bcd60e51b815260040161064090614256565b600019600181905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6000610a0582611955565b60408051606081018252600080825260208083018290528284018290526001600160a01b0386168252609790529190912080548390811061131d5761131d614186565b600091825260209182902060408051606081018252929091015463ffffffff808216845264010000000082041693830193909352600160401b9092046001600160c01b0316918101919091529392505050565b609b546001600160a01b031633146113f05760405162461bcd60e51b815260206004820152603a60248201527f5265676973747279436f6f7264696e61746f722e6f6e6c79456a6563746f723a60448201527f2063616c6c6572206973206e6f742074686520656a6563746f720000000000006064820152608401610640565b6114308383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061268f92505050565b505050565b61143d611c87565b611447600061246f565b565b6060600082516001600160401b038111156114665761146661396a565b60405190808252806020026020018201604052801561148f578160200160208202803683370190505b50905060005b83518110156114fa576114c1858583815181106114b4576114b4614186565b6020026020010151612ace565b8282815181106114d3576114d3614186565b63ffffffff90921660209283029190910190910152806114f2816141b2565b915050611495565b509392505050565b6001600160a01b038316600090815260976020526040812080548291908490811061152f5761152f614186565b600091825260209182902060408051606081018252929091015463ffffffff8082168085526401000000008304821695850195909552600160401b9091046001600160c01b0316918301919091529092508516101561162a5760405162461bcd60e51b815260206004820152606560248201527f5265676973747279436f6f7264696e61746f722e67657451756f72756d42697460448201527f6d61704174426c6f636b4e756d6265724279496e6465783a2071756f72756d4260648201527f69746d61705570646174652069732066726f6d20616674657220626c6f636b4e6084820152643ab6b132b960d91b60a482015260c401610640565b602081015163ffffffff1615806116505750806020015163ffffffff168463ffffffff16105b6116f75760405162461bcd60e51b815260206004820152606660248201527f5265676973747279436f6f7264696e61746f722e67657451756f72756d42697460448201527f6d61704174426c6f636b4e756d6265724279496e6465783a2071756f72756d4260648201527f69746d61705570646174652069732066726f6d206265666f726520626c6f636b608482015265273ab6b132b960d11b60a482015260c401610640565b60400151949350505050565b60006117176064546001600160a01b031690565b905090565b60018054600290811614156117435760405162461bcd60e51b81526004016106409061414f565b6114303384848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061268f92505050565b61178b611c87565b6001600160a01b0381166117f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610640565b6107e38161246f565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561184c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187091906141cd565b6001600160a01b0316336001600160a01b0316146118a05760405162461bcd60e51b8152600401610640906141ea565b60015419811960015419161461191e5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c69747900000000000000006064820152608401610640565b600181905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c9060200161091f565b6001600160a01b0381166000908152609760205260408120548061197c5750600092915050565b6001600160a01b038316600090815260976020526040902061199f600183614346565b815481106119af576119af614186565b600091825260209091200154600160401b90046001600160c01b03169392505050565b60606000806119e084612c19565b61ffff166001600160401b038111156119fb576119fb61396a565b6040519080825280601f01601f191660200182016040528015611a25576020820181803683370190505b5090506000805b825182108015611a3d575061010081105b15611a94576001811b935085841615611a84578060f81b838381518110611a6657611a66614186565b60200101906001600160f81b031916908160001a9053508160010191505b611a8d816141b2565b9050611a2c565b5090949350505050565b600182602001516002811115611ab657611ab6613ede565b14611ac057505050565b81516040516341bddc1760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063837bb82e90611b15908890869088906004016143aa565b6020604051808303816000875af1158015611b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5891906143df565b6001600160c01b031690508015611b7b57611b7b85611b76836119d2565b61268f565b5050505050565b6001600160a01b038116611c105760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a401610640565b600054604080516001600160a01b03620100009093048316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b33611c90611703565b6001600160a01b0316146114475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610640565b60965460ff1660c08110611d5a5760405162461bcd60e51b815260206004820152603560248201527f5265676973747279436f6f7264696e61746f722e63726561746551756f72756d6044820152740e881b585e081c5d5bdc9d5b5cc81c995858da1959605a1b6064820152608401610640565b611d65816001614408565b6096805460ff191660ff9290921691909117905560405160016296b58960e01b0319815281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ff694a7790611dce9084908890889060040161442d565b600060405180830381600087803b158015611de857600080fd5b505af1158015611dfc573d6000803e3d6000fd5b505060405163136ca0f960e11b815260ff841660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506326d941f29150602401600060405180830381600087803b158015611e6457600080fd5b505af1158015610996573d6000803e3d6000fd5b609b54604080516001600160a01b03928316815291831660208301527f8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9910160405180910390a1609b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038083166000908152609860205260409020541680610a0557611f148383611f0f866109a0565b612c44565b9392505050565b611f3f60405180606001604052806060815260200160608152602001606081525090565b6000611f8785858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060965460ff1691506125ad9050565b90506000611f9487611955565b90506001600160c01b0382166120125760405162461bcd60e51b815260206004820152603960248201527f5265676973747279436f6f7264696e61746f722e5f72656769737465724f706560448201527f7261746f723a206269746d61702063616e6e6f742062652030000000000000006064820152608401610640565b61201b8261265f565b61208f576040805162461bcd60e51b81526020600482015260248101919091527f5265676973747279436f6f7264696e61746f722e5f72656769737465724f706560448201527f7261746f723a20736f6d652071756f72756d7320646f206e6f742065786973746064820152608401610640565b8082166001600160c01b0316156121455760405162461bcd60e51b815260206004820152606860248201527f5265676973747279436f6f7264696e61746f722e5f72656769737465724f706560448201527f7261746f723a206f70657261746f7220616c726561647920726567697374657260648201527f656420666f7220736f6d652071756f72756d73206265696e672072656769737460848201526732b932b2103337b960c11b60a482015260c401610640565b6001600160c01b038181169083161761215e8882612ebb565b60016001600160a01b038a16600090815260986020526040902054600160a01b900460ff16600281111561219457612194613ede565b146122d457604080518082019091526001600160a01b038916815260208101600190526001600160a01b03808b1660009081526098602090815260409091208351815493166001600160a01b0319841681178255918401519092909183916001600160a81b03191617600160a01b83600281111561221457612214613ede565b021790555050604051639926ee7d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169150639926ee7d90612269908c9089906004016144ab565b600060405180830381600087803b15801561228357600080fd5b505af1158015612297573d6000803e3d6000fd5b50506040516001600160a01b03808c1693508c1691507fa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c190600090a35b60405163781c8f2d60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0391e5a90612326908c908c908c908c9060040161451f565b6000604051808303816000875af1158015612345573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261236d91908101906145ba565b604080870191909152602086019190915251631fd93ca960e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633fb27952906123cc908b908b908b90600401614613565b6000604051808303816000875af11580156123eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124139190810190614638565b845250505095945050505050565b6000610a0561242e6130a5565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b606480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546201000090046001600160a01b03161580156124e857506001600160a01b03821615155b61256a5760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a401610640565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a261093c82611b82565b6000806125b9846131cc565b90508015611f14578260ff1684600186516125d49190614346565b815181106125e4576125e4614186565b016020015160f81c10611f145760405162461bcd60e51b815260206004820152603f60248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206269746d61702065786365656473206d61782076616c7565006064820152608401610640565b60965460009081906126799060019060ff1681901b614346565b9050611f146001600160c01b0384168281161490565b6001600160a01b038083166000908152609860205260409020805490911660018254600160a01b900460ff1660028111156126cc576126cc613ede565b146127395760405162461bcd60e51b815260206004820152604360248201526000805160206147a383398151915260448201527f70657261746f723a206f70657261746f72206973206e6f7420726567697374656064820152621c995960ea1b608482015260a401610640565b60965460009061274d90859060ff166125ad565b9050600061275a83611955565b90506001600160c01b0382166127c65760405162461bcd60e51b815260206004820152603b60248201526000805160206147a383398151915260448201527f70657261746f723a206269746d61702063616e6e6f74206265203000000000006064820152608401610640565b6127cf8261265f565b61283a5760405162461bcd60e51b815260206004820152604260248201526000805160206147a383398151915260448201527f70657261746f723a20736f6d652071756f72756d7320646f206e6f74206578696064820152611cdd60f21b608482015260a401610640565b6128516001600160c01b0383811690831681161490565b6128d75760405162461bcd60e51b815260206004820152605960248201526000805160206147a383398151915260448201527f70657261746f723a206f70657261746f72206973206e6f74207265676973746560648201527f72656420666f72207370656369666965642071756f72756d7300000000000000608482015260a401610640565b6001600160c01b03828116198216166128f08482612ebb565b6001600160c01b0381166129c5578454600160a11b60ff60a01b199091161785556040516351b27a6d60e11b81526001600160a01b0388811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a364f4da90602401600060405180830381600087803b15801561297457600080fd5b505af1158015612988573d6000803e3d6000fd5b50506040516001600160a01b0380881693508a1691507f31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed58090600090a35b60405163f4e24fe560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f4e24fe590612a139087908a906004016146d1565b600060405180830381600087803b158015612a2d57600080fd5b505af1158015612a41573d6000803e3d6000fd5b505060405163f4e24fe560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063f4e24fe59150612a939087908a906004016146d1565b600060405180830381600087803b158015612aad57600080fd5b505af1158015612ac1573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b038116600090815260976020526040812054815b81811015612b6f576001612afd8284614346565b612b079190614346565b6001600160a01b0385166000908152609760205260409020805491945063ffffffff80881692908616908110612b3f57612b3f614186565b60009182526020909120015463ffffffff1611612b5d575050610a05565b80612b67816141b2565b915050612ae9565b5060405162461bcd60e51b815260206004820152606c60248201527f5265676973747279436f6f7264696e61746f722e67657451756f72756d42697460448201527f6d6170496e6465784174426c6f636b4e756d6265723a206e6f206269746d617060648201527f2075706461746520666f756e6420666f72206f70657261746f7249642061742060848201526b313637b1b590373ab6b132b960a11b60a482015260c401610640565b6000805b8215610a0557612c2e600184614346565b9092169180612c3c816146fd565b915050612c1d565b81516000906001600160a01b0316612cc85760405162461bcd60e51b815260206004820152604d602482015260008051602061478383398151915260448201527f657245434453415075626c69634b65793a2063616e6e6f74207265676973746560648201526c72207a65726f207075626b657960981b608482015260a401610640565b6001600160a01b038481166000908152609860205260409020541615612d615760405162461bcd60e51b8152602060048201526054602482015260008051602061478383398151915260448201527f657245434453415075626c69634b65793a206f70657261746f7220616c72656160648201527364792072656769737465726564207075626b657960601b608482015260a401610640565b5081516001600160a01b038082166000908152609a60205260409020541615612df85760405162461bcd60e51b815260206004820152604f602482015260008051602061478383398151915260448201527f657245434453415075626c69634b65793a207075626c6963206b657920616c7260648201526e1958591e481c9959da5cdd195c9959608a1b608482015260a401610640565b428360200151604001511015612e705760405162461bcd60e51b8152602060048201526043602482015260008051602061478383398151915260448201527f657245434453415075626c69634b65793a207369676e617475726520657870696064820152621c995960ea1b608482015260a401610640565b8251602084015151612e8491908490613359565b6001600160a01b038082166000908152609a6020526040902080549186166001600160a01b03199092169190911790559392505050565b6001600160a01b03821660009081526097602052604090205480612f75576001600160a01b0383166000908152609760209081526040808320815160608101835263ffffffff43811682528185018681526001600160c01b03808a16958401958652845460018101865594885295909620915191909201805495519351909416600160401b026001600160401b039383166401000000000267ffffffffffffffff1990961691909216179390931716919091179055505050565b6001600160a01b0383166000908152609760205260408120612f98600184614346565b81548110612fa857612fa8614186565b600091825260209091200180549091504363ffffffff90811691161415612fec5780546001600160401b0316600160401b6001600160c01b0385160217815561072d565b805463ffffffff43811664010000000081810267ffffffff00000000199094169390931784556001600160a01b038716600090815260976020908152604080832081516060810183529485528483018481526001600160c01b03808c1693870193845282546001810184559286529390942094519401805493519151909216600160401b026001600160401b0391861690960267ffffffffffffffff199093169390941692909217179190911691909117905550505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156130fe57507f000000000000000000000000000000000000000000000000000000000000000046145b1561312857507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000610100825111156132555760405162461bcd60e51b8152602060048201526044602482018190527f4269746d61705574696c732e6f72646572656442797465734172726179546f42908201527f69746d61703a206f7264657265644279746573417272617920697320746f6f206064820152636c6f6e6760e01b608482015260a401610640565b815161326357506000919050565b6000808360008151811061327957613279614186565b0160200151600160f89190911c81901b92505b8451811015613350578481815181106132a7576132a7614186565b0160200151600160f89190911c1b915082821161333c5760405162461bcd60e51b815260206004820152604760248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f72646572656442797465734172726179206973206e6f74206064820152661bdc99195c995960ca1b608482015260a401610640565b91811791613349816141b2565b905061328c565b50909392505050565b6001600160a01b0383163b1561347357604051630b135d3f60e11b808252906001600160a01b03851690631626ba7e90613399908690869060040161471f565b602060405180830381865afa1580156133b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133da9190614738565b6001600160e01b031916146114305760405162461bcd60e51b815260206004820152605360248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a2045524331323731207369676e6174757265206064820152721d995c9a599a58d85d1a5bdb8819985a5b1959606a1b608482015260a401610640565b826001600160a01b03166134878383613513565b6001600160a01b0316146114305760405162461bcd60e51b815260206004820152604760248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a207369676e6174757265206e6f742066726f6d6064820152661039b4b3b732b960c91b608482015260a401610640565b6000806000613522858561352f565b915091506114fa8161359f565b60008082516041141561356657602083015160408401516060850",
}

// ContractECDSARegistryCoordinatorABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractECDSARegistryCoordinatorMetaData.ABI instead.
var ContractECDSARegistryCoordinatorABI = ContractECDSARegistryCoordinatorMetaData.ABI

// ContractECDSARegistryCoordinatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractECDSARegistryCoordinatorMetaData.Bin instead.
var ContractECDSARegistryCoordinatorBin = ContractECDSARegistryCoordinatorMetaData.Bin

// DeployContractECDSARegistryCoordinator deploys a new Ethereum contract, binding an instance of ContractECDSARegistryCoordinator to it.
func DeployContractECDSARegistryCoordinator(auth *bind.TransactOpts, backend bind.ContractBackend, _serviceManager common.Address, _stakeRegistry common.Address, _indexRegistry common.Address) (common.Address, *types.Transaction, *ContractECDSARegistryCoordinator, error) {
	parsed, err := ContractECDSARegistryCoordinatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractECDSARegistryCoordinatorBin), backend, _serviceManager, _stakeRegistry, _indexRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractECDSARegistryCoordinator{ContractECDSARegistryCoordinatorCaller: ContractECDSARegistryCoordinatorCaller{contract: contract}, ContractECDSARegistryCoordinatorTransactor: ContractECDSARegistryCoordinatorTransactor{contract: contract}, ContractECDSARegistryCoordinatorFilterer: ContractECDSARegistryCoordinatorFilterer{contract: contract}}, nil
}

// ContractECDSARegistryCoordinatorMethods is an auto generated interface around an Ethereum contract.
type ContractECDSARegistryCoordinatorMethods interface {
	ContractECDSARegistryCoordinatorCalls
	ContractECDSARegistryCoordinatorTransacts
	ContractECDSARegistryCoordinatorFilters
}

// ContractECDSARegistryCoordinatorCalls is an auto generated interface that defines the call methods available for an Ethereum contract.
type ContractECDSARegistryCoordinatorCalls interface {
	PUBKEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error)

	Ejector(opts *bind.CallOpts) (common.Address, error)

	GetCurrentQuorumBitmap(opts *bind.CallOpts, operatorId common.Address) (*big.Int, error)

	GetOperator(opts *bind.CallOpts, operator common.Address) (ECDSARegistryCoordinatorOperatorInfo, error)

	GetOperatorFromId(opts *bind.CallOpts, operatorId common.Address) (common.Address, error)

	GetOperatorId(opts *bind.CallOpts, operator common.Address) (common.Address, error)

	GetOperatorStatus(opts *bind.CallOpts, operator common.Address) (uint8, error)

	GetQuorumBitmapAtBlockNumberByIndex(opts *bind.CallOpts, operatorId common.Address, blockNumber uint32, index *big.Int) (*big.Int, error)

	GetQuorumBitmapHistoryLength(opts *bind.CallOpts, operatorId common.Address) (*big.Int, error)

	GetQuorumBitmapIndicesAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, operatorIds []common.Address) ([]uint32, error)

	GetQuorumBitmapUpdateByIndex(opts *bind.CallOpts, operatorId common.Address, index *big.Int) (ECDSARegistryCoordinatorQuorumBitmapUpdate, error)

	IndexRegistry(opts *bind.CallOpts) (common.Address, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts, index uint8) (bool, error)

	Paused0(opts *bind.CallOpts) (*big.Int, error)

	PauserRegistry(opts *bind.CallOpts) (common.Address, error)

	PubkeyRegistrationMessageHash(opts *bind.CallOpts, operator common.Address) ([32]byte, error)

	QuorumCount(opts *bind.CallOpts) (uint8, error)

	QuorumUpdateBlockNumber(opts *bind.CallOpts, arg0 uint8) (*big.Int, error)

	ServiceManager(opts *bind.CallOpts) (common.Address, error)

	StakeRegistry(opts *bind.CallOpts) (common.Address, error)
}

// ContractECDSARegistryCoordinatorTransacts is an auto generated interface that defines the transact methods available for an Ethereum contract.
type ContractECDSARegistryCoordinatorTransacts interface {
	CreateQuorum(opts *bind.TransactOpts, minimumStake *big.Int, strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error)

	DeregisterOperator(opts *bind.TransactOpts, quorumNumbers []byte) (*types.Transaction, error)

	EjectOperator(opts *bind.TransactOpts, operator common.Address, quorumNumbers []byte) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, _initialOwner common.Address, _ejector common.Address, _pauserRegistry common.Address, _initialPausedStatus *big.Int, _minimumStakes []*big.Int, _strategyParams [][]ECDSAStakeRegistryStrategyParams) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error)

	PauseAll(opts *bind.TransactOpts) (*types.Transaction, error)

	RegisterOperator(opts *bind.TransactOpts, quorumNumbers []byte, params ECDSARegistryCoordinatorECDSAPubkeyRegistrationParams, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error)

	RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	SetEjector(opts *bind.TransactOpts, _ejector common.Address) (*types.Transaction, error)

	SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error)

	UpdateOperators(opts *bind.TransactOpts, operators []common.Address) (*types.Transaction, error)

	UpdateOperatorsForQuorum(opts *bind.TransactOpts, operatorsPerQuorum [][]common.Address, quorumNumbers []byte) (*types.Transaction, error)
}

// ContractECDSARegistryCoordinatorFilterer is an auto generated interface that defines the log filtering methods available for an Ethereum contract.
type ContractECDSARegistryCoordinatorFilters interface {
	FilterEjectorUpdated(opts *bind.FilterOpts) (*ContractECDSARegistryCoordinatorEjectorUpdatedIterator, error)
	WatchEjectorUpdated(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorEjectorUpdated) (event.Subscription, error)
	ParseEjectorUpdated(log types.Log) (*ContractECDSARegistryCoordinatorEjectorUpdated, error)

	FilterInitialized(opts *bind.FilterOpts) (*ContractECDSARegistryCoordinatorInitializedIterator, error)
	WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorInitialized) (event.Subscription, error)
	ParseInitialized(log types.Log) (*ContractECDSARegistryCoordinatorInitialized, error)

	FilterOperatorDeregistered(opts *bind.FilterOpts, operator []common.Address, operatorId []common.Address) (*ContractECDSARegistryCoordinatorOperatorDeregisteredIterator, error)
	WatchOperatorDeregistered(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorOperatorDeregistered, operator []common.Address, operatorId []common.Address) (event.Subscription, error)
	ParseOperatorDeregistered(log types.Log) (*ContractECDSARegistryCoordinatorOperatorDeregistered, error)

	FilterOperatorRegistered(opts *bind.FilterOpts, operator []common.Address, operatorId []common.Address) (*ContractECDSARegistryCoordinatorOperatorRegisteredIterator, error)
	WatchOperatorRegistered(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorOperatorRegistered, operator []common.Address, operatorId []common.Address) (event.Subscription, error)
	ParseOperatorRegistered(log types.Log) (*ContractECDSARegistryCoordinatorOperatorRegistered, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractECDSARegistryCoordinatorOwnershipTransferredIterator, error)
	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)
	ParseOwnershipTransferred(log types.Log) (*ContractECDSARegistryCoordinatorOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractECDSARegistryCoordinatorPausedIterator, error)
	WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorPaused, account []common.Address) (event.Subscription, error)
	ParsePaused(log types.Log) (*ContractECDSARegistryCoordinatorPaused, error)

	FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractECDSARegistryCoordinatorPauserRegistrySetIterator, error)
	WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorPauserRegistrySet) (event.Subscription, error)
	ParsePauserRegistrySet(log types.Log) (*ContractECDSARegistryCoordinatorPauserRegistrySet, error)

	FilterQuorumBlockNumberUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSARegistryCoordinatorQuorumBlockNumberUpdatedIterator, error)
	WatchQuorumBlockNumberUpdated(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated, quorumNumber []uint8) (event.Subscription, error)
	ParseQuorumBlockNumberUpdated(log types.Log) (*ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated, error)

	FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractECDSARegistryCoordinatorUnpausedIterator, error)
	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorUnpaused, account []common.Address) (event.Subscription, error)
	ParseUnpaused(log types.Log) (*ContractECDSARegistryCoordinatorUnpaused, error)
}

// ContractECDSARegistryCoordinator is an auto generated Go binding around an Ethereum contract.
type ContractECDSARegistryCoordinator struct {
	ContractECDSARegistryCoordinatorCaller     // Read-only binding to the contract
	ContractECDSARegistryCoordinatorTransactor // Write-only binding to the contract
	ContractECDSARegistryCoordinatorFilterer   // Log filterer for contract events
}

// ContractECDSARegistryCoordinator implements the ContractECDSARegistryCoordinatorMethods interface.
var _ ContractECDSARegistryCoordinatorMethods = (*ContractECDSARegistryCoordinator)(nil)

// ContractECDSARegistryCoordinatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractECDSARegistryCoordinatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractECDSARegistryCoordinatorCaller implements the ContractECDSARegistryCoordinatorCalls interface.
var _ ContractECDSARegistryCoordinatorCalls = (*ContractECDSARegistryCoordinatorCaller)(nil)

// ContractECDSARegistryCoordinatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractECDSARegistryCoordinatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractECDSARegistryCoordinatorTransactor implements the ContractECDSARegistryCoordinatorTransacts interface.
var _ ContractECDSARegistryCoordinatorTransacts = (*ContractECDSARegistryCoordinatorTransactor)(nil)

// ContractECDSARegistryCoordinatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractECDSARegistryCoordinatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractECDSARegistryCoordinatorFilterer implements the ContractECDSARegistryCoordinatorFilters interface.
var _ ContractECDSARegistryCoordinatorFilters = (*ContractECDSARegistryCoordinatorFilterer)(nil)

// ContractECDSARegistryCoordinatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractECDSARegistryCoordinatorSession struct {
	Contract     *ContractECDSARegistryCoordinator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                     // Call options to use throughout this session
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ContractECDSARegistryCoordinatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractECDSARegistryCoordinatorCallerSession struct {
	Contract *ContractECDSARegistryCoordinatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                           // Call options to use throughout this session
}

// ContractECDSARegistryCoordinatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractECDSARegistryCoordinatorTransactorSession struct {
	Contract     *ContractECDSARegistryCoordinatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                           // Transaction auth options to use throughout this session
}

// ContractECDSARegistryCoordinatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractECDSARegistryCoordinatorRaw struct {
	Contract *ContractECDSARegistryCoordinator // Generic contract binding to access the raw methods on
}

// ContractECDSARegistryCoordinatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractECDSARegistryCoordinatorCallerRaw struct {
	Contract *ContractECDSARegistryCoordinatorCaller // Generic read-only contract binding to access the raw methods on
}

// ContractECDSARegistryCoordinatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractECDSARegistryCoordinatorTransactorRaw struct {
	Contract *ContractECDSARegistryCoordinatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractECDSARegistryCoordinator creates a new instance of ContractECDSARegistryCoordinator, bound to a specific deployed contract.
func NewContractECDSARegistryCoordinator(address common.Address, backend bind.ContractBackend) (*ContractECDSARegistryCoordinator, error) {
	contract, err := bindContractECDSARegistryCoordinator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinator{ContractECDSARegistryCoordinatorCaller: ContractECDSARegistryCoordinatorCaller{contract: contract}, ContractECDSARegistryCoordinatorTransactor: ContractECDSARegistryCoordinatorTransactor{contract: contract}, ContractECDSARegistryCoordinatorFilterer: ContractECDSARegistryCoordinatorFilterer{contract: contract}}, nil
}

// NewContractECDSARegistryCoordinatorCaller creates a new read-only instance of ContractECDSARegistryCoordinator, bound to a specific deployed contract.
func NewContractECDSARegistryCoordinatorCaller(address common.Address, caller bind.ContractCaller) (*ContractECDSARegistryCoordinatorCaller, error) {
	contract, err := bindContractECDSARegistryCoordinator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorCaller{contract: contract}, nil
}

// NewContractECDSARegistryCoordinatorTransactor creates a new write-only instance of ContractECDSARegistryCoordinator, bound to a specific deployed contract.
func NewContractECDSARegistryCoordinatorTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractECDSARegistryCoordinatorTransactor, error) {
	contract, err := bindContractECDSARegistryCoordinator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorTransactor{contract: contract}, nil
}

// NewContractECDSARegistryCoordinatorFilterer creates a new log filterer instance of ContractECDSARegistryCoordinator, bound to a specific deployed contract.
func NewContractECDSARegistryCoordinatorFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractECDSARegistryCoordinatorFilterer, error) {
	contract, err := bindContractECDSARegistryCoordinator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorFilterer{contract: contract}, nil
}

// bindContractECDSARegistryCoordinator binds a generic wrapper to an already deployed contract.
func bindContractECDSARegistryCoordinator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractECDSARegistryCoordinatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractECDSARegistryCoordinator.Contract.ContractECDSARegistryCoordinatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.ContractECDSARegistryCoordinatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.ContractECDSARegistryCoordinatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractECDSARegistryCoordinator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.contract.Transact(opts, method, params...)
}

// PUBKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x9feab859.
//
// Solidity: function PUBKEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) PUBKEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "PUBKEY_REGISTRATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PUBKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x9feab859.
//
// Solidity: function PUBKEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) PUBKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _ContractECDSARegistryCoordinator.Contract.PUBKEYREGISTRATIONTYPEHASH(&_ContractECDSARegistryCoordinator.CallOpts)
}

// PUBKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x9feab859.
//
// Solidity: function PUBKEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) PUBKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _ContractECDSARegistryCoordinator.Contract.PUBKEYREGISTRATIONTYPEHASH(&_ContractECDSARegistryCoordinator.CallOpts)
}

// Ejector is a free data retrieval call binding the contract method 0x28f61b31.
//
// Solidity: function ejector() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) Ejector(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "ejector")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Ejector is a free data retrieval call binding the contract method 0x28f61b31.
//
// Solidity: function ejector() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) Ejector() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.Ejector(&_ContractECDSARegistryCoordinator.CallOpts)
}

// Ejector is a free data retrieval call binding the contract method 0x28f61b31.
//
// Solidity: function ejector() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) Ejector() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.Ejector(&_ContractECDSARegistryCoordinator.CallOpts)
}

// GetCurrentQuorumBitmap is a free data retrieval call binding the contract method 0x67c49936.
//
// Solidity: function getCurrentQuorumBitmap(address operatorId) view returns(uint192)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) GetCurrentQuorumBitmap(opts *bind.CallOpts, operatorId common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "getCurrentQuorumBitmap", operatorId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentQuorumBitmap is a free data retrieval call binding the contract method 0x67c49936.
//
// Solidity: function getCurrentQuorumBitmap(address operatorId) view returns(uint192)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) GetCurrentQuorumBitmap(operatorId common.Address) (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetCurrentQuorumBitmap(&_ContractECDSARegistryCoordinator.CallOpts, operatorId)
}

// GetCurrentQuorumBitmap is a free data retrieval call binding the contract method 0x67c49936.
//
// Solidity: function getCurrentQuorumBitmap(address operatorId) view returns(uint192)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) GetCurrentQuorumBitmap(operatorId common.Address) (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetCurrentQuorumBitmap(&_ContractECDSARegistryCoordinator.CallOpts, operatorId)
}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address operator) view returns((address,uint8))
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) GetOperator(opts *bind.CallOpts, operator common.Address) (ECDSARegistryCoordinatorOperatorInfo, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "getOperator", operator)

	if err != nil {
		return *new(ECDSARegistryCoordinatorOperatorInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ECDSARegistryCoordinatorOperatorInfo)).(*ECDSARegistryCoordinatorOperatorInfo)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address operator) view returns((address,uint8))
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) GetOperator(operator common.Address) (ECDSARegistryCoordinatorOperatorInfo, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetOperator(&_ContractECDSARegistryCoordinator.CallOpts, operator)
}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address operator) view returns((address,uint8))
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) GetOperator(operator common.Address) (ECDSARegistryCoordinatorOperatorInfo, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetOperator(&_ContractECDSARegistryCoordinator.CallOpts, operator)
}

// GetOperatorFromId is a free data retrieval call binding the contract method 0x5c0ae784.
//
// Solidity: function getOperatorFromId(address operatorId) view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) GetOperatorFromId(opts *bind.CallOpts, operatorId common.Address) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "getOperatorFromId", operatorId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperatorFromId is a free data retrieval call binding the contract method 0x5c0ae784.
//
// Solidity: function getOperatorFromId(address operatorId) view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) GetOperatorFromId(operatorId common.Address) (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetOperatorFromId(&_ContractECDSARegistryCoordinator.CallOpts, operatorId)
}

// GetOperatorFromId is a free data retrieval call binding the contract method 0x5c0ae784.
//
// Solidity: function getOperatorFromId(address operatorId) view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) GetOperatorFromId(operatorId common.Address) (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetOperatorFromId(&_ContractECDSARegistryCoordinator.CallOpts, operatorId)
}

// GetOperatorId is a free data retrieval call binding the contract method 0x13542a4e.
//
// Solidity: function getOperatorId(address operator) view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) GetOperatorId(opts *bind.CallOpts, operator common.Address) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "getOperatorId", operator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperatorId is a free data retrieval call binding the contract method 0x13542a4e.
//
// Solidity: function getOperatorId(address operator) view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) GetOperatorId(operator common.Address) (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetOperatorId(&_ContractECDSARegistryCoordinator.CallOpts, operator)
}

// GetOperatorId is a free data retrieval call binding the contract method 0x13542a4e.
//
// Solidity: function getOperatorId(address operator) view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) GetOperatorId(operator common.Address) (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetOperatorId(&_ContractECDSARegistryCoordinator.CallOpts, operator)
}

// GetOperatorStatus is a free data retrieval call binding the contract method 0xfd39105a.
//
// Solidity: function getOperatorStatus(address operator) view returns(uint8)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) GetOperatorStatus(opts *bind.CallOpts, operator common.Address) (uint8, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "getOperatorStatus", operator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetOperatorStatus is a free data retrieval call binding the contract method 0xfd39105a.
//
// Solidity: function getOperatorStatus(address operator) view returns(uint8)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) GetOperatorStatus(operator common.Address) (uint8, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetOperatorStatus(&_ContractECDSARegistryCoordinator.CallOpts, operator)
}

// GetOperatorStatus is a free data retrieval call binding the contract method 0xfd39105a.
//
// Solidity: function getOperatorStatus(address operator) view returns(uint8)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) GetOperatorStatus(operator common.Address) (uint8, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetOperatorStatus(&_ContractECDSARegistryCoordinator.CallOpts, operator)
}

// GetQuorumBitmapAtBlockNumberByIndex is a free data retrieval call binding the contract method 0x828538cd.
//
// Solidity: function getQuorumBitmapAtBlockNumberByIndex(address operatorId, uint32 blockNumber, uint256 index) view returns(uint192)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) GetQuorumBitmapAtBlockNumberByIndex(opts *bind.CallOpts, operatorId common.Address, blockNumber uint32, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "getQuorumBitmapAtBlockNumberByIndex", operatorId, blockNumber, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetQuorumBitmapAtBlockNumberByIndex is a free data retrieval call binding the contract method 0x828538cd.
//
// Solidity: function getQuorumBitmapAtBlockNumberByIndex(address operatorId, uint32 blockNumber, uint256 index) view returns(uint192)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) GetQuorumBitmapAtBlockNumberByIndex(operatorId common.Address, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetQuorumBitmapAtBlockNumberByIndex(&_ContractECDSARegistryCoordinator.CallOpts, operatorId, blockNumber, index)
}

// GetQuorumBitmapAtBlockNumberByIndex is a free data retrieval call binding the contract method 0x828538cd.
//
// Solidity: function getQuorumBitmapAtBlockNumberByIndex(address operatorId, uint32 blockNumber, uint256 index) view returns(uint192)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) GetQuorumBitmapAtBlockNumberByIndex(operatorId common.Address, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetQuorumBitmapAtBlockNumberByIndex(&_ContractECDSARegistryCoordinator.CallOpts, operatorId, blockNumber, index)
}

// GetQuorumBitmapHistoryLength is a free data retrieval call binding the contract method 0xe4b312c0.
//
// Solidity: function getQuorumBitmapHistoryLength(address operatorId) view returns(uint256)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) GetQuorumBitmapHistoryLength(opts *bind.CallOpts, operatorId common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "getQuorumBitmapHistoryLength", operatorId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetQuorumBitmapHistoryLength is a free data retrieval call binding the contract method 0xe4b312c0.
//
// Solidity: function getQuorumBitmapHistoryLength(address operatorId) view returns(uint256)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) GetQuorumBitmapHistoryLength(operatorId common.Address) (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetQuorumBitmapHistoryLength(&_ContractECDSARegistryCoordinator.CallOpts, operatorId)
}

// GetQuorumBitmapHistoryLength is a free data retrieval call binding the contract method 0xe4b312c0.
//
// Solidity: function getQuorumBitmapHistoryLength(address operatorId) view returns(uint256)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) GetQuorumBitmapHistoryLength(operatorId common.Address) (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetQuorumBitmapHistoryLength(&_ContractECDSARegistryCoordinator.CallOpts, operatorId)
}

// GetQuorumBitmapIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x80080441.
//
// Solidity: function getQuorumBitmapIndicesAtBlockNumber(uint32 blockNumber, address[] operatorIds) view returns(uint32[])
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) GetQuorumBitmapIndicesAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, operatorIds []common.Address) ([]uint32, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "getQuorumBitmapIndicesAtBlockNumber", blockNumber, operatorIds)

	if err != nil {
		return *new([]uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint32)).(*[]uint32)

	return out0, err

}

// GetQuorumBitmapIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x80080441.
//
// Solidity: function getQuorumBitmapIndicesAtBlockNumber(uint32 blockNumber, address[] operatorIds) view returns(uint32[])
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) GetQuorumBitmapIndicesAtBlockNumber(blockNumber uint32, operatorIds []common.Address) ([]uint32, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetQuorumBitmapIndicesAtBlockNumber(&_ContractECDSARegistryCoordinator.CallOpts, blockNumber, operatorIds)
}

// GetQuorumBitmapIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x80080441.
//
// Solidity: function getQuorumBitmapIndicesAtBlockNumber(uint32 blockNumber, address[] operatorIds) view returns(uint32[])
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) GetQuorumBitmapIndicesAtBlockNumber(blockNumber uint32, operatorIds []common.Address) ([]uint32, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetQuorumBitmapIndicesAtBlockNumber(&_ContractECDSARegistryCoordinator.CallOpts, blockNumber, operatorIds)
}

// GetQuorumBitmapUpdateByIndex is a free data retrieval call binding the contract method 0x6b389a0f.
//
// Solidity: function getQuorumBitmapUpdateByIndex(address operatorId, uint256 index) view returns((uint32,uint32,uint192))
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) GetQuorumBitmapUpdateByIndex(opts *bind.CallOpts, operatorId common.Address, index *big.Int) (ECDSARegistryCoordinatorQuorumBitmapUpdate, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "getQuorumBitmapUpdateByIndex", operatorId, index)

	if err != nil {
		return *new(ECDSARegistryCoordinatorQuorumBitmapUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(ECDSARegistryCoordinatorQuorumBitmapUpdate)).(*ECDSARegistryCoordinatorQuorumBitmapUpdate)

	return out0, err

}

// GetQuorumBitmapUpdateByIndex is a free data retrieval call binding the contract method 0x6b389a0f.
//
// Solidity: function getQuorumBitmapUpdateByIndex(address operatorId, uint256 index) view returns((uint32,uint32,uint192))
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) GetQuorumBitmapUpdateByIndex(operatorId common.Address, index *big.Int) (ECDSARegistryCoordinatorQuorumBitmapUpdate, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetQuorumBitmapUpdateByIndex(&_ContractECDSARegistryCoordinator.CallOpts, operatorId, index)
}

// GetQuorumBitmapUpdateByIndex is a free data retrieval call binding the contract method 0x6b389a0f.
//
// Solidity: function getQuorumBitmapUpdateByIndex(address operatorId, uint256 index) view returns((uint32,uint32,uint192))
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) GetQuorumBitmapUpdateByIndex(operatorId common.Address, index *big.Int) (ECDSARegistryCoordinatorQuorumBitmapUpdate, error) {
	return _ContractECDSARegistryCoordinator.Contract.GetQuorumBitmapUpdateByIndex(&_ContractECDSARegistryCoordinator.CallOpts, operatorId, index)
}

// IndexRegistry is a free data retrieval call binding the contract method 0x9e9923c2.
//
// Solidity: function indexRegistry() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) IndexRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "indexRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IndexRegistry is a free data retrieval call binding the contract method 0x9e9923c2.
//
// Solidity: function indexRegistry() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) IndexRegistry() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.IndexRegistry(&_ContractECDSARegistryCoordinator.CallOpts)
}

// IndexRegistry is a free data retrieval call binding the contract method 0x9e9923c2.
//
// Solidity: function indexRegistry() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) IndexRegistry() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.IndexRegistry(&_ContractECDSARegistryCoordinator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) Owner() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.Owner(&_ContractECDSARegistryCoordinator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) Owner() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.Owner(&_ContractECDSARegistryCoordinator.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) Paused(index uint8) (bool, error) {
	return _ContractECDSARegistryCoordinator.Contract.Paused(&_ContractECDSARegistryCoordinator.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) Paused(index uint8) (bool, error) {
	return _ContractECDSARegistryCoordinator.Contract.Paused(&_ContractECDSARegistryCoordinator.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) Paused0() (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.Paused0(&_ContractECDSARegistryCoordinator.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) Paused0() (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.Paused0(&_ContractECDSARegistryCoordinator.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) PauserRegistry() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.PauserRegistry(&_ContractECDSARegistryCoordinator.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.PauserRegistry(&_ContractECDSARegistryCoordinator.CallOpts)
}

// PubkeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x3c2a7f4c.
//
// Solidity: function pubkeyRegistrationMessageHash(address operator) view returns(bytes32)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) PubkeyRegistrationMessageHash(opts *bind.CallOpts, operator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "pubkeyRegistrationMessageHash", operator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PubkeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x3c2a7f4c.
//
// Solidity: function pubkeyRegistrationMessageHash(address operator) view returns(bytes32)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) PubkeyRegistrationMessageHash(operator common.Address) ([32]byte, error) {
	return _ContractECDSARegistryCoordinator.Contract.PubkeyRegistrationMessageHash(&_ContractECDSARegistryCoordinator.CallOpts, operator)
}

// PubkeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x3c2a7f4c.
//
// Solidity: function pubkeyRegistrationMessageHash(address operator) view returns(bytes32)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) PubkeyRegistrationMessageHash(operator common.Address) ([32]byte, error) {
	return _ContractECDSARegistryCoordinator.Contract.PubkeyRegistrationMessageHash(&_ContractECDSARegistryCoordinator.CallOpts, operator)
}

// QuorumCount is a free data retrieval call binding the contract method 0x9aa1653d.
//
// Solidity: function quorumCount() view returns(uint8)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) QuorumCount(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "quorumCount")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// QuorumCount is a free data retrieval call binding the contract method 0x9aa1653d.
//
// Solidity: function quorumCount() view returns(uint8)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) QuorumCount() (uint8, error) {
	return _ContractECDSARegistryCoordinator.Contract.QuorumCount(&_ContractECDSARegistryCoordinator.CallOpts)
}

// QuorumCount is a free data retrieval call binding the contract method 0x9aa1653d.
//
// Solidity: function quorumCount() view returns(uint8)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) QuorumCount() (uint8, error) {
	return _ContractECDSARegistryCoordinator.Contract.QuorumCount(&_ContractECDSARegistryCoordinator.CallOpts)
}

// QuorumUpdateBlockNumber is a free data retrieval call binding the contract method 0x249a0c42.
//
// Solidity: function quorumUpdateBlockNumber(uint8 ) view returns(uint256)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) QuorumUpdateBlockNumber(opts *bind.CallOpts, arg0 uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "quorumUpdateBlockNumber", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// QuorumUpdateBlockNumber is a free data retrieval call binding the contract method 0x249a0c42.
//
// Solidity: function quorumUpdateBlockNumber(uint8 ) view returns(uint256)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) QuorumUpdateBlockNumber(arg0 uint8) (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.QuorumUpdateBlockNumber(&_ContractECDSARegistryCoordinator.CallOpts, arg0)
}

// QuorumUpdateBlockNumber is a free data retrieval call binding the contract method 0x249a0c42.
//
// Solidity: function quorumUpdateBlockNumber(uint8 ) view returns(uint256)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) QuorumUpdateBlockNumber(arg0 uint8) (*big.Int, error) {
	return _ContractECDSARegistryCoordinator.Contract.QuorumUpdateBlockNumber(&_ContractECDSARegistryCoordinator.CallOpts, arg0)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) ServiceManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "serviceManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) ServiceManager() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.ServiceManager(&_ContractECDSARegistryCoordinator.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) ServiceManager() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.ServiceManager(&_ContractECDSARegistryCoordinator.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractECDSARegistryCoordinator.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) StakeRegistry() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.StakeRegistry(&_ContractECDSARegistryCoordinator.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractECDSARegistryCoordinator.Contract.StakeRegistry(&_ContractECDSARegistryCoordinator.CallOpts)
}

// CreateQuorum is a paid mutator transaction binding the contract method 0x231a5abb.
//
// Solidity: function createQuorum(uint96 minimumStake, (address,uint96)[] strategyParams) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) CreateQuorum(opts *bind.TransactOpts, minimumStake *big.Int, strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "createQuorum", minimumStake, strategyParams)
}

// CreateQuorum is a paid mutator transaction binding the contract method 0x231a5abb.
//
// Solidity: function createQuorum(uint96 minimumStake, (address,uint96)[] strategyParams) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) CreateQuorum(minimumStake *big.Int, strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.CreateQuorum(&_ContractECDSARegistryCoordinator.TransactOpts, minimumStake, strategyParams)
}

// CreateQuorum is a paid mutator transaction binding the contract method 0x231a5abb.
//
// Solidity: function createQuorum(uint96 minimumStake, (address,uint96)[] strategyParams) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) CreateQuorum(minimumStake *big.Int, strategyParams []ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.CreateQuorum(&_ContractECDSARegistryCoordinator.TransactOpts, minimumStake, strategyParams)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xca4f2d97.
//
// Solidity: function deregisterOperator(bytes quorumNumbers) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) DeregisterOperator(opts *bind.TransactOpts, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "deregisterOperator", quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xca4f2d97.
//
// Solidity: function deregisterOperator(bytes quorumNumbers) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) DeregisterOperator(quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.DeregisterOperator(&_ContractECDSARegistryCoordinator.TransactOpts, quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xca4f2d97.
//
// Solidity: function deregisterOperator(bytes quorumNumbers) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) DeregisterOperator(quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.DeregisterOperator(&_ContractECDSARegistryCoordinator.TransactOpts, quorumNumbers)
}

// EjectOperator is a paid mutator transaction binding the contract method 0x6e3b17db.
//
// Solidity: function ejectOperator(address operator, bytes quorumNumbers) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) EjectOperator(opts *bind.TransactOpts, operator common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "ejectOperator", operator, quorumNumbers)
}

// EjectOperator is a paid mutator transaction binding the contract method 0x6e3b17db.
//
// Solidity: function ejectOperator(address operator, bytes quorumNumbers) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) EjectOperator(operator common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.EjectOperator(&_ContractECDSARegistryCoordinator.TransactOpts, operator, quorumNumbers)
}

// EjectOperator is a paid mutator transaction binding the contract method 0x6e3b17db.
//
// Solidity: function ejectOperator(address operator, bytes quorumNumbers) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) EjectOperator(operator common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.EjectOperator(&_ContractECDSARegistryCoordinator.TransactOpts, operator, quorumNumbers)
}

// Initialize is a paid mutator transaction binding the contract method 0x48d1da85.
//
// Solidity: function initialize(address _initialOwner, address _ejector, address _pauserRegistry, uint256 _initialPausedStatus, uint96[] _minimumStakes, (address,uint96)[][] _strategyParams) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) Initialize(opts *bind.TransactOpts, _initialOwner common.Address, _ejector common.Address, _pauserRegistry common.Address, _initialPausedStatus *big.Int, _minimumStakes []*big.Int, _strategyParams [][]ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "initialize", _initialOwner, _ejector, _pauserRegistry, _initialPausedStatus, _minimumStakes, _strategyParams)
}

// Initialize is a paid mutator transaction binding the contract method 0x48d1da85.
//
// Solidity: function initialize(address _initialOwner, address _ejector, address _pauserRegistry, uint256 _initialPausedStatus, uint96[] _minimumStakes, (address,uint96)[][] _strategyParams) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) Initialize(_initialOwner common.Address, _ejector common.Address, _pauserRegistry common.Address, _initialPausedStatus *big.Int, _minimumStakes []*big.Int, _strategyParams [][]ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.Initialize(&_ContractECDSARegistryCoordinator.TransactOpts, _initialOwner, _ejector, _pauserRegistry, _initialPausedStatus, _minimumStakes, _strategyParams)
}

// Initialize is a paid mutator transaction binding the contract method 0x48d1da85.
//
// Solidity: function initialize(address _initialOwner, address _ejector, address _pauserRegistry, uint256 _initialPausedStatus, uint96[] _minimumStakes, (address,uint96)[][] _strategyParams) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) Initialize(_initialOwner common.Address, _ejector common.Address, _pauserRegistry common.Address, _initialPausedStatus *big.Int, _minimumStakes []*big.Int, _strategyParams [][]ECDSAStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.Initialize(&_ContractECDSARegistryCoordinator.TransactOpts, _initialOwner, _ejector, _pauserRegistry, _initialPausedStatus, _minimumStakes, _strategyParams)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.Pause(&_ContractECDSARegistryCoordinator.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.Pause(&_ContractECDSARegistryCoordinator.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) PauseAll() (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.PauseAll(&_ContractECDSARegistryCoordinator.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.PauseAll(&_ContractECDSARegistryCoordinator.TransactOpts)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x3596b242.
//
// Solidity: function registerOperator(bytes quorumNumbers, (address,(bytes,bytes32,uint256)) params, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) RegisterOperator(opts *bind.TransactOpts, quorumNumbers []byte, params ECDSARegistryCoordinatorECDSAPubkeyRegistrationParams, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "registerOperator", quorumNumbers, params, operatorSignature)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x3596b242.
//
// Solidity: function registerOperator(bytes quorumNumbers, (address,(bytes,bytes32,uint256)) params, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) RegisterOperator(quorumNumbers []byte, params ECDSARegistryCoordinatorECDSAPubkeyRegistrationParams, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.RegisterOperator(&_ContractECDSARegistryCoordinator.TransactOpts, quorumNumbers, params, operatorSignature)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x3596b242.
//
// Solidity: function registerOperator(bytes quorumNumbers, (address,(bytes,bytes32,uint256)) params, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) RegisterOperator(quorumNumbers []byte, params ECDSARegistryCoordinatorECDSAPubkeyRegistrationParams, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.RegisterOperator(&_ContractECDSARegistryCoordinator.TransactOpts, quorumNumbers, params, operatorSignature)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.RenounceOwnership(&_ContractECDSARegistryCoordinator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.RenounceOwnership(&_ContractECDSARegistryCoordinator.TransactOpts)
}

// SetEjector is a paid mutator transaction binding the contract method 0x2cdd1e86.
//
// Solidity: function setEjector(address _ejector) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) SetEjector(opts *bind.TransactOpts, _ejector common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "setEjector", _ejector)
}

// SetEjector is a paid mutator transaction binding the contract method 0x2cdd1e86.
//
// Solidity: function setEjector(address _ejector) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) SetEjector(_ejector common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.SetEjector(&_ContractECDSARegistryCoordinator.TransactOpts, _ejector)
}

// SetEjector is a paid mutator transaction binding the contract method 0x2cdd1e86.
//
// Solidity: function setEjector(address _ejector) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) SetEjector(_ejector common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.SetEjector(&_ContractECDSARegistryCoordinator.TransactOpts, _ejector)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.SetPauserRegistry(&_ContractECDSARegistryCoordinator.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.SetPauserRegistry(&_ContractECDSARegistryCoordinator.TransactOpts, newPauserRegistry)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.TransferOwnership(&_ContractECDSARegistryCoordinator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.TransferOwnership(&_ContractECDSARegistryCoordinator.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.Unpause(&_ContractECDSARegistryCoordinator.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.Unpause(&_ContractECDSARegistryCoordinator.TransactOpts, newPausedStatus)
}

// UpdateOperators is a paid mutator transaction binding the contract method 0x00cf2ab5.
//
// Solidity: function updateOperators(address[] operators) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) UpdateOperators(opts *bind.TransactOpts, operators []common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "updateOperators", operators)
}

// UpdateOperators is a paid mutator transaction binding the contract method 0x00cf2ab5.
//
// Solidity: function updateOperators(address[] operators) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) UpdateOperators(operators []common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.UpdateOperators(&_ContractECDSARegistryCoordinator.TransactOpts, operators)
}

// UpdateOperators is a paid mutator transaction binding the contract method 0x00cf2ab5.
//
// Solidity: function updateOperators(address[] operators) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) UpdateOperators(operators []common.Address) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.UpdateOperators(&_ContractECDSARegistryCoordinator.TransactOpts, operators)
}

// UpdateOperatorsForQuorum is a paid mutator transaction binding the contract method 0x5140a548.
//
// Solidity: function updateOperatorsForQuorum(address[][] operatorsPerQuorum, bytes quorumNumbers) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactor) UpdateOperatorsForQuorum(opts *bind.TransactOpts, operatorsPerQuorum [][]common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.contract.Transact(opts, "updateOperatorsForQuorum", operatorsPerQuorum, quorumNumbers)
}

// UpdateOperatorsForQuorum is a paid mutator transaction binding the contract method 0x5140a548.
//
// Solidity: function updateOperatorsForQuorum(address[][] operatorsPerQuorum, bytes quorumNumbers) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorSession) UpdateOperatorsForQuorum(operatorsPerQuorum [][]common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.UpdateOperatorsForQuorum(&_ContractECDSARegistryCoordinator.TransactOpts, operatorsPerQuorum, quorumNumbers)
}

// UpdateOperatorsForQuorum is a paid mutator transaction binding the contract method 0x5140a548.
//
// Solidity: function updateOperatorsForQuorum(address[][] operatorsPerQuorum, bytes quorumNumbers) returns()
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorTransactorSession) UpdateOperatorsForQuorum(operatorsPerQuorum [][]common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractECDSARegistryCoordinator.Contract.UpdateOperatorsForQuorum(&_ContractECDSARegistryCoordinator.TransactOpts, operatorsPerQuorum, quorumNumbers)
}

// ContractECDSARegistryCoordinatorEjectorUpdatedIterator is returned from FilterEjectorUpdated and is used to iterate over the raw logs and unpacked data for EjectorUpdated events raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorEjectorUpdatedIterator struct {
	Event *ContractECDSARegistryCoordinatorEjectorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSARegistryCoordinatorEjectorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSARegistryCoordinatorEjectorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSARegistryCoordinatorEjectorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSARegistryCoordinatorEjectorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSARegistryCoordinatorEjectorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSARegistryCoordinatorEjectorUpdated represents a EjectorUpdated event raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorEjectorUpdated struct {
	PrevEjector common.Address
	NewEjector  common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterEjectorUpdated is a free log retrieval operation binding the contract event 0x8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9.
//
// Solidity: event EjectorUpdated(address prevEjector, address newEjector)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) FilterEjectorUpdated(opts *bind.FilterOpts) (*ContractECDSARegistryCoordinatorEjectorUpdatedIterator, error) {

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.FilterLogs(opts, "EjectorUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorEjectorUpdatedIterator{contract: _ContractECDSARegistryCoordinator.contract, event: "EjectorUpdated", logs: logs, sub: sub}, nil
}

// WatchEjectorUpdated is a free log subscription operation binding the contract event 0x8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9.
//
// Solidity: event EjectorUpdated(address prevEjector, address newEjector)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) WatchEjectorUpdated(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorEjectorUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.WatchLogs(opts, "EjectorUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSARegistryCoordinatorEjectorUpdated)
				if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "EjectorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEjectorUpdated is a log parse operation binding the contract event 0x8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9.
//
// Solidity: event EjectorUpdated(address prevEjector, address newEjector)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) ParseEjectorUpdated(log types.Log) (*ContractECDSARegistryCoordinatorEjectorUpdated, error) {
	event := new(ContractECDSARegistryCoordinatorEjectorUpdated)
	if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "EjectorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSARegistryCoordinatorInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorInitializedIterator struct {
	Event *ContractECDSARegistryCoordinatorInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSARegistryCoordinatorInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSARegistryCoordinatorInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSARegistryCoordinatorInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSARegistryCoordinatorInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSARegistryCoordinatorInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSARegistryCoordinatorInitialized represents a Initialized event raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractECDSARegistryCoordinatorInitializedIterator, error) {

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorInitializedIterator{contract: _ContractECDSARegistryCoordinator.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSARegistryCoordinatorInitialized)
				if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) ParseInitialized(log types.Log) (*ContractECDSARegistryCoordinatorInitialized, error) {
	event := new(ContractECDSARegistryCoordinatorInitialized)
	if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSARegistryCoordinatorOperatorDeregisteredIterator is returned from FilterOperatorDeregistered and is used to iterate over the raw logs and unpacked data for OperatorDeregistered events raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorOperatorDeregisteredIterator struct {
	Event *ContractECDSARegistryCoordinatorOperatorDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSARegistryCoordinatorOperatorDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSARegistryCoordinatorOperatorDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSARegistryCoordinatorOperatorDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSARegistryCoordinatorOperatorDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSARegistryCoordinatorOperatorDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSARegistryCoordinatorOperatorDeregistered represents a OperatorDeregistered event raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorOperatorDeregistered struct {
	Operator   common.Address
	OperatorId common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorDeregistered is a free log retrieval operation binding the contract event 0x31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed580.
//
// Solidity: event OperatorDeregistered(address indexed operator, address indexed operatorId)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) FilterOperatorDeregistered(opts *bind.FilterOpts, operator []common.Address, operatorId []common.Address) (*ContractECDSARegistryCoordinatorOperatorDeregisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.FilterLogs(opts, "OperatorDeregistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorOperatorDeregisteredIterator{contract: _ContractECDSARegistryCoordinator.contract, event: "OperatorDeregistered", logs: logs, sub: sub}, nil
}

// WatchOperatorDeregistered is a free log subscription operation binding the contract event 0x31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed580.
//
// Solidity: event OperatorDeregistered(address indexed operator, address indexed operatorId)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) WatchOperatorDeregistered(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorOperatorDeregistered, operator []common.Address, operatorId []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.WatchLogs(opts, "OperatorDeregistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSARegistryCoordinatorOperatorDeregistered)
				if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "OperatorDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorDeregistered is a log parse operation binding the contract event 0x31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed580.
//
// Solidity: event OperatorDeregistered(address indexed operator, address indexed operatorId)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) ParseOperatorDeregistered(log types.Log) (*ContractECDSARegistryCoordinatorOperatorDeregistered, error) {
	event := new(ContractECDSARegistryCoordinatorOperatorDeregistered)
	if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "OperatorDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSARegistryCoordinatorOperatorRegisteredIterator is returned from FilterOperatorRegistered and is used to iterate over the raw logs and unpacked data for OperatorRegistered events raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorOperatorRegisteredIterator struct {
	Event *ContractECDSARegistryCoordinatorOperatorRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSARegistryCoordinatorOperatorRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSARegistryCoordinatorOperatorRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSARegistryCoordinatorOperatorRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSARegistryCoordinatorOperatorRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSARegistryCoordinatorOperatorRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSARegistryCoordinatorOperatorRegistered represents a OperatorRegistered event raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorOperatorRegistered struct {
	Operator   common.Address
	OperatorId common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorRegistered is a free log retrieval operation binding the contract event 0xa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c1.
//
// Solidity: event OperatorRegistered(address indexed operator, address indexed operatorId)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) FilterOperatorRegistered(opts *bind.FilterOpts, operator []common.Address, operatorId []common.Address) (*ContractECDSARegistryCoordinatorOperatorRegisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.FilterLogs(opts, "OperatorRegistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorOperatorRegisteredIterator{contract: _ContractECDSARegistryCoordinator.contract, event: "OperatorRegistered", logs: logs, sub: sub}, nil
}

// WatchOperatorRegistered is a free log subscription operation binding the contract event 0xa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c1.
//
// Solidity: event OperatorRegistered(address indexed operator, address indexed operatorId)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) WatchOperatorRegistered(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorOperatorRegistered, operator []common.Address, operatorId []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.WatchLogs(opts, "OperatorRegistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSARegistryCoordinatorOperatorRegistered)
				if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "OperatorRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRegistered is a log parse operation binding the contract event 0xa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c1.
//
// Solidity: event OperatorRegistered(address indexed operator, address indexed operatorId)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) ParseOperatorRegistered(log types.Log) (*ContractECDSARegistryCoordinatorOperatorRegistered, error) {
	event := new(ContractECDSARegistryCoordinatorOperatorRegistered)
	if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "OperatorRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSARegistryCoordinatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorOwnershipTransferredIterator struct {
	Event *ContractECDSARegistryCoordinatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSARegistryCoordinatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSARegistryCoordinatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSARegistryCoordinatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSARegistryCoordinatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSARegistryCoordinatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSARegistryCoordinatorOwnershipTransferred represents a OwnershipTransferred event raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractECDSARegistryCoordinatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorOwnershipTransferredIterator{contract: _ContractECDSARegistryCoordinator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSARegistryCoordinatorOwnershipTransferred)
				if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) ParseOwnershipTransferred(log types.Log) (*ContractECDSARegistryCoordinatorOwnershipTransferred, error) {
	event := new(ContractECDSARegistryCoordinatorOwnershipTransferred)
	if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSARegistryCoordinatorPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorPausedIterator struct {
	Event *ContractECDSARegistryCoordinatorPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSARegistryCoordinatorPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSARegistryCoordinatorPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSARegistryCoordinatorPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSARegistryCoordinatorPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSARegistryCoordinatorPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSARegistryCoordinatorPaused represents a Paused event raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractECDSARegistryCoordinatorPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorPausedIterator{contract: _ContractECDSARegistryCoordinator.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSARegistryCoordinatorPaused)
				if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) ParsePaused(log types.Log) (*ContractECDSARegistryCoordinatorPaused, error) {
	event := new(ContractECDSARegistryCoordinatorPaused)
	if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSARegistryCoordinatorPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorPauserRegistrySetIterator struct {
	Event *ContractECDSARegistryCoordinatorPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSARegistryCoordinatorPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSARegistryCoordinatorPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSARegistryCoordinatorPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSARegistryCoordinatorPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSARegistryCoordinatorPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSARegistryCoordinatorPauserRegistrySet represents a PauserRegistrySet event raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractECDSARegistryCoordinatorPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorPauserRegistrySetIterator{contract: _ContractECDSARegistryCoordinator.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSARegistryCoordinatorPauserRegistrySet)
				if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) ParsePauserRegistrySet(log types.Log) (*ContractECDSARegistryCoordinatorPauserRegistrySet, error) {
	event := new(ContractECDSARegistryCoordinatorPauserRegistrySet)
	if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSARegistryCoordinatorQuorumBlockNumberUpdatedIterator is returned from FilterQuorumBlockNumberUpdated and is used to iterate over the raw logs and unpacked data for QuorumBlockNumberUpdated events raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorQuorumBlockNumberUpdatedIterator struct {
	Event *ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSARegistryCoordinatorQuorumBlockNumberUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSARegistryCoordinatorQuorumBlockNumberUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSARegistryCoordinatorQuorumBlockNumberUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated represents a QuorumBlockNumberUpdated event raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated struct {
	QuorumNumber uint8
	Blocknumber  *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterQuorumBlockNumberUpdated is a free log retrieval operation binding the contract event 0x46077d55330763f16269fd75e5761663f4192d2791747c0189b16ad31db07db4.
//
// Solidity: event QuorumBlockNumberUpdated(uint8 indexed quorumNumber, uint256 blocknumber)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) FilterQuorumBlockNumberUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractECDSARegistryCoordinatorQuorumBlockNumberUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.FilterLogs(opts, "QuorumBlockNumberUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorQuorumBlockNumberUpdatedIterator{contract: _ContractECDSARegistryCoordinator.contract, event: "QuorumBlockNumberUpdated", logs: logs, sub: sub}, nil
}

// WatchQuorumBlockNumberUpdated is a free log subscription operation binding the contract event 0x46077d55330763f16269fd75e5761663f4192d2791747c0189b16ad31db07db4.
//
// Solidity: event QuorumBlockNumberUpdated(uint8 indexed quorumNumber, uint256 blocknumber)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) WatchQuorumBlockNumberUpdated(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.WatchLogs(opts, "QuorumBlockNumberUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated)
				if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "QuorumBlockNumberUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuorumBlockNumberUpdated is a log parse operation binding the contract event 0x46077d55330763f16269fd75e5761663f4192d2791747c0189b16ad31db07db4.
//
// Solidity: event QuorumBlockNumberUpdated(uint8 indexed quorumNumber, uint256 blocknumber)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) ParseQuorumBlockNumberUpdated(log types.Log) (*ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated, error) {
	event := new(ContractECDSARegistryCoordinatorQuorumBlockNumberUpdated)
	if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "QuorumBlockNumberUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractECDSARegistryCoordinatorUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorUnpausedIterator struct {
	Event *ContractECDSARegistryCoordinatorUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractECDSARegistryCoordinatorUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractECDSARegistryCoordinatorUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractECDSARegistryCoordinatorUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractECDSARegistryCoordinatorUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractECDSARegistryCoordinatorUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractECDSARegistryCoordinatorUnpaused represents a Unpaused event raised by the ContractECDSARegistryCoordinator contract.
type ContractECDSARegistryCoordinatorUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractECDSARegistryCoordinatorUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractECDSARegistryCoordinatorUnpausedIterator{contract: _ContractECDSARegistryCoordinator.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractECDSARegistryCoordinatorUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractECDSARegistryCoordinator.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractECDSARegistryCoordinatorUnpaused)
				if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractECDSARegistryCoordinator *ContractECDSARegistryCoordinatorFilterer) ParseUnpaused(log types.Log) (*ContractECDSARegistryCoordinatorUnpaused, error) {
	event := new(ContractECDSARegistryCoordinatorUnpaused)
	if err := _ContractECDSARegistryCoordinator.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
