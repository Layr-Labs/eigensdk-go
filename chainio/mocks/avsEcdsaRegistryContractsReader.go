// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/eigensdk-go/chainio/clients/avsregistry/ecdsa (interfaces: AvsEcdsaRegistryReader)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/avsEcdsaRegistryContractsReader.go -package=mocks github.com/Layr-Labs/eigensdk-go/chainio/clients/avsregistry/ecdsa AvsEcdsaRegistryReader
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	contractECDSAOperatorStateRetriever "github.com/Layr-Labs/eigensdk-go/contracts/bindings/ECDSAOperatorStateRetriever"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockAvsEcdsaRegistryReader is a mock of AvsEcdsaRegistryReader interface.
type MockAvsEcdsaRegistryReader struct {
	ctrl     *gomock.Controller
	recorder *MockAvsEcdsaRegistryReaderMockRecorder
}

// MockAvsEcdsaRegistryReaderMockRecorder is the mock recorder for MockAvsEcdsaRegistryReader.
type MockAvsEcdsaRegistryReaderMockRecorder struct {
	mock *MockAvsEcdsaRegistryReader
}

// NewMockAvsEcdsaRegistryReader creates a new mock instance.
func NewMockAvsEcdsaRegistryReader(ctrl *gomock.Controller) *MockAvsEcdsaRegistryReader {
	mock := &MockAvsEcdsaRegistryReader{ctrl: ctrl}
	mock.recorder = &MockAvsEcdsaRegistryReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvsEcdsaRegistryReader) EXPECT() *MockAvsEcdsaRegistryReaderMockRecorder {
	return m.recorder
}

// GetCheckSignaturesIndices mocks base method.
func (m *MockAvsEcdsaRegistryReader) GetCheckSignaturesIndices(arg0 *bind.CallOpts, arg1 uint32, arg2 []byte, arg3 []common.Address) (contractECDSAOperatorStateRetriever.ECDSAOperatorStateRetrieverCheckSignaturesIndices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckSignaturesIndices", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(contractECDSAOperatorStateRetriever.ECDSAOperatorStateRetrieverCheckSignaturesIndices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckSignaturesIndices indicates an expected call of GetCheckSignaturesIndices.
func (mr *MockAvsEcdsaRegistryReaderMockRecorder) GetCheckSignaturesIndices(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckSignaturesIndices", reflect.TypeOf((*MockAvsEcdsaRegistryReader)(nil).GetCheckSignaturesIndices), arg0, arg1, arg2, arg3)
}

// GetOperatorsStakeInQuorumsAtBlock mocks base method.
func (m *MockAvsEcdsaRegistryReader) GetOperatorsStakeInQuorumsAtBlock(arg0 *bind.CallOpts, arg1 []byte, arg2 uint32) ([][]contractECDSAOperatorStateRetriever.ECDSAOperatorStateRetrieverOperator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorsStakeInQuorumsAtBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].([][]contractECDSAOperatorStateRetriever.ECDSAOperatorStateRetrieverOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorsStakeInQuorumsAtBlock indicates an expected call of GetOperatorsStakeInQuorumsAtBlock.
func (mr *MockAvsEcdsaRegistryReaderMockRecorder) GetOperatorsStakeInQuorumsAtBlock(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorsStakeInQuorumsAtBlock", reflect.TypeOf((*MockAvsEcdsaRegistryReader)(nil).GetOperatorsStakeInQuorumsAtBlock), arg0, arg1, arg2)
}

// IsOperatorRegistered mocks base method.
func (m *MockAvsEcdsaRegistryReader) IsOperatorRegistered(arg0 *bind.CallOpts, arg1 common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOperatorRegistered", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOperatorRegistered indicates an expected call of IsOperatorRegistered.
func (mr *MockAvsEcdsaRegistryReaderMockRecorder) IsOperatorRegistered(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOperatorRegistered", reflect.TypeOf((*MockAvsEcdsaRegistryReader)(nil).IsOperatorRegistered), arg0, arg1)
}
