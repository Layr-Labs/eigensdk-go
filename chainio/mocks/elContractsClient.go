// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/eigensdk-go/chainio/clients (interfaces: ELContractsClient)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/elContractsClient.go -package=mocks github.com/Layr-Labs/eigensdk-go/chainio/clients ELContractsClient
//
// Package mocks is a generated GoMock package.
package mocks

import (
	big "math/big"
	reflect "reflect"

	clients "github.com/Layr-Labs/eigensdk-go/chainio/clients"
	contractBLSPublicKeyCompendium "github.com/Layr-Labs/eigensdk-go/contracts/bindings/BLSPublicKeyCompendium"
	contractDelegationManager "github.com/Layr-Labs/eigensdk-go/contracts/bindings/DelegationManager"
	contractIStrategy "github.com/Layr-Labs/eigensdk-go/contracts/bindings/IStrategy"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "go.uber.org/mock/gomock"
)

// MockELContractsClient is a mock of ELContractsClient interface.
type MockELContractsClient struct {
	ctrl     *gomock.Controller
	recorder *MockELContractsClientMockRecorder
}

// MockELContractsClientMockRecorder is the mock recorder for MockELContractsClient.
type MockELContractsClientMockRecorder struct {
	mock *MockELContractsClient
}

// NewMockELContractsClient creates a new mock instance.
func NewMockELContractsClient(ctrl *gomock.Controller) *MockELContractsClient {
	mock := &MockELContractsClient{ctrl: ctrl}
	mock.recorder = &MockELContractsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockELContractsClient) EXPECT() *MockELContractsClientMockRecorder {
	return m.recorder
}

// ContractCanSlashOperatorUntilBlock mocks base method.
func (m *MockELContractsClient) ContractCanSlashOperatorUntilBlock(arg0 *bind.CallOpts, arg1, arg2 common.Address) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractCanSlashOperatorUntilBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractCanSlashOperatorUntilBlock indicates an expected call of ContractCanSlashOperatorUntilBlock.
func (mr *MockELContractsClientMockRecorder) ContractCanSlashOperatorUntilBlock(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractCanSlashOperatorUntilBlock", reflect.TypeOf((*MockELContractsClient)(nil).ContractCanSlashOperatorUntilBlock), arg0, arg1, arg2)
}

// DepositIntoStrategy mocks base method.
func (m *MockELContractsClient) DepositIntoStrategy(arg0 *bind.TransactOpts, arg1, arg2 common.Address, arg3 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositIntoStrategy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DepositIntoStrategy indicates an expected call of DepositIntoStrategy.
func (mr *MockELContractsClientMockRecorder) DepositIntoStrategy(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositIntoStrategy", reflect.TypeOf((*MockELContractsClient)(nil).DepositIntoStrategy), arg0, arg1, arg2, arg3)
}

// GetBLSPublicKeyCompendiumContractAddress mocks base method.
func (m *MockELContractsClient) GetBLSPublicKeyCompendiumContractAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBLSPublicKeyCompendiumContractAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetBLSPublicKeyCompendiumContractAddress indicates an expected call of GetBLSPublicKeyCompendiumContractAddress.
func (mr *MockELContractsClientMockRecorder) GetBLSPublicKeyCompendiumContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBLSPublicKeyCompendiumContractAddress", reflect.TypeOf((*MockELContractsClient)(nil).GetBLSPublicKeyCompendiumContractAddress))
}

// GetOperatorAddressFromPubkeyHash mocks base method.
func (m *MockELContractsClient) GetOperatorAddressFromPubkeyHash(arg0 *bind.CallOpts, arg1 [32]byte) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorAddressFromPubkeyHash", arg0, arg1)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorAddressFromPubkeyHash indicates an expected call of GetOperatorAddressFromPubkeyHash.
func (mr *MockELContractsClientMockRecorder) GetOperatorAddressFromPubkeyHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorAddressFromPubkeyHash", reflect.TypeOf((*MockELContractsClient)(nil).GetOperatorAddressFromPubkeyHash), arg0, arg1)
}

// GetOperatorPubkeyHash mocks base method.
func (m *MockELContractsClient) GetOperatorPubkeyHash(arg0 *bind.CallOpts, arg1 common.Address) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorPubkeyHash", arg0, arg1)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorPubkeyHash indicates an expected call of GetOperatorPubkeyHash.
func (mr *MockELContractsClientMockRecorder) GetOperatorPubkeyHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorPubkeyHash", reflect.TypeOf((*MockELContractsClient)(nil).GetOperatorPubkeyHash), arg0, arg1)
}

// GetStrategyAndUnderlyingERC20Token mocks base method.
func (m *MockELContractsClient) GetStrategyAndUnderlyingERC20Token(arg0 common.Address) (*contractIStrategy.ContractIStrategy, clients.ERC20ContractClient, common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrategyAndUnderlyingERC20Token", arg0)
	ret0, _ := ret[0].(*contractIStrategy.ContractIStrategy)
	ret1, _ := ret[1].(clients.ERC20ContractClient)
	ret2, _ := ret[2].(common.Address)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetStrategyAndUnderlyingERC20Token indicates an expected call of GetStrategyAndUnderlyingERC20Token.
func (mr *MockELContractsClientMockRecorder) GetStrategyAndUnderlyingERC20Token(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrategyAndUnderlyingERC20Token", reflect.TypeOf((*MockELContractsClient)(nil).GetStrategyAndUnderlyingERC20Token), arg0)
}

// GetStrategyAndUnderlyingToken mocks base method.
func (m *MockELContractsClient) GetStrategyAndUnderlyingToken(arg0 common.Address) (*contractIStrategy.ContractIStrategy, common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrategyAndUnderlyingToken", arg0)
	ret0, _ := ret[0].(*contractIStrategy.ContractIStrategy)
	ret1, _ := ret[1].(common.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStrategyAndUnderlyingToken indicates an expected call of GetStrategyAndUnderlyingToken.
func (mr *MockELContractsClientMockRecorder) GetStrategyAndUnderlyingToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrategyAndUnderlyingToken", reflect.TypeOf((*MockELContractsClient)(nil).GetStrategyAndUnderlyingToken), arg0)
}

// GetStrategyManagerContractAddress mocks base method.
func (m *MockELContractsClient) GetStrategyManagerContractAddress() (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrategyManagerContractAddress")
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStrategyManagerContractAddress indicates an expected call of GetStrategyManagerContractAddress.
func (mr *MockELContractsClientMockRecorder) GetStrategyManagerContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrategyManagerContractAddress", reflect.TypeOf((*MockELContractsClient)(nil).GetStrategyManagerContractAddress))
}

// IsFrozen mocks base method.
func (m *MockELContractsClient) IsFrozen(arg0 *bind.CallOpts, arg1 common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFrozen", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFrozen indicates an expected call of IsFrozen.
func (mr *MockELContractsClientMockRecorder) IsFrozen(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFrozen", reflect.TypeOf((*MockELContractsClient)(nil).IsFrozen), arg0, arg1)
}

// IsOperator mocks base method.
func (m *MockELContractsClient) IsOperator(arg0 *bind.CallOpts, arg1 common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOperator", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOperator indicates an expected call of IsOperator.
func (mr *MockELContractsClientMockRecorder) IsOperator(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOperator", reflect.TypeOf((*MockELContractsClient)(nil).IsOperator), arg0, arg1)
}

// ModifyOperatorDetails mocks base method.
func (m *MockELContractsClient) ModifyOperatorDetails(arg0 *bind.TransactOpts, arg1 contractDelegationManager.IDelegationManagerOperatorDetails) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyOperatorDetails", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyOperatorDetails indicates an expected call of ModifyOperatorDetails.
func (mr *MockELContractsClientMockRecorder) ModifyOperatorDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOperatorDetails", reflect.TypeOf((*MockELContractsClient)(nil).ModifyOperatorDetails), arg0, arg1)
}

// OperatorDetails mocks base method.
func (m *MockELContractsClient) OperatorDetails(arg0 *bind.CallOpts, arg1 common.Address) (contractDelegationManager.IDelegationManagerOperatorDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorDetails", arg0, arg1)
	ret0, _ := ret[0].(contractDelegationManager.IDelegationManagerOperatorDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatorDetails indicates an expected call of OperatorDetails.
func (mr *MockELContractsClientMockRecorder) OperatorDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorDetails", reflect.TypeOf((*MockELContractsClient)(nil).OperatorDetails), arg0, arg1)
}

// OperatorShares mocks base method.
func (m *MockELContractsClient) OperatorShares(arg0 *bind.CallOpts, arg1, arg2 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorShares", arg0, arg1, arg2)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatorShares indicates an expected call of OperatorShares.
func (mr *MockELContractsClientMockRecorder) OperatorShares(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorShares", reflect.TypeOf((*MockELContractsClient)(nil).OperatorShares), arg0, arg1, arg2)
}

// OptIntoSlashing mocks base method.
func (m *MockELContractsClient) OptIntoSlashing(arg0 *bind.TransactOpts, arg1 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptIntoSlashing", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptIntoSlashing indicates an expected call of OptIntoSlashing.
func (mr *MockELContractsClientMockRecorder) OptIntoSlashing(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptIntoSlashing", reflect.TypeOf((*MockELContractsClient)(nil).OptIntoSlashing), arg0, arg1)
}

// RegisterAsOperator mocks base method.
func (m *MockELContractsClient) RegisterAsOperator(arg0 *bind.TransactOpts, arg1 contractDelegationManager.IDelegationManagerOperatorDetails, arg2 string) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAsOperator", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAsOperator indicates an expected call of RegisterAsOperator.
func (mr *MockELContractsClientMockRecorder) RegisterAsOperator(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAsOperator", reflect.TypeOf((*MockELContractsClient)(nil).RegisterAsOperator), arg0, arg1, arg2)
}

// RegisterBLSPublicKey mocks base method.
func (m *MockELContractsClient) RegisterBLSPublicKey(arg0 *bind.TransactOpts, arg1, arg2 contractBLSPublicKeyCompendium.BN254G1Point, arg3 contractBLSPublicKeyCompendium.BN254G2Point) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBLSPublicKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterBLSPublicKey indicates an expected call of RegisterBLSPublicKey.
func (mr *MockELContractsClientMockRecorder) RegisterBLSPublicKey(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBLSPublicKey", reflect.TypeOf((*MockELContractsClient)(nil).RegisterBLSPublicKey), arg0, arg1, arg2, arg3)
}

// UpdateOperatorMetadataURI mocks base method.
func (m *MockELContractsClient) UpdateOperatorMetadataURI(arg0 *bind.TransactOpts, arg1 string) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperatorMetadataURI", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOperatorMetadataURI indicates an expected call of UpdateOperatorMetadataURI.
func (mr *MockELContractsClientMockRecorder) UpdateOperatorMetadataURI(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperatorMetadataURI", reflect.TypeOf((*MockELContractsClient)(nil).UpdateOperatorMetadataURI), arg0, arg1)
}

// WatchNewPubkeyRegistration mocks base method.
func (m *MockELContractsClient) WatchNewPubkeyRegistration(arg0 *bind.WatchOpts, arg1 chan<- *contractBLSPublicKeyCompendium.ContractBLSPublicKeyCompendiumNewPubkeyRegistration, arg2 []common.Address) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchNewPubkeyRegistration", arg0, arg1, arg2)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchNewPubkeyRegistration indicates an expected call of WatchNewPubkeyRegistration.
func (mr *MockELContractsClientMockRecorder) WatchNewPubkeyRegistration(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNewPubkeyRegistration", reflect.TypeOf((*MockELContractsClient)(nil).WatchNewPubkeyRegistration), arg0, arg1, arg2)
}
