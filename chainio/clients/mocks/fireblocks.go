// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/eigensdk-go/chainio/clients/fireblocks (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=./clients/mocks/fireblocks.go -package=mocks -mock_names=Client=MockFireblocksClient github.com/Layr-Labs/eigensdk-go/chainio/clients/fireblocks Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	fireblocks "github.com/Layr-Labs/eigensdk-go/chainio/clients/fireblocks"
	gomock "go.uber.org/mock/gomock"
)

// MockFireblocksClient is a mock of Client interface.
type MockFireblocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ContractCall mocks base method.
func (m *MockClient) ContractCall(arg0 context.Context, arg1 *fireblocks.ContractCallRequest) (*fireblocks.ContractCallResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractCall", arg0, arg1)
	ret0, _ := ret[0].(*fireblocks.ContractCallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractCall indicates an expected call of ContractCall.
func (mr *MockClientMockRecorder) ContractCall(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractCall", reflect.TypeOf((*MockClient)(nil).ContractCall), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockClient) GetTransaction(arg0 context.Context, arg1 string) (*fireblocks.transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(*fireblocks.transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockClientMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockClient)(nil).GetTransaction), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockFireblocksClient) GetTransaction(arg0 context.Context, arg1 string) (*fireblocks.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(*fireblocks.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockFireblocksClientMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockFireblocksClient)(nil).GetTransaction), arg0, arg1)
}

// ListContracts mocks base method.
func (m *MockClient) ListContracts(arg0 context.Context) ([]fireblocks.WhitelistedContract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContracts", arg0)
	ret0, _ := ret[0].([]fireblocks.WhitelistedContract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContracts indicates an expected call of ListContracts.
func (mr *MockClientMockRecorder) ListContracts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContracts", reflect.TypeOf((*MockClient)(nil).ListContracts), arg0)
}

// ListVaultAccounts mocks base method.
func (m *MockClient) ListVaultAccounts(arg0 context.Context) ([]fireblocks.VaultAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVaultAccounts", arg0)
	ret0, _ := ret[0].([]fireblocks.VaultAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVaultAccounts indicates an expected call of ListVaultAccounts.
func (mr *MockClientMockRecorder) ListVaultAccounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVaultAccounts", reflect.TypeOf((*MockClient)(nil).ListVaultAccounts), arg0)
}

// ListVaultAccounts mocks base method.
func (m *MockFireblocksClient) ListVaultAccounts(arg0 context.Context) ([]fireblocks.VaultAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVaultAccounts", arg0)
	ret0, _ := ret[0].([]fireblocks.VaultAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVaultAccounts indicates an expected call of ListVaultAccounts.
func (mr *MockFireblocksClientMockRecorder) ListVaultAccounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVaultAccounts", reflect.TypeOf((*MockFireblocksClient)(nil).ListVaultAccounts), arg0)
}
