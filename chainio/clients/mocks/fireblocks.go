// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/eigensdk-go/chainio/clients/fireblocks (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=./clients/mocks/fireblocks.go -package=mocks -mock_names=Client=MockFireblocksClient github.com/Layr-Labs/eigensdk-go/chainio/clients/fireblocks Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	fireblocks "github.com/Layr-Labs/eigensdk-go/chainio/clients/fireblocks"
	gomock "go.uber.org/mock/gomock"
)

// MockFireblocksClient is a mock of Client interface.
type MockFireblocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockFireblocksClientMockRecorder
}

// MockFireblocksClientMockRecorder is the mock recorder for MockFireblocksClient.
type MockFireblocksClientMockRecorder struct {
	mock *MockFireblocksClient
}

// NewMockFireblocksClient creates a new mock instance.
func NewMockFireblocksClient(ctrl *gomock.Controller) *MockFireblocksClient {
	mock := &MockFireblocksClient{ctrl: ctrl}
	mock.recorder = &MockFireblocksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFireblocksClient) EXPECT() *MockFireblocksClientMockRecorder {
	return m.recorder
}

// CancelTransaction mocks base method.
func (m *MockFireblocksClient) CancelTransaction(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTransaction", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTransaction indicates an expected call of CancelTransaction.
func (mr *MockFireblocksClientMockRecorder) CancelTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTransaction", reflect.TypeOf((*MockFireblocksClient)(nil).CancelTransaction), arg0, arg1)
}

// ContractCall mocks base method.
func (m *MockFireblocksClient) ContractCall(arg0 context.Context, arg1 *fireblocks.TransactionRequest) (*fireblocks.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractCall", arg0, arg1)
	ret0, _ := ret[0].(*fireblocks.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractCall indicates an expected call of ContractCall.
func (mr *MockFireblocksClientMockRecorder) ContractCall(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractCall", reflect.TypeOf((*MockFireblocksClient)(nil).ContractCall), arg0, arg1)
}

// GetAssetAddresses mocks base method.
func (m *MockFireblocksClient) GetAssetAddresses(arg0 context.Context, arg1 string, arg2 fireblocks.AssetID) ([]fireblocks.AssetAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetAddresses", arg0, arg1, arg2)
	ret0, _ := ret[0].([]fireblocks.AssetAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetAddresses indicates an expected call of GetAssetAddresses.
func (mr *MockFireblocksClientMockRecorder) GetAssetAddresses(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetAddresses", reflect.TypeOf((*MockFireblocksClient)(nil).GetAssetAddresses), arg0, arg1, arg2)
}

// GetTransaction mocks base method.
func (m *MockFireblocksClient) GetTransaction(arg0 context.Context, arg1 string) (*fireblocks.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(*fireblocks.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockFireblocksClientMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockFireblocksClient)(nil).GetTransaction), arg0, arg1)
}

// ListContracts mocks base method.
func (m *MockFireblocksClient) ListContracts(arg0 context.Context) ([]fireblocks.WhitelistedContract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContracts", arg0)
	ret0, _ := ret[0].([]fireblocks.WhitelistedContract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContracts indicates an expected call of ListContracts.
func (mr *MockFireblocksClientMockRecorder) ListContracts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContracts", reflect.TypeOf((*MockFireblocksClient)(nil).ListContracts), arg0)
}

// ListExternalWallets mocks base method.
func (m *MockFireblocksClient) ListExternalWallets(arg0 context.Context) ([]fireblocks.WhitelistedAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExternalWallets", arg0)
	ret0, _ := ret[0].([]fireblocks.WhitelistedAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExternalWallets indicates an expected call of ListExternalWallets.
func (mr *MockFireblocksClientMockRecorder) ListExternalWallets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalWallets", reflect.TypeOf((*MockFireblocksClient)(nil).ListExternalWallets), arg0)
}

// ListVaultAccounts mocks base method.
func (m *MockFireblocksClient) ListVaultAccounts(arg0 context.Context) ([]fireblocks.VaultAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVaultAccounts", arg0)
	ret0, _ := ret[0].([]fireblocks.VaultAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVaultAccounts indicates an expected call of ListVaultAccounts.
func (mr *MockFireblocksClientMockRecorder) ListVaultAccounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVaultAccounts", reflect.TypeOf((*MockFireblocksClient)(nil).ListVaultAccounts), arg0)
}

// Transfer mocks base method.
func (m *MockFireblocksClient) Transfer(arg0 context.Context, arg1 *fireblocks.TransactionRequest) (*fireblocks.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1)
	ret0, _ := ret[0].(*fireblocks.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockFireblocksClientMockRecorder) Transfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockFireblocksClient)(nil).Transfer), arg0, arg1)
}
